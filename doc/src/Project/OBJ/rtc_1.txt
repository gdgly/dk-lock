; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\rtc_1.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\rtc_1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\FLib\inc -I..\CORE -I..\driver -I..\BSP -I..\SYS -I..\tplib -IE:\github\dk-lock\src\Proj\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=..\obj\rtc_1.crf ..\driver\rtc.c]
                          THUMB

                          AREA ||i.Is_Leap_Year||, CODE, READONLY, ALIGN=1

                  Is_Leap_Year PROC
;;;91     //输出:该年份是不是闰年.1,是.0,不是
;;;92     u8 Is_Leap_Year(u16 year)
000000  4601              MOV      r1,r0
;;;93     {			  
;;;94     	if(year%4==0) //必须能被4整除
000002  17ca              ASRS     r2,r1,#31
000004  eb017292          ADD      r2,r1,r2,LSR #30
000008  1092              ASRS     r2,r2,#2
00000a  eba10282          SUB      r2,r1,r2,LSL #2
00000e  b992              CBNZ     r2,|L1.54|
;;;95     	{ 
;;;96     		if(year%100==0) 
000010  2064              MOVS     r0,#0x64
000012  fb91f2f0          SDIV     r2,r1,r0
000016  fb001012          MLS      r0,r0,r2,r1
00001a  b950              CBNZ     r0,|L1.50|
;;;97     		{ 
;;;98     			if(year%400==0)return 1;//如果以00结尾,还要能被400整除 	   
00001c  f44f70c8          MOV      r0,#0x190
000020  fb91f2f0          SDIV     r2,r1,r0
000024  fb001012          MLS      r0,r0,r2,r1
000028  b908              CBNZ     r0,|L1.46|
00002a  2001              MOVS     r0,#1
                  |L1.44|
;;;99     			else return 0;   
;;;100    		}else return 1;   
;;;101    	}else return 0;	
;;;102    }	 			   
00002c  4770              BX       lr
                  |L1.46|
00002e  2000              MOVS     r0,#0                 ;99
000030  e7fc              B        |L1.44|
                  |L1.50|
000032  2001              MOVS     r0,#1                 ;100
000034  e7fa              B        |L1.44|
                  |L1.54|
000036  2000              MOVS     r0,#0                 ;101
000038  e7f8              B        |L1.44|
;;;103    //设置时钟
                          ENDP


                          AREA ||i.RTC_Get||, CODE, READONLY, ALIGN=2

                  RTC_Get PROC
;;;142    //返回值:0,成功;其他:错误代码.
;;;143    u8 RTC_Get(void)
000000  b570              PUSH     {r4-r6,lr}
;;;144    {
;;;145    	static u16 daycnt=0;
;;;146    	u32 timecount=0; 
000002  2600              MOVS     r6,#0
;;;147    	u32 temp=0;
000004  2400              MOVS     r4,#0
;;;148    	u16 temp1=0;	  
000006  2500              MOVS     r5,#0
;;;149        timecount=RTC_GetCounter();	 
000008  f7fffffe          BL       RTC_GetCounter
00000c  4606              MOV      r6,r0
;;;150     	temp=timecount/86400;   //得到天数(秒钟数对应的)
00000e  4838              LDR      r0,|L2.240|
000010  fbb6f4f0          UDIV     r4,r6,r0
;;;151    	if(daycnt!=temp)//超过一天了
000014  4837              LDR      r0,|L2.244|
000016  8800              LDRH     r0,[r0,#0]  ; daycnt
000018  42a0              CMP      r0,r4
00001a  d03c              BEQ      |L2.150|
;;;152    	{	  
;;;153    		daycnt=temp;
00001c  4935              LDR      r1,|L2.244|
00001e  800c              STRH     r4,[r1,#0]
;;;154    		temp1=1970;	//从1970年开始
000020  f24075b2          MOV      r5,#0x7b2
;;;155    		while(temp>=365)
000024  e010              B        |L2.72|
                  |L2.38|
;;;156    		{				 
;;;157    			if(Is_Leap_Year(temp1))//是闰年
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       Is_Leap_Year
00002c  b140              CBZ      r0,|L2.64|
;;;158    			{
;;;159    				if(temp>=366)temp-=366;//闰年的秒钟数
00002e  f5b47fb7          CMP      r4,#0x16e
000032  d302              BCC      |L2.58|
000034  f5a474b7          SUB      r4,r4,#0x16e
000038  e004              B        |L2.68|
                  |L2.58|
;;;160    				else {temp1++;break;}  
00003a  1c68              ADDS     r0,r5,#1
00003c  b285              UXTH     r5,r0
00003e  e006              B        |L2.78|
                  |L2.64|
;;;161    			}
;;;162    			else temp-=365;	  //平年 
000040  f2a4146d          SUB      r4,r4,#0x16d
                  |L2.68|
;;;163    			temp1++;  
000044  1c68              ADDS     r0,r5,#1
000046  b285              UXTH     r5,r0
                  |L2.72|
000048  f5b47fb6          CMP      r4,#0x16c             ;155
00004c  d8eb              BHI      |L2.38|
                  |L2.78|
00004e  bf00              NOP                            ;160
;;;164    		}   
;;;165    		calendar.w_year=temp1;//得到年份
000050  4829              LDR      r0,|L2.248|
000052  8085              STRH     r5,[r0,#4]
;;;166    		temp1=0;
000054  2500              MOVS     r5,#0
;;;167    		while(temp>=28)//超过了一个月
000056  e016              B        |L2.134|
                  |L2.88|
;;;168    		{
;;;169    			if(Is_Leap_Year(calendar.w_year)&&temp1==1)//当年是不是闰年/2月份
000058  4927              LDR      r1,|L2.248|
00005a  8888              LDRH     r0,[r1,#4]  ; calendar
00005c  f7fffffe          BL       Is_Leap_Year
000060  b130              CBZ      r0,|L2.112|
000062  2d01              CMP      r5,#1
000064  d104              BNE      |L2.112|
;;;170    			{
;;;171    				if(temp>=29)temp-=29;//闰年的秒钟数
000066  2c1d              CMP      r4,#0x1d
000068  d301              BCC      |L2.110|
00006a  3c1d              SUBS     r4,r4,#0x1d
00006c  e009              B        |L2.130|
                  |L2.110|
;;;172    				else break; 
00006e  e00c              B        |L2.138|
                  |L2.112|
;;;173    			}
;;;174    			else 
;;;175    			{
;;;176    				if(temp>=mon_table[temp1])temp-=mon_table[temp1];//平年
000070  4822              LDR      r0,|L2.252|
000072  5d40              LDRB     r0,[r0,r5]
000074  42a0              CMP      r0,r4
000076  d803              BHI      |L2.128|
000078  4820              LDR      r0,|L2.252|
00007a  5d40              LDRB     r0,[r0,r5]
00007c  1a24              SUBS     r4,r4,r0
00007e  e000              B        |L2.130|
                  |L2.128|
;;;177    				else break;
000080  e003              B        |L2.138|
                  |L2.130|
;;;178    			}
;;;179    			temp1++;  
000082  1c68              ADDS     r0,r5,#1
000084  b285              UXTH     r5,r0
                  |L2.134|
000086  2c1c              CMP      r4,#0x1c              ;167
000088  d2e6              BCS      |L2.88|
                  |L2.138|
00008a  bf00              NOP                            ;172
;;;180    		}
;;;181    		calendar.w_month=temp1+1;	//得到月份
00008c  1c68              ADDS     r0,r5,#1
00008e  491a              LDR      r1,|L2.248|
000090  7188              STRB     r0,[r1,#6]
;;;182    		calendar.w_date=temp+1;  	//得到日期 
000092  1c60              ADDS     r0,r4,#1
000094  71c8              STRB     r0,[r1,#7]
                  |L2.150|
;;;183    	}
;;;184    	temp=timecount%86400;     		//得到秒钟数   	   
000096  4816              LDR      r0,|L2.240|
000098  fbb6f1f0          UDIV     r1,r6,r0
00009c  fb006411          MLS      r4,r0,r1,r6
;;;185    	calendar.hour=temp/3600;     	//小时
0000a0  f44f6061          MOV      r0,#0xe10
0000a4  fbb4f0f0          UDIV     r0,r4,r0
0000a8  4913              LDR      r1,|L2.248|
0000aa  7008              STRB     r0,[r1,#0]
;;;186    	calendar.min=(temp%3600)/60; 	//分钟	
0000ac  f44f6061          MOV      r0,#0xe10
0000b0  fbb4f1f0          UDIV     r1,r4,r0
0000b4  fb004011          MLS      r0,r0,r1,r4
0000b8  213c              MOVS     r1,#0x3c
0000ba  fbb0f0f1          UDIV     r0,r0,r1
0000be  490e              LDR      r1,|L2.248|
0000c0  7048              STRB     r0,[r1,#1]
;;;187    	calendar.sec=(temp%3600)%60; 	//秒钟
0000c2  f44f6061          MOV      r0,#0xe10
0000c6  fbb4f1f0          UDIV     r1,r4,r0
0000ca  fb004011          MLS      r0,r0,r1,r4
0000ce  213c              MOVS     r1,#0x3c
0000d0  fbb0f2f1          UDIV     r2,r0,r1
0000d4  fb010012          MLS      r0,r1,r2,r0
0000d8  4907              LDR      r1,|L2.248|
0000da  7088              STRB     r0,[r1,#2]
;;;188    	calendar.week=RTC_Get_Week(calendar.w_year,calendar.w_month,calendar.w_date);//获取星期   
0000dc  460b              MOV      r3,r1
0000de  79da              LDRB     r2,[r3,#7]  ; calendar
0000e0  7999              LDRB     r1,[r3,#6]  ; calendar
0000e2  8898              LDRH     r0,[r3,#4]  ; calendar
0000e4  f7fffffe          BL       RTC_Get_Week
0000e8  4903              LDR      r1,|L2.248|
0000ea  7208              STRB     r0,[r1,#8]
;;;189    	return 0;
0000ec  2000              MOVS     r0,#0
;;;190    }	 
0000ee  bd70              POP      {r4-r6,pc}
;;;191    //获得现在是星期几
                          ENDP

                  |L2.240|
                          DCD      0x00015180
                  |L2.244|
                          DCD      daycnt
                  |L2.248|
                          DCD      calendar
                  |L2.252|
                          DCD      mon_table

                          AREA ||i.RTC_Get_Week||, CODE, READONLY, ALIGN=2

                  RTC_Get_Week PROC
;;;194    //返回值：星期号																						 
;;;195    u8 RTC_Get_Week(u16 year,u8 month,u8 day)
000000  b5f0              PUSH     {r4-r7,lr}
;;;196    {	
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;197    	u16 temp2;
;;;198    	u8 yearH,yearL;
;;;199    	
;;;200    	yearH=year/100;	yearL=year%100; 
000008  2064              MOVS     r0,#0x64
00000a  fb93f0f0          SDIV     r0,r3,r0
00000e  b2c6              UXTB     r6,r0
000010  2064              MOVS     r0,#0x64
000012  fb93f7f0          SDIV     r7,r3,r0
000016  fb003017          MLS      r0,r0,r7,r3
00001a  b2c1              UXTB     r1,r0
;;;201    	// 如果为21世纪,年份数加100  
;;;202    	if (yearH>19)yearL+=100;
00001c  2e13              CMP      r6,#0x13
00001e  dd02              BLE      |L3.38|
000020  f1010064          ADD      r0,r1,#0x64
000024  b2c1              UXTB     r1,r0
                  |L3.38|
;;;203    	// 所过闰年数只算1900年之后的  
;;;204    	temp2=yearL+yearL/4;
000026  4608              MOV      r0,r1
000028  17cf              ASRS     r7,r1,#31
00002a  eb017797          ADD      r7,r1,r7,LSR #30
00002e  eb0107a7          ADD      r7,r1,r7,ASR #2
000032  b2ba              UXTH     r2,r7
;;;205    	temp2=temp2%7; 
000034  2007              MOVS     r0,#7
000036  fb92f7f0          SDIV     r7,r2,r0
00003a  fb002017          MLS      r0,r0,r7,r2
00003e  b282              UXTH     r2,r0
;;;206    	temp2=temp2+day+table_week[month-1];
000040  1957              ADDS     r7,r2,r5
000042  1e60              SUBS     r0,r4,#1
000044  f8dfc02c          LDR      r12,|L3.116|
000048  f81c0000          LDRB     r0,[r12,r0]
00004c  4438              ADD      r0,r0,r7
00004e  b282              UXTH     r2,r0
;;;207    	if (yearL%4==0&&month<3)temp2--;
000050  17cf              ASRS     r7,r1,#31
000052  eb017797          ADD      r7,r1,r7,LSR #30
000056  10bf              ASRS     r7,r7,#2
000058  eba10787          SUB      r7,r1,r7,LSL #2
00005c  b91f              CBNZ     r7,|L3.102|
00005e  2c03              CMP      r4,#3
000060  da01              BGE      |L3.102|
000062  1e50              SUBS     r0,r2,#1
000064  b282              UXTH     r2,r0
                  |L3.102|
;;;208    	return(temp2%7);
000066  2007              MOVS     r0,#7
000068  fb92f7f0          SDIV     r7,r2,r0
00006c  fb002017          MLS      r0,r0,r7,r2
000070  b2c0              UXTB     r0,r0
;;;209    }			  
000072  bdf0              POP      {r4-r7,pc}
;;;210    
                          ENDP

                  |L3.116|
                          DCD      table_week

                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=1

                  RTC_IRQHandler PROC
;;;72     //extern u16 tcnt; 
;;;73     void RTC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;74     {		 
;;;75     	if (RTC_GetITStatus(RTC_IT_SEC) != RESET)//秒钟中断
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RTC_GetITStatus
000008  b108              CBZ      r0,|L4.14|
;;;76     	{							
;;;77     		RTC_Get();//更新时间   
00000a  f7fffffe          BL       RTC_Get
                  |L4.14|
;;;78      	}
;;;79     	if(RTC_GetITStatus(RTC_IT_ALR)!= RESET)//闹钟中断
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       RTC_GetITStatus
000014  b110              CBZ      r0,|L4.28|
;;;80     	{
;;;81     		RTC_ClearITPendingBit(RTC_IT_ALR);		//清闹钟中断	  	   
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       RTC_ClearITPendingBit
                  |L4.28|
;;;82       	} 				  								 
;;;83     	RTC_ClearITPendingBit(RTC_IT_SEC|RTC_IT_OW);		//清闹钟中断
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       RTC_ClearITPendingBit
;;;84     	RTC_WaitForLastTask();	  	    						 	   	 
000022  f7fffffe          BL       RTC_WaitForLastTask
;;;85     }
000026  bd10              POP      {r4,pc}
;;;86     //判断是否是闰年函数
                          ENDP


                          AREA ||i.RTC_Init||, CODE, READONLY, ALIGN=1

                  RTC_Init PROC
;;;27     
;;;28     u8 RTC_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;29     {
;;;30     	//检查是不是第一次配置时钟
;;;31     	u8 temp=0;
000002  2400              MOVS     r4,#0
;;;32     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);	//使能PWR和BKP外设时钟   
000004  2101              MOVS     r1,#1
000006  f04f50c0          MOV      r0,#0x18000000
00000a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;33     	PWR_BackupAccessCmd(ENABLE);	//使能后备寄存器访问  
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       PWR_BackupAccessCmd
;;;34     	if (BKP_ReadBackupRegister(BKP_DR1) != 0x5050)		//从指定的后备寄存器中读出数据:读出了与写入的指定数据不相乎
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       BKP_ReadBackupRegister
00001a  f2450150          MOV      r1,#0x5050
00001e  4288              CMP      r0,r1
000020  d03f              BEQ      |L5.162|
;;;35     		{	 			
;;;36     
;;;37     		BKP_DeInit();	//复位备份区域 	
000022  f7fffffe          BL       BKP_DeInit
;;;38     		RCC_LSEConfig(RCC_LSE_ON);	//设置外部低速晶振(LSE),使用外设低速晶振
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       RCC_LSEConfig
;;;39     		while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)	//检查指定的RCC标志位设置与否,等待低速晶振就绪
00002c  e004              B        |L5.56|
                  |L5.46|
;;;40     			{
;;;41     			temp++;
00002e  1c60              ADDS     r0,r4,#1
000030  b2c4              UXTB     r4,r0
;;;42     			delay_ms(10);
000032  200a              MOVS     r0,#0xa
000034  f7fffffe          BL       delay_ms
                  |L5.56|
000038  2041              MOVS     r0,#0x41              ;39
00003a  f7fffffe          BL       RCC_GetFlagStatus
00003e  2800              CMP      r0,#0                 ;39
000040  d0f5              BEQ      |L5.46|
;;;43     			}
;;;44     		if(temp>=250)return 1;//初始化时钟失败,晶振有问题	    
000042  2cfa              CMP      r4,#0xfa
000044  db01              BLT      |L5.74|
000046  2001              MOVS     r0,#1
                  |L5.72|
;;;45     		RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);		//设置RTC时钟(RTCCLK),选择LSE作为RTC时钟    
;;;46     		RCC_RTCCLKCmd(ENABLE);	//使能RTC时钟  
;;;47     		RTC_WaitForLastTask();	//等待最近一次对RTC寄存器的写操作完成
;;;48     		RTC_WaitForSynchro();		//等待RTC寄存器同步  
;;;49     		RTC_ITConfig(RTC_IT_SEC, ENABLE);		//使能RTC秒中断
;;;50     		RTC_WaitForLastTask();	//等待最近一次对RTC寄存器的写操作完成
;;;51     		RTC_EnterConfigMode();/// 允许配置	
;;;52     		RTC_SetPrescaler(32767); //设置RTC预分频的值
;;;53     		RTC_WaitForLastTask();	//等待最近一次对RTC寄存器的写操作完成
;;;54     		RTC_Set(2009,12,2,10,0,55);  //设置时间	
;;;55     		RTC_ExitConfigMode(); //退出配置模式  
;;;56     		BKP_WriteBackupRegister(BKP_DR1, 0X5050);	//向指定的后备寄存器中写入用户程序数据
;;;57     		}
;;;58     	else//系统继续计时
;;;59     		{
;;;60     
;;;61     		RTC_WaitForSynchro();	//等待最近一次对RTC寄存器的写操作完成
;;;62     		RTC_ITConfig(RTC_IT_SEC, ENABLE);	//使能RTC秒中断
;;;63     		RTC_WaitForLastTask();	//等待最近一次对RTC寄存器的写操作完成
;;;64     		}
;;;65     	RTC_NVIC_Config();//RCT中断分组设置		    				     
;;;66     	RTC_Get();//更新时间	
;;;67     	return 0; //ok
;;;68     
;;;69     }		 				    
000048  bd1c              POP      {r2-r4,pc}
                  |L5.74|
00004a  f44f7080          MOV      r0,#0x100             ;45
00004e  f7fffffe          BL       RCC_RTCCLKConfig
000052  2001              MOVS     r0,#1                 ;46
000054  f7fffffe          BL       RCC_RTCCLKCmd
000058  f7fffffe          BL       RTC_WaitForLastTask
00005c  f7fffffe          BL       RTC_WaitForSynchro
000060  2101              MOVS     r1,#1                 ;49
000062  4608              MOV      r0,r1                 ;49
000064  f7fffffe          BL       RTC_ITConfig
000068  f7fffffe          BL       RTC_WaitForLastTask
00006c  f7fffffe          BL       RTC_EnterConfigMode
000070  f64770ff          MOV      r0,#0x7fff            ;52
000074  f7fffffe          BL       RTC_SetPrescaler
000078  f7fffffe          BL       RTC_WaitForLastTask
00007c  2037              MOVS     r0,#0x37              ;54
00007e  2100              MOVS     r1,#0                 ;54
000080  230a              MOVS     r3,#0xa               ;54
000082  2202              MOVS     r2,#2                 ;54
000084  e9cd1000          STRD     r1,r0,[sp,#0]         ;54
000088  210c              MOVS     r1,#0xc               ;54
00008a  f24070d9          MOV      r0,#0x7d9             ;54
00008e  f7fffffe          BL       RTC_Set
000092  f7fffffe          BL       RTC_ExitConfigMode
000096  f2450150          MOV      r1,#0x5050            ;56
00009a  2004              MOVS     r0,#4                 ;56
00009c  f7fffffe          BL       BKP_WriteBackupRegister
0000a0  e007              B        |L5.178|
                  |L5.162|
0000a2  f7fffffe          BL       RTC_WaitForSynchro
0000a6  2101              MOVS     r1,#1                 ;62
0000a8  4608              MOV      r0,r1                 ;62
0000aa  f7fffffe          BL       RTC_ITConfig
0000ae  f7fffffe          BL       RTC_WaitForLastTask
                  |L5.178|
0000b2  f7fffffe          BL       RTC_NVIC_Config
0000b6  f7fffffe          BL       RTC_Get
0000ba  2000              MOVS     r0,#0                 ;67
0000bc  e7c4              B        |L5.72|
;;;70     //RTC时钟中断
                          ENDP


                          AREA ||i.RTC_NVIC_Config||, CODE, READONLY, ALIGN=1

                  RTC_NVIC_Config PROC
;;;11      
;;;12     static void RTC_NVIC_Config(void)
000000  b508              PUSH     {r3,lr}
;;;13     {	
;;;14         NVIC_InitTypeDef NVIC_InitStructure;
;;;15     	NVIC_InitStructure.NVIC_IRQChannel = RTC_IRQn;		//RTC全局中断
000002  2003              MOVS     r0,#3
000004  f88d0000          STRB     r0,[sp,#0]
;;;16     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;	//先占优先级1位,从优先级3位
000008  2000              MOVS     r0,#0
00000a  f88d0001          STRB     r0,[sp,#1]
;;;17     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;	//先占优先级0位,从优先级4位
00000e  f88d0002          STRB     r0,[sp,#2]
;;;18     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;		//使能该通道中断
000012  2001              MOVS     r0,#1
000014  f88d0003          STRB     r0,[sp,#3]
;;;19     	NVIC_Init(&NVIC_InitStructure);		//根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       NVIC_Init
;;;20     }
00001e  bd08              POP      {r3,pc}
;;;21     
                          ENDP


                          AREA ||i.RTC_Set||, CODE, READONLY, ALIGN=2

                  RTC_Set PROC
;;;111    const u8 mon_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};
;;;112    u8 RTC_Set(u16 syear,u8 smon,u8 sday,u8 hour,u8 min,u8 sec)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;113    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;114    	u16 t;
;;;115    	u32 seccount=0;
000010  2400              MOVS     r4,#0
;;;116    	if(syear<1970||syear>2099)return 1;	   
000012  f24070b2          MOV      r0,#0x7b2
000016  4286              CMP      r6,r0
000018  db03              BLT      |L7.34|
00001a  f6400033          MOV      r0,#0x833
00001e  4286              CMP      r6,r0
000020  dd02              BLE      |L7.40|
                  |L7.34|
000022  2001              MOVS     r0,#1
                  |L7.36|
;;;117    	for(t=1970;t<syear;t++)	//把所有年份的秒钟相加
;;;118    	{
;;;119    		if(Is_Leap_Year(t))seccount+=31622400;//闰年的秒钟数
;;;120    		else seccount+=31536000;			  //平年的秒钟数
;;;121    	}
;;;122    	smon-=1;
;;;123    	for(t=0;t<smon;t++)	   //把前面月份的秒钟数相加
;;;124    	{
;;;125    		seccount+=(u32)mon_table[t]*86400;//月份秒钟数相加
;;;126    		if(Is_Leap_Year(syear)&&t==1)seccount+=86400;//闰年2月份增加一天的秒钟数	   
;;;127    	}
;;;128    	seccount+=(u32)(sday-1)*86400;//把前面日期的秒钟数相加 
;;;129    	seccount+=(u32)hour*3600;//小时秒钟数
;;;130        seccount+=(u32)min*60;	 //分钟秒钟数
;;;131    	seccount+=sec;//最后的秒钟加上去
;;;132    
;;;133    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);	//使能PWR和BKP外设时钟  
;;;134    	PWR_BackupAccessCmd(ENABLE);	//使能RTC和后备寄存器访问 
;;;135    	RTC_SetCounter(seccount);	//设置RTC计数器的值
;;;136    
;;;137    	RTC_WaitForLastTask();	//等待最近一次对RTC寄存器的写操作完成  	
;;;138    	RTC_Get();
;;;139    	return 0;	    
;;;140    }
000024  e8bd9ff0          POP      {r4-r12,pc}
                  |L7.40|
000028  f24075b2          MOV      r5,#0x7b2             ;117
00002c  e00a              B        |L7.68|
                  |L7.46|
00002e  4628              MOV      r0,r5                 ;119
000030  f7fffffe          BL       Is_Leap_Year
000034  b110              CBZ      r0,|L7.60|
000036  4821              LDR      r0,|L7.188|
000038  4404              ADD      r4,r4,r0              ;119
00003a  e001              B        |L7.64|
                  |L7.60|
00003c  4820              LDR      r0,|L7.192|
00003e  4404              ADD      r4,r4,r0              ;120
                  |L7.64|
000040  1c68              ADDS     r0,r5,#1              ;117
000042  b285              UXTH     r5,r0                 ;117
                  |L7.68|
000044  42b5              CMP      r5,r6                 ;117
000046  dbf2              BLT      |L7.46|
000048  1e78              SUBS     r0,r7,#1              ;122
00004a  b2c7              UXTB     r7,r0                 ;122
00004c  2500              MOVS     r5,#0                 ;123
00004e  e010              B        |L7.114|
                  |L7.80|
000050  481c              LDR      r0,|L7.196|
000052  5d40              LDRB     r0,[r0,r5]            ;125
000054  f24021a3          MOV      r1,#0x2a3             ;125
000058  4348              MULS     r0,r1,r0              ;125
00005a  eb0414c0          ADD      r4,r4,r0,LSL #7       ;125
00005e  4630              MOV      r0,r6                 ;126
000060  f7fffffe          BL       Is_Leap_Year
000064  b118              CBZ      r0,|L7.110|
000066  2d01              CMP      r5,#1                 ;126
000068  d101              BNE      |L7.110|
00006a  4817              LDR      r0,|L7.200|
00006c  4404              ADD      r4,r4,r0              ;126
                  |L7.110|
00006e  1c68              ADDS     r0,r5,#1              ;123
000070  b285              UXTH     r5,r0                 ;123
                  |L7.114|
000072  42bd              CMP      r5,r7                 ;123
000074  dbec              BLT      |L7.80|
000076  f1a80001          SUB      r0,r8,#1              ;128
00007a  f24021a3          MOV      r1,#0x2a3             ;128
00007e  4348              MULS     r0,r1,r0              ;128
000080  eb0414c0          ADD      r4,r4,r0,LSL #7       ;128
000084  ebc91049          RSB      r0,r9,r9,LSL #5       ;129
000088  ebc02009          RSB      r0,r0,r9,LSL #8       ;129
00008c  eb041400          ADD      r4,r4,r0,LSL #4       ;129
000090  ebca100a          RSB      r0,r10,r10,LSL #4     ;130
000094  eb040480          ADD      r4,r4,r0,LSL #2       ;130
000098  445c              ADD      r4,r4,r11             ;131
00009a  2101              MOVS     r1,#1                 ;133
00009c  f04f50c0          MOV      r0,#0x18000000        ;133
0000a0  f7fffffe          BL       RCC_APB1PeriphClockCmd
0000a4  2001              MOVS     r0,#1                 ;134
0000a6  f7fffffe          BL       PWR_BackupAccessCmd
0000aa  4620              MOV      r0,r4                 ;135
0000ac  f7fffffe          BL       RTC_SetCounter
0000b0  f7fffffe          BL       RTC_WaitForLastTask
0000b4  f7fffffe          BL       RTC_Get
0000b8  2000              MOVS     r0,#0                 ;139
0000ba  e7b3              B        |L7.36|
;;;141    //得到当前的时间
                          ENDP

                  |L7.188|
                          DCD      0x01e28500
                  |L7.192|
                          DCD      0x01e13380
                  |L7.196|
                          DCD      mon_table
                  |L7.200|
                          DCD      0x00015180

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  calendar
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  table_week
000000  00030306          DCB      0x00,0x03,0x03,0x06
000004  01040602          DCB      0x01,0x04,0x06,0x02
000008  05000305          DCB      0x05,0x00,0x03,0x05
                  mon_table
00000c  1f1c1f1e          DCB      0x1f,0x1c,0x1f,0x1e
000010  1f1e1f1f          DCB      0x1f,0x1e,0x1f,0x1f
000014  1e1f1e1f          DCB      0x1e,0x1f,0x1e,0x1f

                          AREA ||.data||, DATA, ALIGN=1

                  daycnt
000000  0000              DCW      0x0000
