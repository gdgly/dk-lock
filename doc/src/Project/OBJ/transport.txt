; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\transport.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\transport.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -I..\MQTT -IE:\github\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\transport.crf ..\MQTT\transport.c]
                          THUMB

                          AREA ||i.mqtt_connect||, CODE, READONLY, ALIGN=2

                  mqtt_connect PROC
;;;216    
;;;217    int mqtt_connect(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;218    {
000004  b0ca              SUB      sp,sp,#0x128
;;;219    	u8 ret = 0;
000006  2400              MOVS     r4,#0
;;;220    	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
000008  2258              MOVS     r2,#0x58
00000a  4925              LDR      r1,|L1.160|
00000c  a834              ADD      r0,sp,#0xd0
00000e  f7fffffe          BL       __aeabi_memcpy4
;;;221    	int rc = 0;
000012  46a0              MOV      r8,r4
;;;222    	int mysock = 0;
000014  2700              MOVS     r7,#0
;;;223    	unsigned char buf[200];
;;;224    	int buflen = sizeof(buf);
000016  25c8              MOVS     r5,#0xc8
;;;225    	int len = 0;
000018  2600              MOVS     r6,#0
;;;226    	char *host = "m2m.eclipse.org";
00001a  f20f0988          ADR      r9,|L1.164|
;;;227    	int port = 1883;
00001e  f2407a5b          MOV      r10,#0x75b
;;;228    
;;;229    	data.clientID.cstring = "me";
000022  a024              ADR      r0,|L1.180|
000024  9037              STR      r0,[sp,#0xdc]
;;;230    	data.keepAliveInterval = 60;
000026  203c              MOVS     r0,#0x3c
000028  f8ad00e8          STRH     r0,[sp,#0xe8]
;;;231    	data.cleansession = 1;
00002c  2001              MOVS     r0,#1
00002e  f88d00ea          STRB     r0,[sp,#0xea]
;;;232    	data.username.cstring = "testuser";
000032  a021              ADR      r0,|L1.184|
000034  9044              STR      r0,[sp,#0x110]
;;;233    	data.password.cstring = "testpassword";
000036  a023              ADR      r0,|L1.196|
000038  9047              STR      r0,[sp,#0x11c]
;;;234    
;;;235    	len = MQTTSerialize_connect(buf, buflen, &data);
00003a  aa34              ADD      r2,sp,#0xd0
00003c  4629              MOV      r1,r5
00003e  a802              ADD      r0,sp,#8
000040  f7fffffe          BL       MQTTSerialize_connect
000044  4606              MOV      r6,r0
;;;236    		
;;;237    	usart_send(USART1, buf, len);	//¥Ú”°–≈œ¢
000046  b2b2              UXTH     r2,r6
000048  a902              ADD      r1,sp,#8
00004a  4822              LDR      r0,|L1.212|
00004c  f7fffffe          BL       usart_send
;;;238    
;;;239    	while(!ret)
000050  e020              B        |L1.148|
                  |L1.82|
;;;240    	{
;;;241    		rc = transport_sendPacketBuffer(mysock, buf, len);
000052  4632              MOV      r2,r6
000054  a902              ADD      r1,sp,#8
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       transport_sendPacketBuffer
00005c  4680              MOV      r8,r0
;;;242    		
;;;243    		if (MQTTPacket_read(buf, buflen, transport_getdata) == CONNACK)
00005e  4a1e              LDR      r2,|L1.216|
000060  4629              MOV      r1,r5
000062  a802              ADD      r0,sp,#8
000064  f7fffffe          BL       MQTTPacket_read
000068  2802              CMP      r0,#2
00006a  d113              BNE      |L1.148|
;;;244    		{
;;;245    			unsigned char sessionPresent, connack_rc;
;;;246    
;;;247    			if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, buf, buflen) != 1 || connack_rc != 0)
00006c  462b              MOV      r3,r5
00006e  aa02              ADD      r2,sp,#8
000070  4669              MOV      r1,sp
000072  a801              ADD      r0,sp,#4
000074  f7fffffe          BL       MQTTDeserialize_connack
000078  2801              CMP      r0,#1
00007a  d102              BNE      |L1.130|
00007c  f89d0000          LDRB     r0,[sp,#0]
000080  b130              CBZ      r0,|L1.144|
                  |L1.130|
;;;248    			{
;;;249    				USART_OUT(USART1, "Unable to connect, return code %d\n", connack_rc);
000082  f89d2000          LDRB     r2,[sp,#0]
000086  a115              ADR      r1,|L1.220|
000088  4812              LDR      r0,|L1.212|
00008a  f7fffffe          BL       USART_OUT
00008e  e000              B        |L1.146|
                  |L1.144|
;;;250    			}
;;;251    			else
;;;252    			{
;;;253    				ret = 1;
000090  2401              MOVS     r4,#1
                  |L1.146|
;;;254    			}
;;;255    		}
000092  bf00              NOP      
                  |L1.148|
000094  2c00              CMP      r4,#0                 ;239
000096  d0dc              BEQ      |L1.82|
;;;256    	}
;;;257    	
;;;258    	return ret;
000098  4620              MOV      r0,r4
;;;259    }
00009a  b04a              ADD      sp,sp,#0x128
00009c  e8bd87f0          POP      {r4-r10,pc}
;;;260    
                          ENDP

                  |L1.160|
                          DCD      ||.constdata||+0x58
                  |L1.164|
0000a4  6d326d2e          DCB      "m2m.eclipse.org",0
0000a8  65636c69
0000ac  7073652e
0000b0  6f726700
                  |L1.180|
0000b4  6d6500            DCB      "me",0
0000b7  00                DCB      0
                  |L1.184|
0000b8  74657374          DCB      "testuser",0
0000bc  75736572
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L1.196|
0000c4  74657374          DCB      "testpassword",0
0000c8  70617373
0000cc  776f7264
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L1.212|
                          DCD      0x40013800
                  |L1.216|
                          DCD      transport_getdata
                  |L1.220|
0000dc  556e6162          DCB      "Unable to connect, return code %d\n",0
0000e0  6c652074
0000e4  6f20636f
0000e8  6e6e6563
0000ec  742c2072
0000f0  65747572
0000f4  6e20636f
0000f8  64652025
0000fc  640a00  
0000ff  00                DCB      0

                          AREA ||i.mqtt_keep_alive||, CODE, READONLY, ALIGN=2

                  mqtt_keep_alive PROC
;;;317    
;;;318    void mqtt_keep_alive(void)
000000  b530              PUSH     {r4,r5,lr}
;;;319    {
000002  b0b3              SUB      sp,sp,#0xcc
;;;320    	
;;;321    	unsigned char buf[200];
;;;322    	int buflen = sizeof(buf);
000004  24c8              MOVS     r4,#0xc8
;;;323    	int len = 0;
000006  2500              MOVS     r5,#0
;;;324    	
;;;325    //	if(timer_is_timeout_1ms(timer_mqtt_keep_alive, 1000*60) == 0)
;;;326    	{
;;;327    		while(1)
000008  e016              B        |L2.56|
                  |L2.10|
;;;328    		{
;;;329    			if(MQTTPacket_read(buf, buflen, transport_getdata) == PINGRESP)
00000a  4a0d              LDR      r2,|L2.64|
00000c  4621              MOV      r1,r4
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       MQTTPacket_read
000014  280d              CMP      r0,#0xd
000016  d100              BNE      |L2.26|
;;;330    			{
;;;331    				break;
000018  e00f              B        |L2.58|
                  |L2.26|
;;;332    			}
;;;333    			
;;;334    			len = MQTTSerialize_pingreq(buf, buflen);
00001a  4621              MOV      r1,r4
00001c  a801              ADD      r0,sp,#4
00001e  f7fffffe          BL       MQTTSerialize_pingreq
000022  4605              MOV      r5,r0
;;;335    			usart_send(USART1, buf, len);
000024  b2aa              UXTH     r2,r5
000026  a901              ADD      r1,sp,#4
000028  4806              LDR      r0,|L2.68|
00002a  f7fffffe          BL       usart_send
;;;336    			USART_OUT(USART1, "MQTTSerialize_pingreq=%s\r\n", buf);
00002e  aa01              ADD      r2,sp,#4
000030  a105              ADR      r1,|L2.72|
000032  4804              LDR      r0,|L2.68|
000034  f7fffffe          BL       USART_OUT
                  |L2.56|
000038  e7e7              B        |L2.10|
                  |L2.58|
00003a  bf00              NOP                            ;331
;;;337    		}
;;;338    	}
;;;339    }
00003c  b033              ADD      sp,sp,#0xcc
00003e  bd30              POP      {r4,r5,pc}
;;;340    
                          ENDP

                  |L2.64|
                          DCD      transport_getdata
                  |L2.68|
                          DCD      0x40013800
                  |L2.72|
000048  4d515454          DCB      "MQTTSerialize_pingreq=%s\r\n",0
00004c  53657269
000050  616c697a
000054  655f7069
000058  6e677265
00005c  713d2573
000060  0d0a00  
000063  00                DCB      0

                          AREA ||i.mqtt_pub_qos0||, CODE, READONLY, ALIGN=2

                  mqtt_pub_qos0 PROC
;;;346    
;;;347    void mqtt_pub_qos0(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;348    {
000004  b0d3              SUB      sp,sp,#0x14c
;;;349    	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
000006  2258              MOVS     r2,#0x58
000008  492e              LDR      r1,|L3.196|
00000a  a83d              ADD      r0,sp,#0xf4
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;350    	int rc = 0;
000010  2700              MOVS     r7,#0
;;;351    	char buf[200];
;;;352    	int buflen = sizeof(buf);
000012  25c8              MOVS     r5,#0xc8
;;;353    	int mysock = 0;
000014  f04f0800          MOV      r8,#0
;;;354    	MQTTString topicString = MQTTString_initializer;
000018  2000              MOVS     r0,#0
00001a  9008              STR      r0,[sp,#0x20]
00001c  9009              STR      r0,[sp,#0x24]
00001e  900a              STR      r0,[sp,#0x28]
;;;355    	char* payload = "mypayload";
000020  a629              ADR      r6,|L3.200|
;;;356    	int payloadlen = strlen(payload);
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       strlen
000028  4681              MOV      r9,r0
;;;357    	int len = 0;
00002a  2400              MOVS     r4,#0
;;;358    	char *host = "m2m.eclipse.org";
00002c  f20f0aa4          ADR      r10,|L3.212|
;;;359    	int port = 1883;
000030  f2407b5b          MOV      r11,#0x75b
;;;360    
;;;361    //	if (argc > 1)
;;;362    //		host = argv[1];
;;;363    
;;;364    //	if (argc > 2)
;;;365    //		port = atoi(argv[2]);
;;;366    
;;;367    //	mysock = transport_open(host,port);
;;;368    //	if(mysock < 0)
;;;369    //		return mysock;
;;;370    
;;;371    
;;;372    	USART_OUT(USART1, "Sending to hostname %s port %d\n", host, port);
000034  465b              MOV      r3,r11
000036  4652              MOV      r2,r10
000038  a12a              ADR      r1,|L3.228|
00003a  4832              LDR      r0,|L3.260|
00003c  f7fffffe          BL       USART_OUT
;;;373    	
;;;374    	data.clientID.cstring = "me";
000040  a031              ADR      r0,|L3.264|
000042  9040              STR      r0,[sp,#0x100]
;;;375    	data.keepAliveInterval = 20;
000044  2014              MOVS     r0,#0x14
000046  f8ad010c          STRH     r0,[sp,#0x10c]
;;;376    	data.cleansession = 1;
00004a  2001              MOVS     r0,#1
00004c  f88d010e          STRB     r0,[sp,#0x10e]
;;;377    	data.username.cstring = "testuser";
000050  a02e              ADR      r0,|L3.268|
000052  904d              STR      r0,[sp,#0x134]
;;;378    	data.password.cstring = "testpassword";
000054  a030              ADR      r0,|L3.280|
000056  9050              STR      r0,[sp,#0x140]
;;;379    	data.MQTTVersion = 4;
000058  2004              MOVS     r0,#4
00005a  f88d00fc          STRB     r0,[sp,#0xfc]
;;;380    
;;;381    	len = MQTTSerialize_connect((unsigned char *)buf, buflen, &data);
00005e  aa3d              ADD      r2,sp,#0xf4
000060  4629              MOV      r1,r5
000062  a80b              ADD      r0,sp,#0x2c
000064  f7fffffe          BL       MQTTSerialize_connect
000068  4604              MOV      r4,r0
;;;382    
;;;383    	topicString.cstring = "mytopic";
00006a  a02f              ADR      r0,|L3.296|
00006c  9008              STR      r0,[sp,#0x20]
;;;384    	len += MQTTSerialize_publish((unsigned char *)(buf + len), buflen - len, 0, 0, 0, 0, topicString, (unsigned char *)payload, payloadlen);
00006e  e9cd6905          STRD     r6,r9,[sp,#0x14]
000072  a808              ADD      r0,sp,#0x20
000074  c807              LDM      r0,{r0-r2}
000076  ab02              ADD      r3,sp,#8
000078  c307              STM      r3!,{r0-r2}
00007a  2000              MOVS     r0,#0
00007c  9000              STR      r0,[sp,#0]
00007e  1b29              SUBS     r1,r5,r4
000080  aa0b              ADD      r2,sp,#0x2c
000082  9001              STR      r0,[sp,#4]
000084  1910              ADDS     r0,r2,r4
000086  2300              MOVS     r3,#0
000088  461a              MOV      r2,r3
00008a  f7fffffe          BL       MQTTSerialize_publish
00008e  4404              ADD      r4,r4,r0
;;;385    
;;;386    	len += MQTTSerialize_disconnect((unsigned char *)(buf + len), buflen - len);
000090  1b29              SUBS     r1,r5,r4
000092  aa0b              ADD      r2,sp,#0x2c
000094  1910              ADDS     r0,r2,r4
000096  f7fffffe          BL       MQTTSerialize_disconnect
00009a  4404              ADD      r4,r4,r0
;;;387    
;;;388    	rc = transport_sendPacketBuffer(mysock, (unsigned char*)buf, len);
00009c  4622              MOV      r2,r4
00009e  a90b              ADD      r1,sp,#0x2c
0000a0  4640              MOV      r0,r8
0000a2  f7fffffe          BL       transport_sendPacketBuffer
0000a6  4607              MOV      r7,r0
;;;389    	if (rc == len)
0000a8  42a7              CMP      r7,r4
0000aa  d104              BNE      |L3.182|
;;;390    		USART_OUT(USART1, "Successfully published\n");
0000ac  a120              ADR      r1,|L3.304|
0000ae  4815              LDR      r0,|L3.260|
0000b0  f7fffffe          BL       USART_OUT
0000b4  e003              B        |L3.190|
                  |L3.182|
;;;391    	else
;;;392    		USART_OUT(USART1, "Publish failed\n");
0000b6  a124              ADR      r1,|L3.328|
0000b8  4812              LDR      r0,|L3.260|
0000ba  f7fffffe          BL       USART_OUT
                  |L3.190|
;;;393    
;;;394    }
0000be  b053              ADD      sp,sp,#0x14c
0000c0  e8bd8ff0          POP      {r4-r11,pc}
;;;395    
                          ENDP

                  |L3.196|
                          DCD      ||.constdata||+0xb0
                  |L3.200|
0000c8  6d797061          DCB      "mypayload",0
0000cc  796c6f61
0000d0  6400    
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L3.212|
0000d4  6d326d2e          DCB      "m2m.eclipse.org",0
0000d8  65636c69
0000dc  7073652e
0000e0  6f726700
                  |L3.228|
0000e4  53656e64          DCB      "Sending to hostname %s port %d\n",0
0000e8  696e6720
0000ec  746f2068
0000f0  6f73746e
0000f4  616d6520
0000f8  25732070
0000fc  6f727420
000100  25640a00
                  |L3.260|
                          DCD      0x40013800
                  |L3.264|
000108  6d6500            DCB      "me",0
00010b  00                DCB      0
                  |L3.268|
00010c  74657374          DCB      "testuser",0
000110  75736572
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
                  |L3.280|
000118  74657374          DCB      "testpassword",0
00011c  70617373
000120  776f7264
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L3.296|
000128  6d79746f          DCB      "mytopic",0
00012c  70696300
                  |L3.304|
000130  53756363          DCB      "Successfully published\n",0
000134  65737366
000138  756c6c79
00013c  20707562
000140  6c697368
000144  65640a00
                  |L3.328|
000148  5075626c          DCB      "Publish failed\n",0
00014c  69736820
000150  6661696c
000154  65640a00

                          AREA ||i.mqtt_publist||, CODE, READONLY, ALIGN=2

                  mqtt_publist PROC
;;;263    
;;;264    int mqtt_publist(unsigned char* topic, unsigned char* payload, int payloadlen, int qos, unsigned short packetid)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;265    {
000004  b0bf              SUB      sp,sp,#0xfc
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  9f48              LDR      r7,[sp,#0x120]
;;;266    	u8 ret = 0;
00000e  f04f0800          MOV      r8,#0
;;;267    	int rc = 0;
000012  2000              MOVS     r0,#0
000014  903e              STR      r0,[sp,#0xf8]
;;;268    	int len = 0;
000016  4681              MOV      r9,r0
;;;269    	char buf[200];
;;;270    	int buflen = sizeof(buf);
000018  f04f0ac8          MOV      r10,#0xc8
;;;271    	int mysock = 0;
00001c  4683              MOV      r11,r0
;;;272    	MQTTString topicString = MQTTString_initializer;
00001e  9009              STR      r0,[sp,#0x24]
000020  900a              STR      r0,[sp,#0x28]
000022  900b              STR      r0,[sp,#0x2c]
;;;273    	u8 publist_status = PUBLISH;
000024  2003              MOVS     r0,#3
000026  9008              STR      r0,[sp,#0x20]
;;;274    	
;;;275    	while(!ret)
000028  e047              B        |L4.186|
                  |L4.42|
;;;276    	{
;;;277    		switch(publist_status)
00002a  9808              LDR      r0,[sp,#0x20]
00002c  2803              CMP      r0,#3
00002e  d006              BEQ      |L4.62|
000030  2805              CMP      r0,#5
000032  d01d              BEQ      |L4.112|
000034  2806              CMP      r0,#6
000036  d025              BEQ      |L4.132|
000038  2807              CMP      r0,#7
00003a  d13d              BNE      |L4.184|
00003c  e032              B        |L4.164|
                  |L4.62|
;;;278    		{
;;;279    			case PUBLISH:
;;;280    				len = MQTTSerialize_publish((unsigned char *)buf , buflen, qos, 0, 0, packetid, topicString, (unsigned char *)payload, payloadlen);
00003e  e9cd4505          STRD     r4,r5,[sp,#0x14]
000042  a809              ADD      r0,sp,#0x24
000044  c807              LDM      r0,{r0-r2}
000046  ab02              ADD      r3,sp,#8
000048  c307              STM      r3!,{r0-r2}
00004a  2000              MOVS     r0,#0
00004c  b2f2              UXTB     r2,r6
00004e  4603              MOV      r3,r0
000050  4651              MOV      r1,r10
000052  e9cd0700          STRD     r0,r7,[sp,#0]
000056  a80c              ADD      r0,sp,#0x30
000058  f7fffffe          BL       MQTTSerialize_publish
00005c  4681              MOV      r9,r0
;;;281    				rc = transport_sendPacketBuffer(mysock, buf, len);
00005e  464a              MOV      r2,r9
000060  a90c              ADD      r1,sp,#0x30
000062  4658              MOV      r0,r11
000064  f7fffffe          BL       transport_sendPacketBuffer
000068  903e              STR      r0,[sp,#0xf8]
;;;282    				publist_status = PUBREC;
00006a  2005              MOVS     r0,#5
00006c  9008              STR      r0,[sp,#0x20]
;;;283    				
;;;284    			break;
00006e  e023              B        |L4.184|
                  |L4.112|
;;;285    				
;;;286    			case PUBREC:
;;;287    				if (MQTTPacket_read(buf, buflen, transport_getdata) == PUBREC)
000070  4a15              LDR      r2,|L4.200|
000072  4651              MOV      r1,r10
000074  a80c              ADD      r0,sp,#0x30
000076  f7fffffe          BL       MQTTPacket_read
00007a  2805              CMP      r0,#5
00007c  d101              BNE      |L4.130|
;;;288    				{
;;;289    					publist_status = PUBREL;
00007e  2006              MOVS     r0,#6
000080  9008              STR      r0,[sp,#0x20]
                  |L4.130|
;;;290    				}	
;;;291    			break;
000082  e019              B        |L4.184|
                  |L4.132|
;;;292    				
;;;293    			case PUBREL:
;;;294    				len = MQTTSerialize_pubrel(buf, buflen, 0, packetid);
000084  463b              MOV      r3,r7
000086  2200              MOVS     r2,#0
000088  4651              MOV      r1,r10
00008a  a80c              ADD      r0,sp,#0x30
00008c  f7fffffe          BL       MQTTSerialize_pubrel
000090  4681              MOV      r9,r0
;;;295    				rc = transport_sendPacketBuffer(mysock, buf, len);
000092  464a              MOV      r2,r9
000094  a90c              ADD      r1,sp,#0x30
000096  4658              MOV      r0,r11
000098  f7fffffe          BL       transport_sendPacketBuffer
00009c  903e              STR      r0,[sp,#0xf8]
;;;296    				publist_status = PUBCOMP;
00009e  2007              MOVS     r0,#7
0000a0  9008              STR      r0,[sp,#0x20]
;;;297    			break;
0000a2  e009              B        |L4.184|
                  |L4.164|
;;;298    
;;;299    			case PUBCOMP:
;;;300    				if (MQTTPacket_read(buf, buflen, transport_getdata) == PUBREC)
0000a4  4a08              LDR      r2,|L4.200|
0000a6  4651              MOV      r1,r10
0000a8  a80c              ADD      r0,sp,#0x30
0000aa  f7fffffe          BL       MQTTPacket_read
0000ae  2805              CMP      r0,#5
0000b0  d101              BNE      |L4.182|
;;;301    				{
;;;302    					ret = 1;
0000b2  f04f0801          MOV      r8,#1
                  |L4.182|
;;;303    				}	
;;;304    			break;
0000b6  bf00              NOP      
                  |L4.184|
0000b8  bf00              NOP                            ;284
                  |L4.186|
0000ba  f1b80f00          CMP      r8,#0                 ;275
0000be  d0b4              BEQ      |L4.42|
;;;305    		}	
;;;306    	}
;;;307    	
;;;308    	return ret;
0000c0  4640              MOV      r0,r8
;;;309    }
0000c2  b03f              ADD      sp,sp,#0xfc
0000c4  e8bd8ff0          POP      {r4-r11,pc}
;;;310    
                          ENDP

                  |L4.200|
                          DCD      transport_getdata

                          AREA ||i.mqtt_qos0||, CODE, READONLY, ALIGN=2

                  mqtt_qos0 PROC
;;;114    
;;;115    void mqtt_qos0(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;116    {
000004  b0dd              SUB      sp,sp,#0x174
;;;117    	
;;;118    	
;;;119    	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
000006  2258              MOVS     r2,#0x58
000008  4967              LDR      r1,|L5.424|
00000a  a847              ADD      r0,sp,#0x11c
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;120    	int rc = 0;
000010  f04f0a00          MOV      r10,#0
;;;121    	int mysock = 0;
000014  2700              MOVS     r7,#0
;;;122    	unsigned char buf[200];
;;;123    	int buflen = sizeof(buf);
000016  24c8              MOVS     r4,#0xc8
;;;124    	int msgid = 1;
000018  f04f0801          MOV      r8,#1
;;;125    	MQTTString topicString = MQTTString_initializer;
00001c  2000              MOVS     r0,#0
00001e  9012              STR      r0,[sp,#0x48]
000020  9013              STR      r0,[sp,#0x4c]
000022  9014              STR      r0,[sp,#0x50]
;;;126    	int req_qos = 0;
000024  9011              STR      r0,[sp,#0x44]
;;;127    	char* payload = "mypayload";
000026  a561              ADR      r5,|L5.428|
;;;128    	int payloadlen = strlen(payload);
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       strlen
00002e  4681              MOV      r9,r0
;;;129    	int len = 0;
000030  2600              MOVS     r6,#0
;;;130    	char *host = "m2m.eclipse.org";
000032  a061              ADR      r0,|L5.440|
000034  9010              STR      r0,[sp,#0x40]
;;;131    	int port = 1883;
000036  f240705b          MOV      r0,#0x75b
00003a  900f              STR      r0,[sp,#0x3c]
;;;132    
;;;133    
;;;134    	data.clientID.cstring = "me";
00003c  a062              ADR      r0,|L5.456|
00003e  904a              STR      r0,[sp,#0x128]
;;;135    	data.keepAliveInterval = 60;
000040  203c              MOVS     r0,#0x3c
000042  f8ad0134          STRH     r0,[sp,#0x134]
;;;136    	data.cleansession = 1;
000046  2001              MOVS     r0,#1
000048  f88d0136          STRB     r0,[sp,#0x136]
;;;137    	data.username.cstring = "testuser";
00004c  a05f              ADR      r0,|L5.460|
00004e  9057              STR      r0,[sp,#0x15c]
;;;138    	data.password.cstring = "testpassword";
000050  a061              ADR      r0,|L5.472|
000052  905a              STR      r0,[sp,#0x168]
;;;139    
;;;140    	len = MQTTSerialize_connect(buf, buflen, &data);
000054  aa47              ADD      r2,sp,#0x11c
000056  4621              MOV      r1,r4
000058  a815              ADD      r0,sp,#0x54
00005a  f7fffffe          BL       MQTTSerialize_connect
00005e  4606              MOV      r6,r0
;;;141    		
;;;142    	usart_send(USART1, buf, len);
000060  b2b2              UXTH     r2,r6
000062  a915              ADD      r1,sp,#0x54
000064  4860              LDR      r0,|L5.488|
000066  f7fffffe          BL       usart_send
;;;143    	
;;;144    	rc = transport_sendPacketBuffer(mysock, buf, len);
00006a  4632              MOV      r2,r6
00006c  a915              ADD      r1,sp,#0x54
00006e  4638              MOV      r0,r7
000070  f7fffffe          BL       transport_sendPacketBuffer
000074  4682              MOV      r10,r0
;;;145    
;;;146    	/* wait for connack */
;;;147    	if (MQTTPacket_read(buf, buflen, transport_getdata) == CONNACK)
000076  4a5d              LDR      r2,|L5.492|
000078  4621              MOV      r1,r4
00007a  a815              ADD      r0,sp,#0x54
00007c  f7fffffe          BL       MQTTPacket_read
000080  2802              CMP      r0,#2
000082  d111              BNE      |L5.168|
;;;148    	{
;;;149    		unsigned char sessionPresent, connack_rc;
;;;150    
;;;151    		if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, buf, buflen) != 1 || connack_rc != 0)
000084  4623              MOV      r3,r4
000086  aa15              ADD      r2,sp,#0x54
000088  a90d              ADD      r1,sp,#0x34
00008a  a80e              ADD      r0,sp,#0x38
00008c  f7fffffe          BL       MQTTDeserialize_connack
000090  2801              CMP      r0,#1
000092  d102              BNE      |L5.154|
000094  f89d0034          LDRB     r0,[sp,#0x34]
000098  b128              CBZ      r0,|L5.166|
                  |L5.154|
;;;152    		{
;;;153    			USART_OUT(USART1, "Unable to connect, return code %d\n", connack_rc);
00009a  f89d2034          LDRB     r2,[sp,#0x34]
00009e  a154              ADR      r1,|L5.496|
0000a0  4851              LDR      r0,|L5.488|
0000a2  f7fffffe          BL       USART_OUT
                  |L5.166|
;;;154    		}
;;;155    	}
0000a6  bf00              NOP      
                  |L5.168|
;;;156    	
;;;157    		
;;;158    
;;;159    	/* subscribe */
;;;160    	topicString.cstring = "substopic";
0000a8  a05a              ADR      r0,|L5.532|
0000aa  9012              STR      r0,[sp,#0x48]
;;;161    	len = MQTTSerialize_subscribe(buf, buflen, 0, msgid, 1, &topicString, &req_qos);
0000ac  a811              ADD      r0,sp,#0x44
0000ae  a912              ADD      r1,sp,#0x48
0000b0  2201              MOVS     r2,#1
0000b2  fa1ff388          UXTH     r3,r8
0000b6  e9cd2100          STRD     r2,r1,[sp,#0]
0000ba  9002              STR      r0,[sp,#8]
0000bc  2200              MOVS     r2,#0
0000be  4621              MOV      r1,r4
0000c0  a815              ADD      r0,sp,#0x54
0000c2  f7fffffe          BL       MQTTSerialize_subscribe
0000c6  4606              MOV      r6,r0
;;;162    
;;;163    	rc = transport_sendPacketBuffer(mysock, buf, len);
0000c8  4632              MOV      r2,r6
0000ca  a915              ADD      r1,sp,#0x54
0000cc  4638              MOV      r0,r7
0000ce  f7fffffe          BL       transport_sendPacketBuffer
0000d2  4682              MOV      r10,r0
;;;164    	if (MQTTPacket_read(buf, buflen, transport_getdata) == SUBACK) 	/* wait for suback */
0000d4  4a45              LDR      r2,|L5.492|
0000d6  4621              MOV      r1,r4
0000d8  a815              ADD      r0,sp,#0x54
0000da  f7fffffe          BL       MQTTPacket_read
0000de  2809              CMP      r0,#9
0000e0  d111              BNE      |L5.262|
;;;165    	{
;;;166    		unsigned short submsgid;
;;;167    		int subcount;
;;;168    		int granted_qos;
;;;169    
;;;170    		rc = MQTTDeserialize_suback(&submsgid, 1, &subcount, &granted_qos, buf, buflen);
0000e2  a815              ADD      r0,sp,#0x54
0000e4  ab0c              ADD      r3,sp,#0x30
0000e6  aa0d              ADD      r2,sp,#0x34
0000e8  2101              MOVS     r1,#1
0000ea  e9cd0400          STRD     r0,r4,[sp,#0]
0000ee  a80e              ADD      r0,sp,#0x38
0000f0  f7fffffe          BL       MQTTDeserialize_suback
0000f4  4682              MOV      r10,r0
;;;171    		if (granted_qos != 0)
0000f6  980c              LDR      r0,[sp,#0x30]
0000f8  b120              CBZ      r0,|L5.260|
;;;172    		{
;;;173    			USART_OUT(USART1, "granted qos != 0, %d\n", granted_qos);
0000fa  a149              ADR      r1,|L5.544|
0000fc  483a              LDR      r0,|L5.488|
0000fe  9a0c              LDR      r2,[sp,#0x30]
000100  f7fffffe          BL       USART_OUT
                  |L5.260|
;;;174    		}
;;;175    	}
000104  bf00              NOP      
                  |L5.262|
;;;176    	
;;;177    
;;;178    	/* loop getting msgs on subscribed topic */
;;;179    	topicString.cstring = "pubtopic";
000106  a04c              ADR      r0,|L5.568|
000108  9012              STR      r0,[sp,#0x48]
;;;180    	while (!toStop)
00010a  e037              B        |L5.380|
                  |L5.268|
;;;181    	{
;;;182    		/* transport_getdata() has a built-in 1 second timeout,
;;;183    		your mileage will vary */
;;;184    		if (MQTTPacket_read(buf, buflen, transport_getdata) == PUBLISH)
00010c  4a37              LDR      r2,|L5.492|
00010e  4621              MOV      r1,r4
000110  a815              ADD      r0,sp,#0x54
000112  f7fffffe          BL       MQTTPacket_read
000116  2803              CMP      r0,#3
000118  d116              BNE      |L5.328|
;;;185    		{
;;;186    			unsigned char dup;
;;;187    			int qos;
;;;188    			unsigned char retained;
;;;189    			unsigned short msgid;
;;;190    			int payloadlen_in;
;;;191    			unsigned char* payload_in;
;;;192    			int rc;
;;;193    			MQTTString receivedTopic;
;;;194    
;;;195    			rc = MQTTDeserialize_publish(&dup, &qos, &retained, &msgid, &receivedTopic,
00011a  a815              ADD      r0,sp,#0x54
00011c  a90a              ADD      r1,sp,#0x28
00011e  aa09              ADD      r2,sp,#0x24
000120  e9cd0403          STRD     r0,r4,[sp,#0xc]
000124  e9cd2101          STRD     r2,r1,[sp,#4]
000128  a806              ADD      r0,sp,#0x18
00012a  ab0b              ADD      r3,sp,#0x2c
00012c  aa0c              ADD      r2,sp,#0x30
00012e  a90d              ADD      r1,sp,#0x34
000130  9000              STR      r0,[sp,#0]
000132  a80e              ADD      r0,sp,#0x38
000134  f7fffffe          BL       MQTTDeserialize_publish
000138  4683              MOV      r11,r0
;;;196    					&payload_in, &payloadlen_in, buf, buflen);
;;;197    
;;;198    			USART_OUT(USART1, "message arrived %.*s\n", payloadlen_in, payload_in);
00013a  a142              ADR      r1,|L5.580|
00013c  482a              LDR      r0,|L5.488|
00013e  e9dd3209          LDRD     r3,r2,[sp,#0x24]
000142  f7fffffe          BL       USART_OUT
;;;199    		}
000146  bf00              NOP      
                  |L5.328|
;;;200    
;;;201    
;;;202    		USART_OUT(USART1, "publishing reading\n");
000148  a144              ADR      r1,|L5.604|
00014a  4827              LDR      r0,|L5.488|
00014c  f7fffffe          BL       USART_OUT
;;;203    		len = MQTTSerialize_publish(buf, buflen, 0, 0, 0, 0, topicString, (unsigned char*)payload, payloadlen);
000150  e9cd5905          STRD     r5,r9,[sp,#0x14]
000154  a812              ADD      r0,sp,#0x48
000156  c807              LDM      r0,{r0-r2}
000158  ab02              ADD      r3,sp,#8
00015a  c307              STM      r3!,{r0-r2}
00015c  2000              MOVS     r0,#0
00015e  9000              STR      r0,[sp,#0]
000160  4603              MOV      r3,r0
000162  4602              MOV      r2,r0
000164  4621              MOV      r1,r4
000166  9001              STR      r0,[sp,#4]
000168  a815              ADD      r0,sp,#0x54
00016a  f7fffffe          BL       MQTTSerialize_publish
00016e  4606              MOV      r6,r0
;;;204    		rc = transport_sendPacketBuffer(mysock, buf, len);
000170  4632              MOV      r2,r6
000172  a915              ADD      r1,sp,#0x54
000174  4638              MOV      r0,r7
000176  f7fffffe          BL       transport_sendPacketBuffer
00017a  4682              MOV      r10,r0
                  |L5.380|
00017c  483c              LDR      r0,|L5.624|
00017e  6800              LDR      r0,[r0,#0]            ;180  ; toStop
000180  2800              CMP      r0,#0                 ;180
000182  d0c3              BEQ      |L5.268|
;;;205    	}
;;;206    
;;;207    	USART_OUT(USART1, "disconnecting\n");
000184  a13b              ADR      r1,|L5.628|
000186  4818              LDR      r0,|L5.488|
000188  f7fffffe          BL       USART_OUT
;;;208    	len = MQTTSerialize_disconnect(buf, buflen);
00018c  4621              MOV      r1,r4
00018e  a815              ADD      r0,sp,#0x54
000190  f7fffffe          BL       MQTTSerialize_disconnect
000194  4606              MOV      r6,r0
;;;209    	rc = transport_sendPacketBuffer(mysock, buf, len);
000196  4632              MOV      r2,r6
000198  a915              ADD      r1,sp,#0x54
00019a  4638              MOV      r0,r7
00019c  f7fffffe          BL       transport_sendPacketBuffer
0001a0  4682              MOV      r10,r0
;;;210    }
0001a2  b05d              ADD      sp,sp,#0x174
0001a4  e8bd8ff0          POP      {r4-r11,pc}
;;;211    
                          ENDP

                  |L5.424|
                          DCD      ||.constdata||
                  |L5.428|
0001ac  6d797061          DCB      "mypayload",0
0001b0  796c6f61
0001b4  6400    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L5.440|
0001b8  6d326d2e          DCB      "m2m.eclipse.org",0
0001bc  65636c69
0001c0  7073652e
0001c4  6f726700
                  |L5.456|
0001c8  6d6500            DCB      "me",0
0001cb  00                DCB      0
                  |L5.460|
0001cc  74657374          DCB      "testuser",0
0001d0  75736572
0001d4  00      
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L5.472|
0001d8  74657374          DCB      "testpassword",0
0001dc  70617373
0001e0  776f7264
0001e4  00      
0001e5  00                DCB      0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L5.488|
                          DCD      0x40013800
                  |L5.492|
                          DCD      transport_getdata
                  |L5.496|
0001f0  556e6162          DCB      "Unable to connect, return code %d\n",0
0001f4  6c652074
0001f8  6f20636f
0001fc  6e6e6563
000200  742c2072
000204  65747572
000208  6e20636f
00020c  64652025
000210  640a00  
000213  00                DCB      0
                  |L5.532|
000214  73756273          DCB      "substopic",0
000218  746f7069
00021c  6300    
00021e  00                DCB      0
00021f  00                DCB      0
                  |L5.544|
000220  6772616e          DCB      "granted qos != 0, %d\n",0
000224  74656420
000228  716f7320
00022c  213d2030
000230  2c202564
000234  0a00    
000236  00                DCB      0
000237  00                DCB      0
                  |L5.568|
000238  70756274          DCB      "pubtopic",0
00023c  6f706963
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0
                  |L5.580|
000244  6d657373          DCB      "message arrived %.*s\n",0
000248  61676520
00024c  61727269
000250  76656420
000254  252e2a73
000258  0a00    
00025a  00                DCB      0
00025b  00                DCB      0
                  |L5.604|
00025c  7075626c          DCB      "publishing reading\n",0
000260  69736869
000264  6e672072
000268  65616469
00026c  6e670a00
                  |L5.624|
                          DCD      toStop
                  |L5.628|
000274  64697363          DCB      "disconnecting\n",0
000278  6f6e6e65
00027c  6374696e
000280  670a00  
000283  00                DCB      0

                          AREA ||i.transport_getdata||, CODE, READONLY, ALIGN=2

                  transport_getdata PROC
;;;75     
;;;76     int transport_getdata(unsigned char* buf, int count)
000000  b570              PUSH     {r4-r6,lr}
;;;77     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;78     	int rc;
;;;79     		
;;;80     	if(timer_is_timeout_1ms(timer_uart1, 20) == 0)	//40ms√ªΩ” ’µΩ ˝æ›»œŒ™Ω” ’ ˝æ›ÕÍ≥…		
000006  2114              MOVS     r1,#0x14
000008  200b              MOVS     r0,#0xb
00000a  f7fffffe          BL       timer_is_timeout_1ms
00000e  b9a8              CBNZ     r0,|L6.60|
;;;81     	{	
;;;82     		memcpy(buf, usart1_rx_buff->pdata, 512);
000010  f44f7200          MOV      r2,#0x200
000014  480a              LDR      r0,|L6.64|
000016  6801              LDR      r1,[r0,#0]  ; usart1_rx_buff
000018  1c89              ADDS     r1,r1,#2
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       __aeabi_memcpy
;;;83     		
;;;84     		USART_OUT(USART1, buf);
000020  4629              MOV      r1,r5
000022  4808              LDR      r0,|L6.68|
000024  f7fffffe          BL       USART_OUT
;;;85     //		USART_OUT(USART1, "count=%d\r\n", usart1_rx_buff->index);
;;;86     		count = gprs_buff->index;
000028  4807              LDR      r0,|L6.72|
00002a  6800              LDR      r0,[r0,#0]  ; gprs_buff
00002c  8806              LDRH     r6,[r0,#0]
;;;87     		rc = count;
00002e  4634              MOV      r4,r6
;;;88     		memset(usart1_rx_buff, 0, sizeof(usart_buff_t));
000030  f2402102          MOV      r1,#0x202
000034  4802              LDR      r0,|L6.64|
000036  6800              LDR      r0,[r0,#0]  ; usart1_rx_buff
000038  f7fffffe          BL       __aeabi_memclr
                  |L6.60|
;;;89     	}
;;;90     
;;;91     	return rc;
00003c  4620              MOV      r0,r4
;;;92     }
00003e  bd70              POP      {r4-r6,pc}
;;;93     
                          ENDP

                  |L6.64|
                          DCD      usart1_rx_buff
                  |L6.68|
                          DCD      0x40013800
                  |L6.72|
                          DCD      gprs_buff

                          AREA ||i.transport_getdatanb||, CODE, READONLY, ALIGN=1

                  transport_getdatanb PROC
;;;93     
;;;94     int transport_getdatanb(void *sck, unsigned char* buf, int count)
000000  b530              PUSH     {r4,r5,lr}
;;;95     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;96     	int sock = *((int *)sck); 	/* sck: pointer to whatever the system may use to identify the transport */
000008  681a              LDR      r2,[r3,#0]
;;;97     	/* this call will return after the timeout set on initialization if no bytes;
;;;98     	   in your system you will use whatever you use to get whichever outstanding
;;;99     	   bytes your socket equivalent has ready to be extracted right now, if any,
;;;100    	   or return immediately */
;;;101    	int rc;
;;;102    	
;;;103    //	rc = recv(sock, buf, count, 0);	
;;;104    	if (rc == -1) {
00000a  1c48              ADDS     r0,r1,#1
00000c  b908              CBNZ     r0,|L7.18|
;;;105    		/* check error conditions from your system here, and return -1 */
;;;106    		return 0;
00000e  2000              MOVS     r0,#0
                  |L7.16|
;;;107    	}
;;;108    	return rc;
;;;109    }
000010  bd30              POP      {r4,r5,pc}
                  |L7.18|
000012  4608              MOV      r0,r1                 ;108
000014  e7fc              B        |L7.16|
;;;110    
                          ENDP


                          AREA ||i.transport_sendPacketBuffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  transport_sendPacketBuffer PROC
;;;48     
;;;49     int transport_sendPacketBuffer(int sock, unsigned char* buf, int buflen)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;50     {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;51     	int rc = 0;
00000a  2600              MOVS     r6,#0
;;;52     	u8 *ret;	
;;;53     	u8 end_char[1];
;;;54     	
;;;55     	
;;;56     	end_char[0] = 0x1A;//Ω· ¯◊÷∑˚
00000c  201a              MOVS     r0,#0x1a
00000e  9000              STR      r0,[sp,#0]
;;;57     
;;;58     	
;;;59     	
;;;60     	usart_send(USART1, buf, buflen);
000010  b2a2              UXTH     r2,r4
000012  4629              MOV      r1,r5
000014  480a              LDR      r0,|L8.64|
000016  f7fffffe          BL       usart_send
;;;61     	
;;;62     	ret = gprs_send_at("AT+CIPSEND\r\n", ">", 100, 1000);
00001a  f44f737a          MOV      r3,#0x3e8
00001e  2264              MOVS     r2,#0x64
000020  a108              ADR      r1,|L8.68|
000022  a009              ADR      r0,|L8.72|
000024  f7fffffe          BL       gprs_send_at
000028  4607              MOV      r7,r0
;;;63     	if(ret != NULL)
00002a  b127              CBZ      r7,|L8.54|
;;;64     	{
;;;65     		sprintf((char *)send_buff,"aaaaaa%s\r\n", end_char);
00002c  466a              MOV      r2,sp
00002e  a10a              ADR      r1,|L8.88|
000030  480c              LDR      r0,|L8.100|
000032  f7fffffe          BL       __2sprintf
                  |L8.54|
;;;66     
;;;67     //		gprs_send_at(send_buff, 0, 1000, 1000);
;;;68     		
;;;69     	}
;;;70     	
;;;71     	rc = buflen;
000036  4626              MOV      r6,r4
;;;72     	return rc;
000038  4630              MOV      r0,r6
;;;73     }
00003a  e8bd83f8          POP      {r3-r9,pc}
;;;74     
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      0x40013800
                  |L8.68|
000044  3e00              DCB      ">",0
000046  00                DCB      0
000047  00                DCB      0
                  |L8.72|
000048  41542b43          DCB      "AT+CIPSEND\r\n",0
00004c  49505345
000050  4e440d0a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L8.88|
000058  61616161          DCB      "aaaaaa%s\r\n",0
00005c  61612573
000060  0d0a00  
000063  00                DCB      0
                  |L8.100|
                          DCD      send_buff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4d515443          DCB      0x4d,0x51,0x54,0x43
                          DCD      0x00000000
000008  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000018  003c              DCW      0x003c
00001a  0100              DCB      0x01,0x00
00001c  4d515457          DCB      0x4d,0x51,0x54,0x57
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000058  4d515443          DCB      0x4d,0x51,0x54,0x43
                          DCD      0x00000000
000060  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000070  003c              DCW      0x003c
000072  0100              DCB      0x01,0x00
000074  4d515457          DCB      0x4d,0x51,0x54,0x57
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000094  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0000b0  4d515443          DCB      0x4d,0x51,0x54,0x43
                          DCD      0x00000000
0000b8  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0000c8  003c              DCW      0x003c
0000ca  0100              DCB      0x01,0x00
0000cc  4d515457          DCB      0x4d,0x51,0x54,0x57
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  packet_id
                          DCD      0x00000000
                  toStop
                          DCD      0x00000000
