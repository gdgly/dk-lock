; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\FLib\inc -I..\CORE -I..\driver -I..\BSP -I..\SYS -I..\tplib -IE:\github\dk-lock\src\Proj\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=..\obj\main.crf ..\USER\main.c]
                          THUMB

                          AREA ||i.Gps_Msg_Show||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_c
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  Gps_Msg_Show PROC
;;;104    
;;;105    void Gps_Msg_Show(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;106    {
;;;107     	float tp;		   
;;;108     
;;;109    	tp=gpsx.longitude;	   
000002  492b              LDR      r1,|L1.176|
000004  f8d10086          LDR      r0,[r1,#0x86]  ; gpsx
000008  f7fffffe          BL       __aeabi_ui2f
00000c  4607              MOV      r7,r0
;;;110    	sprintf((char *)longitudedtbuf,"%clongitude%c:%.5f %1c",'"','"',tp/=100000,gpsx.ewhemi);	
00000e  4929              LDR      r1,|L1.180|
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       __aeabi_fdiv
000016  4607              MOV      r7,r0
000018  4604              MOV      r4,r0
00001a  f7fffffe          BL       __aeabi_f2d
00001e  4605              MOV      r5,r0
000020  4823              LDR      r0,|L1.176|
000022  f890008a          LDRB     r0,[r0,#0x8a]  ; gpsx
000026  2322              MOVS     r3,#0x22
000028  461a              MOV      r2,r3
00002a  e9cd5100          STRD     r5,r1,[sp,#0]
00002e  9002              STR      r0,[sp,#8]
000030  a121              ADR      r1,|L1.184|
000032  4827              LDR      r0,|L1.208|
000034  f7fffffe          BL       __2sprintf
;;;111    	//USART_OUT("%s\r\n",dtbuf);	 	
;;;112    	USART_OUT(USART1,"%s\r\n",longitudedtbuf);	
000038  4a25              LDR      r2,|L1.208|
00003a  a126              ADR      r1,|L1.212|
00003c  4827              LDR      r0,|L1.220|
00003e  f7fffffe          BL       USART_OUT
;;;113    	tp=gpsx.latitude;	   
000042  491b              LDR      r1,|L1.176|
000044  f8d10081          LDR      r0,[r1,#0x81]  ; gpsx
000048  f7fffffe          BL       __aeabi_ui2f
00004c  4607              MOV      r7,r0
;;;114    	sprintf((char *)latitudedtbuf,"%clatitude%c:%.5f %1c",'"','"',tp/=100000,gpsx.nshemi);	
00004e  4919              LDR      r1,|L1.180|
000050  4638              MOV      r0,r7
000052  f7fffffe          BL       __aeabi_fdiv
000056  4607              MOV      r7,r0
000058  4604              MOV      r4,r0
00005a  f7fffffe          BL       __aeabi_f2d
00005e  4605              MOV      r5,r0
000060  4813              LDR      r0,|L1.176|
000062  f8900085          LDRB     r0,[r0,#0x85]  ; gpsx
000066  2322              MOVS     r3,#0x22
000068  461a              MOV      r2,r3
00006a  e9cd5100          STRD     r5,r1,[sp,#0]
00006e  9002              STR      r0,[sp,#8]
000070  a11b              ADR      r1,|L1.224|
000072  4821              LDR      r0,|L1.248|
000074  f7fffffe          BL       __2sprintf
;;;115    	USART_OUT(USART1,"%s\r\n",latitudedtbuf);
000078  4a1f              LDR      r2,|L1.248|
00007a  a116              ADR      r1,|L1.212|
00007c  4817              LDR      r0,|L1.220|
00007e  f7fffffe          BL       USART_OUT
;;;116    	tp=gpsx.altitude;	   
000082  490b              LDR      r1,|L1.176|
000084  f8d100a0          LDR      r0,[r1,#0xa0]  ; gpsx
000088  f7fffffe          BL       __aeabi_i2f
00008c  4607              MOV      r7,r0
;;;117     	sprintf((char *)dtbuf,"Altitude:%.1fm     ",tp/=10);	    			
00008e  491b              LDR      r1,|L1.252|
000090  4638              MOV      r0,r7
000092  f7fffffe          BL       __aeabi_fdiv
000096  4607              MOV      r7,r0
000098  4604              MOV      r4,r0
00009a  f7fffffe          BL       __aeabi_f2d
00009e  4605              MOV      r5,r0
0000a0  462a              MOV      r2,r5
0000a2  460b              MOV      r3,r1
0000a4  a116              ADR      r1,|L1.256|
0000a6  481b              LDR      r0,|L1.276|
0000a8  f7fffffe          BL       __2sprintf
;;;118    }
0000ac  bdfe              POP      {r1-r7,pc}
;;;119    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L1.176|
                          DCD      gpsx
                  |L1.180|
                          DCD      0x47c35000
                  |L1.184|
0000b8  25636c6f          DCB      "%clongitude%c:%.5f %1c",0
0000bc  6e676974
0000c0  75646525
0000c4  633a252e
0000c8  35662025
0000cc  316300  
0000cf  00                DCB      0
                  |L1.208|
                          DCD      longitudedtbuf
                  |L1.212|
0000d4  25730d0a          DCB      "%s\r\n",0
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L1.220|
                          DCD      0x40013800
                  |L1.224|
0000e0  25636c61          DCB      "%clatitude%c:%.5f %1c",0
0000e4  74697475
0000e8  64652563
0000ec  3a252e35
0000f0  66202531
0000f4  6300    
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L1.248|
                          DCD      latitudedtbuf
                  |L1.252|
                          DCD      0x41200000
                  |L1.256|
000100  416c7469          DCB      "Altitude:%.1fm     ",0
000104  74756465
000108  3a252e31
00010c  666d2020
000110  20202000
                  |L1.276|
                          DCD      dtbuf

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  main PROC
;;;121    
;;;122    int main(void)
000000  b086              SUB      sp,sp,#0x18
;;;123    { 
;;;124    	u16 j,i,rxlen;
;;;125    	u16 k=0;
000002  bf00              NOP      
;;;126    	u8 upload=0; 
000004  bf00              NOP      
;;;127    	u8 *ret;
;;;128    //	u8 *ret1, ret2;
;;;129    	
;;;130    	
;;;131    	
;;;132    	
;;;133    	bsp_init();
000006  f7fffffe          BL       bsp_init
;;;134    
;;;135                                           
;;;136    	USART_OUT(USART1, "uart1 is ok\r\n");
00000a  a1fb              ADR      r1,|L2.1016|
00000c  48fe              LDR      r0,|L2.1032|
00000e  f7fffffe          BL       USART_OUT
;;;137    	
;;;138    	
;;;139    	USART_OUT(USART1, "wangzhongya\r\n");
000012  a1fe              ADR      r1,|L2.1036|
000014  48fc              LDR      r0,|L2.1032|
000016  f7fffffe          BL       USART_OUT
;;;140    	
;;;141    
;;;142    	while(1)
00001a  e3ad              B        |L2.1912|
                  |L2.28|
;;;143    	{	 
;;;144    
;;;145    		while(1)
00001c  e006              B        |L2.44|
                  |L2.30|
;;;146    		{
;;;147    			gprs_config();
00001e  f7fffffe          BL       gprs_config
;;;148    			if(gprs_status == 255)
000022  48fe              LDR      r0,|L2.1052|
000024  7800              LDRB     r0,[r0,#0]  ; gprs_status
000026  28ff              CMP      r0,#0xff
000028  d100              BNE      |L2.44|
;;;149    			{
;;;150    				break;
00002a  e000              B        |L2.46|
                  |L2.44|
00002c  e7f7              B        |L2.30|
                  |L2.46|
00002e  bf00              NOP      
;;;151    			}
;;;152    		}
;;;153    		usart1_recv_data();
000030  f7fffffe          BL       usart1_recv_data
;;;154    		usart2_recv_data();
000034  f7fffffe          BL       usart2_recv_data
;;;155    		
;;;156    		
;;;157    		
;;;158    		
;;;159    		MakeFile_MD5_Checksum(PARK_LOCK_Buffer, 16);
000038  2110              MOVS     r1,#0x10
00003a  48f9              LDR      r0,|L2.1056|
00003c  f7fffffe          BL       MakeFile_MD5_Checksum
;;;160    	
;;;161    		// µÁ≥ÿ–≈œ¢
;;;162    		Bat_V =Get_Adc_Average(ADC_Channel_0,10);
000040  210a              MOVS     r1,#0xa
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       Get_Adc_Average
000048  49f6              LDR      r1,|L2.1060|
00004a  8008              STRH     r0,[r1,#0]
;;;163    		Bat_V=Bat_V*3300/4096;
00004c  8809              LDRH     r1,[r1,#0]  ; Bat_V
00004e  f64042e4          MOV      r2,#0xce4
000052  fb01f002          MUL      r0,r1,r2
000056  17c1              ASRS     r1,r0,#31
000058  eb005111          ADD      r1,r0,r1,LSR #20
00005c  f3c1310f          UBFX     r1,r1,#12,#16
000060  4af0              LDR      r2,|L2.1060|
000062  8011              STRH     r1,[r2,#0]
;;;164    		Bat_V=Bat_V*88/20;
000064  4610              MOV      r0,r2
000066  8800              LDRH     r0,[r0,#0]  ; Bat_V
000068  2158              MOVS     r1,#0x58
00006a  4348              MULS     r0,r1,r0
00006c  2114              MOVS     r1,#0x14
00006e  fb90f0f1          SDIV     r0,r0,r1
000072  4611              MOV      r1,r2
000074  8008              STRH     r0,[r1,#0]
;;;165    		Bat_Pre=(Bat_V-5000)*100/2400;
000076  4608              MOV      r0,r1
000078  8800              LDRH     r0,[r0,#0]  ; Bat_V
00007a  f5a05098          SUB      r0,r0,#0x1300
00007e  3888              SUBS     r0,r0,#0x88
000080  2164              MOVS     r1,#0x64
000082  4348              MULS     r0,r1,r0
000084  f44f6116          MOV      r1,#0x960
000088  fb90f0f1          SDIV     r0,r0,r1
00008c  49e6              LDR      r1,|L2.1064|
00008e  8008              STRH     r0,[r1,#0]
;;;166    		
;;;167    		if(timer_is_timeout_1ms(tim1_cnt, 100000) == 0)
000090  49e6              LDR      r1,|L2.1068|
000092  2000              MOVS     r0,#0
000094  f7fffffe          BL       timer_is_timeout_1ms
000098  2800              CMP      r0,#0
00009a  d17d              BNE      |L2.408|
;;;168    		{
;;;169    			
;;;170     		
;;;171    			sprintf((char *)PublishDataBatbuf,"%s%s%s","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",1,2\r\n");
00009c  a0e4              ADR      r0,|L2.1072|
00009e  4be0              LDR      r3,|L2.1056|
0000a0  a2e5              ADR      r2,|L2.1080|
0000a2  a1eb              ADR      r1,|L2.1104|
0000a4  9000              STR      r0,[sp,#0]
0000a6  48ec              LDR      r0,|L2.1112|
0000a8  f7fffffe          BL       __2sprintf
;;;172    			USART_OUT(USART1, "ssss=%s\r\n", PublishDataBatbuf);
0000ac  4aea              LDR      r2,|L2.1112|
0000ae  a1eb              ADR      r1,|L2.1116|
0000b0  48d5              LDR      r0,|L2.1032|
0000b2  f7fffffe          BL       USART_OUT
;;;173    			ret = gprs_send_at(PublishDataBatbuf, ">", 300, 0);
0000b6  2300              MOVS     r3,#0
0000b8  f44f7296          MOV      r2,#0x12c
0000bc  a1ea              ADR      r1,|L2.1128|
0000be  48e6              LDR      r0,|L2.1112|
0000c0  f7fffffe          BL       gprs_send_at
0000c4  4604              MOV      r4,r0
;;;174    			if(ret != NULL)
0000c6  2c00              CMP      r4,#0
0000c8  d038              BEQ      |L2.316|
;;;175    			{
;;;176    				memset(expressText, 0 ,512);
0000ca  f44f7100          MOV      r1,#0x200
0000ce  48e7              LDR      r0,|L2.1132|
0000d0  f7fffffe          BL       __aeabi_memclr
;;;177    				memset(cipherText, 0 ,512);
0000d4  f44f7100          MOV      r1,#0x200
0000d8  48e5              LDR      r0,|L2.1136|
0000da  f7fffffe          BL       __aeabi_memclr
;;;178    				sprintf((char *)expressText,"{%c%s%c:%s}",'"',"battery",'"',"20");
0000de  a0e5              ADR      r0,|L2.1140|
0000e0  2122              MOVS     r1,#0x22
0000e2  a3e5              ADR      r3,|L2.1144|
0000e4  460a              MOV      r2,r1
0000e6  e9cd1000          STRD     r1,r0,[sp,#0]
0000ea  a1e5              ADR      r1,|L2.1152|
0000ec  48df              LDR      r0,|L2.1132|
0000ee  f7fffffe          BL       __2sprintf
;;;179    				USART_OUT(USART1, "expressText=%s\r\n", expressText);
0000f2  4ade              LDR      r2,|L2.1132|
0000f4  a1e5              ADR      r1,|L2.1164|
0000f6  48c4              LDR      r0,|L2.1032|
0000f8  f7fffffe          BL       USART_OUT
;;;180    //				AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;181    				USART_OUT(USART1, "aesKey=%s\r\n", aesKey);
0000fc  4ae8              LDR      r2,|L2.1184|
0000fe  a1e9              ADR      r1,|L2.1188|
000100  48c1              LDR      r0,|L2.1032|
000102  f7fffffe          BL       USART_OUT
;;;182    				USART_OUT(USART1, "cipherText=%s\r\n", cipherText);
000106  4ada              LDR      r2,|L2.1136|
000108  a1e9              ADR      r1,|L2.1200|
00010a  48bf              LDR      r0,|L2.1032|
00010c  f7fffffe          BL       USART_OUT
;;;183    				memset(tmp, 0, 20);
000110  2114              MOVS     r1,#0x14
000112  48eb              LDR      r0,|L2.1216|
000114  f7fffffe          BL       __aeabi_memclr
;;;184    				cipherText[0] = 0x31;
000118  2031              MOVS     r0,#0x31
00011a  49d5              LDR      r1,|L2.1136|
00011c  7008              STRB     r0,[r1,#0]
;;;185    				tmp[0] = 0x31;
00011e  49e8              LDR      r1,|L2.1216|
000120  7008              STRB     r0,[r1,#0]
;;;186    				ret = gprs_send_at(tmp, "OK", 300, 0);
000122  2300              MOVS     r3,#0
000124  f44f7296          MOV      r2,#0x12c
000128  a1e6              ADR      r1,|L2.1220|
00012a  48e5              LDR      r0,|L2.1216|
00012c  f7fffffe          BL       gprs_send_at
000130  4604              MOV      r4,r0
;;;187    				if(ret != NULL)
;;;188    				{
;;;189    					
;;;190    				}
;;;191    				memset(PublishDataBatbuf, 0, 512);
000132  f44f7100          MOV      r1,#0x200
000136  48c8              LDR      r0,|L2.1112|
000138  f7fffffe          BL       __aeabi_memclr
                  |L2.316|
;;;192    			}
;;;193    //			
;;;194    			if(Bat_Pre<10&&Bat_Pre_Flag==1)
00013c  48ba              LDR      r0,|L2.1064|
00013e  8800              LDRH     r0,[r0,#0]  ; Bat_Pre
000140  280a              CMP      r0,#0xa
000142  da3b              BGE      |L2.444|
000144  48e0              LDR      r0,|L2.1224|
000146  7800              LDRB     r0,[r0,#0]  ; Bat_Pre_Flag
000148  2801              CMP      r0,#1
00014a  d137              BNE      |L2.444|
;;;195    			{
;;;196    				Bat_Pre_Flag=0;
00014c  2000              MOVS     r0,#0
00014e  49de              LDR      r1,|L2.1224|
000150  7008              STRB     r0,[r1,#0]
;;;197    				sprintf((char *)PublishDataBatbuf,"%s%s%","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",36,2\r\n");
000152  a0de              ADR      r0,|L2.1228|
000154  4bb2              LDR      r3,|L2.1056|
000156  a2b8              ADR      r2,|L2.1080|
000158  a1de              ADR      r1,|L2.1236|
00015a  9000              STR      r0,[sp,#0]
00015c  48be              LDR      r0,|L2.1112|
00015e  f7fffffe          BL       __2sprintf
;;;198    				USART_OUT(USART1, "wangzhongya=%s\r\n", PublishDataBatbuf);
000162  4abd              LDR      r2,|L2.1112|
000164  a1dd              ADR      r1,|L2.1244|
000166  48a8              LDR      r0,|L2.1032|
000168  f7fffffe          BL       USART_OUT
;;;199    				ret = gprs_send_at(PublishDataBatbuf, ">", 300, 0);
00016c  2300              MOVS     r3,#0
00016e  f44f7296          MOV      r2,#0x12c
000172  a1bd              ADR      r1,|L2.1128|
000174  48b8              LDR      r0,|L2.1112|
000176  f7fffffe          BL       gprs_send_at
00017a  4604              MOV      r4,r0
;;;200    				if(ret != NULL)
00017c  b164              CBZ      r4,|L2.408|
;;;201    				{
;;;202    					memset(expressText, 0 ,512);
00017e  f44f7100          MOV      r1,#0x200
000182  48ba              LDR      r0,|L2.1132|
000184  f7fffffe          BL       __aeabi_memclr
;;;203    					memset(cipherText, 0 ,512);
000188  f44f7100          MOV      r1,#0x200
00018c  48b8              LDR      r0,|L2.1136|
00018e  f7fffffe          BL       __aeabi_memclr
;;;204    					sprintf((char *)expressText,"{%c%s%c:%s}",'"',"battery",'"',"20");
000192  a0b8              ADR      r0,|L2.1140|
000194  2122              MOVS     r1,#0x22
000196  e000              B        |L2.410|
                  |L2.408|
000198  e010              B        |L2.444|
                  |L2.410|
00019a  a3b7              ADR      r3,|L2.1144|
00019c  460a              MOV      r2,r1
00019e  e9cd1000          STRD     r1,r0,[sp,#0]
0001a2  a1b7              ADR      r1,|L2.1152|
0001a4  48b1              LDR      r0,|L2.1132|
0001a6  f7fffffe          BL       __2sprintf
;;;205    //					AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;206    					ret = gprs_send_at(cipherText, "OK", 300, 0);
0001aa  2300              MOVS     r3,#0
0001ac  f44f7296          MOV      r2,#0x12c
0001b0  a1c4              ADR      r1,|L2.1220|
0001b2  48af              LDR      r0,|L2.1136|
0001b4  f7fffffe          BL       gprs_send_at
0001b8  4604              MOV      r4,r0
;;;207    					if(ret == NULL)
0001ba  bf00              NOP      
                  |L2.444|
;;;208    					{
;;;209    						
;;;210    					}
;;;211    				}
;;;212    			}
;;;213    		}
;;;214    //		///
;;;215    		p1 = strstr((u8*)protocol_buff, "topic: lock/");
0001bc  a1cc              ADR      r1,|L2.1264|
0001be  48d0              LDR      r0,|L2.1280|
0001c0  f7fffffe          BL       strstr
0001c4  49cf              LDR      r1,|L2.1284|
0001c6  6008              STR      r0,[r1,#0]  ; p1
;;;216    		p2 = strstr((u8 *)p1,(u8 *)PARK_LOCK_Buffer);
0001c8  4995              LDR      r1,|L2.1056|
0001ca  48ce              LDR      r0,|L2.1284|
0001cc  6800              LDR      r0,[r0,#0]  ; p1
0001ce  f7fffffe          BL       strstr
0001d2  49cd              LDR      r1,|L2.1288|
0001d4  6008              STR      r0,[r1,#0]  ; p2
;;;217    		if(strncmp((char *)p1,(char *)"topic: lock/",12)==0)
0001d6  220c              MOVS     r2,#0xc
0001d8  a1c5              ADR      r1,|L2.1264|
0001da  48ca              LDR      r0,|L2.1284|
0001dc  6800              LDR      r0,[r0,#0]  ; p1
0001de  f7fffffe          BL       strncmp
0001e2  2800              CMP      r0,#0
0001e4  d157              BNE      |L2.662|
;;;218    		{
;;;219    			USART_OUT(USART1, "lock\r\n");
0001e6  a1c9              ADR      r1,|L2.1292|
0001e8  4887              LDR      r0,|L2.1032|
0001ea  f7fffffe          BL       USART_OUT
;;;220    			
;;;221     			if((LOCK_ON_READ() == 0) || (LOCK_OFF_READ() == 0))
0001ee  2110              MOVS     r1,#0x10
0001f0  48c8              LDR      r0,|L2.1300|
0001f2  f7fffffe          BL       GPIO_ReadInputDataBit
0001f6  b128              CBZ      r0,|L2.516|
0001f8  2120              MOVS     r1,#0x20
0001fa  48c6              LDR      r0,|L2.1300|
0001fc  f7fffffe          BL       GPIO_ReadInputDataBit
000200  2800              CMP      r0,#0
000202  d148              BNE      |L2.662|
                  |L2.516|
;;;222    			{
;;;223    				memset(receiveText ,0 , 512);
000204  f44f7100          MOV      r1,#0x200
000208  48c3              LDR      r0,|L2.1304|
00020a  f7fffffe          BL       __aeabi_memclr
;;;224    				memset(expressText ,0 , 512);
00020e  f44f7100          MOV      r1,#0x200
000212  4896              LDR      r0,|L2.1132|
000214  f7fffffe          BL       __aeabi_memclr
;;;225    				
;;;226    				strcpy((char*)receiveText ,(char *)(p1+32));
000218  48ba              LDR      r0,|L2.1284|
00021a  6801              LDR      r1,[r0,#0]  ; p1
00021c  3120              ADDS     r1,r1,#0x20
00021e  48be              LDR      r0,|L2.1304|
000220  f7fffffe          BL       strcpy
;;;227    //				AES_Decrypt((char*)expressText, (char*)receiveText, (char*)aesKey);
;;;228    				Shaking=1;
000224  2001              MOVS     r0,#1
000226  49bd              LDR      r1,|L2.1308|
000228  7008              STRB     r0,[r1,#0]
;;;229    				if(*receiveText==0x31)
00022a  48bb              LDR      r0,|L2.1304|
00022c  7800              LDRB     r0,[r0,#0]  ; receiveText
00022e  2831              CMP      r0,#0x31
000230  d113              BNE      |L2.602|
;;;230    				{
;;;231    					if(ALARM_LOCK_ON() == 0)
000232  2110              MOVS     r1,#0x10
000234  48b7              LDR      r0,|L2.1300|
000236  f7fffffe          BL       GPIO_ReadInputDataBit
00023a  b950              CBNZ     r0,|L2.594|
;;;232    					{
;;;233    						Lock_Open=1;
00023c  2001              MOVS     r0,#1
00023e  49b8              LDR      r1,|L2.1312|
000240  7008              STRB     r0,[r1,#0]
;;;234    						timer_is_timeout_1ms(timer_open_lock, 0);
000242  2100              MOVS     r1,#0
000244  2004              MOVS     r0,#4
000246  f7fffffe          BL       timer_is_timeout_1ms
;;;235    						Lock_Open_On=1;	
00024a  2001              MOVS     r0,#1
00024c  49b5              LDR      r1,|L2.1316|
00024e  7008              STRB     r0,[r1,#0]
000250  e01c              B        |L2.652|
                  |L2.594|
;;;236    					}
;;;237    					else
;;;238    					{
;;;239    						Lock_Open=0;
000252  2000              MOVS     r0,#0
000254  49b2              LDR      r1,|L2.1312|
000256  7008              STRB     r0,[r1,#0]
000258  e018              B        |L2.652|
                  |L2.602|
;;;240    					}
;;;241    				}
;;;242    				else if(*receiveText==0x32)
00025a  48af              LDR      r0,|L2.1304|
00025c  7800              LDRB     r0,[r0,#0]  ; receiveText
00025e  2832              CMP      r0,#0x32
000260  d10e              BNE      |L2.640|
;;;243    				{
;;;244    					if(LOCK_OFF_READ() == 0)
000262  2120              MOVS     r1,#0x20
000264  48ab              LDR      r0,|L2.1300|
000266  f7fffffe          BL       GPIO_ReadInputDataBit
00026a  b928              CBNZ     r0,|L2.632|
;;;245    					{
;;;246    						Lock_Close=1;
00026c  2001              MOVS     r0,#1
00026e  49ae              LDR      r1,|L2.1320|
000270  7008              STRB     r0,[r1,#0]
;;;247    						Lock_Close_On=1;
000272  49ae              LDR      r1,|L2.1324|
000274  7008              STRB     r0,[r1,#0]
000276  e009              B        |L2.652|
                  |L2.632|
;;;248    					}
;;;249    					else
;;;250    					{
;;;251    						Lock_Close=0;
000278  2000              MOVS     r0,#0
00027a  49ab              LDR      r1,|L2.1320|
00027c  7008              STRB     r0,[r1,#0]
00027e  e005              B        |L2.652|
                  |L2.640|
;;;252    					}
;;;253    				
;;;254    				}
;;;255    				else if(*receiveText == 0x30)
000280  48a5              LDR      r0,|L2.1304|
000282  7800              LDRB     r0,[r0,#0]  ; receiveText
000284  2830              CMP      r0,#0x30
000286  d101              BNE      |L2.652|
;;;256    				{
;;;257    					Park_Lock_stop();
000288  f7fffffe          BL       Park_Lock_stop
                  |L2.652|
;;;258    				}
;;;259    				
;;;260    				memset(protocol_buff, 0, 512);	
00028c  f44f7100          MOV      r1,#0x200
000290  489b              LDR      r0,|L2.1280|
000292  f7fffffe          BL       __aeabi_memclr
                  |L2.662|
;;;261    				
;;;262    			}
;;;263    		}
;;;264    //		//
;;;265    //		if((ALARM_LOCK_ON() == 1) || (ALARM_LOCK_OFF() == 1))
;;;266    //		{
;;;267    //			
;;;268    //		}
;;;269    //		
;;;270    		p1 = strstr((char*)protocol_buff, "topic: bell/");
000296  a1a6              ADR      r1,|L2.1328|
000298  4899              LDR      r0,|L2.1280|
00029a  f7fffffe          BL       strstr
00029e  4999              LDR      r1,|L2.1284|
0002a0  6008              STR      r0,[r1,#0]  ; p1
;;;271    		p2 = strstr((char *)p1,(char *)PARK_LOCK_Buffer);
0002a2  495f              LDR      r1,|L2.1056|
0002a4  4897              LDR      r0,|L2.1284|
0002a6  6800              LDR      r0,[r0,#0]  ; p1
0002a8  f7fffffe          BL       strstr
0002ac  4996              LDR      r1,|L2.1288|
0002ae  6008              STR      r0,[r1,#0]  ; p2
;;;272    		if(strncmp((char *)p1,(char *)"topic: bell/",12)==0 && bell_flag==0)
0002b0  220c              MOVS     r2,#0xc
0002b2  a19f              ADR      r1,|L2.1328|
0002b4  4893              LDR      r0,|L2.1284|
0002b6  6800              LDR      r0,[r0,#0]  ; p1
0002b8  f7fffffe          BL       strncmp
0002bc  b9a8              CBNZ     r0,|L2.746|
0002be  48a0              LDR      r0,|L2.1344|
0002c0  7800              LDRB     r0,[r0,#0]  ; bell_flag
0002c2  b990              CBNZ     r0,|L2.746|
;;;273    		{
;;;274    			USART_OUT(USART1, "bell\r\n");
0002c4  a19f              ADR      r1,|L2.1348|
0002c6  4850              LDR      r0,|L2.1032|
0002c8  f7fffffe          BL       USART_OUT
;;;275    		
;;;276    			
;;;277    			bell_flag=1;
0002cc  2001              MOVS     r0,#1
0002ce  499c              LDR      r1,|L2.1344|
0002d0  7008              STRB     r0,[r1,#0]
;;;278    			
;;;279    			BEEP_ON();
0002d2  2108              MOVS     r1,#8
0002d4  489d              LDR      r0,|L2.1356|
0002d6  f7fffffe          BL       GPIO_SetBits
;;;280    			timer_delay_1ms(500);
0002da  f44f70fa          MOV      r0,#0x1f4
0002de  f7fffffe          BL       timer_delay_1ms
;;;281    			BEEP_OFF();
0002e2  2108              MOVS     r1,#8
0002e4  4899              LDR      r0,|L2.1356|
0002e6  f7fffffe          BL       GPIO_ResetBits
                  |L2.746|
;;;282    		}
;;;283    		
;;;284    		
;;;285    		if(bell_flag == 1)
0002ea  4895              LDR      r0,|L2.1344|
0002ec  7800              LDRB     r0,[r0,#0]  ; bell_flag
0002ee  2801              CMP      r0,#1
0002f0  d102              BNE      |L2.760|
;;;286    		{
;;;287    			bell_flag = 0;
0002f2  2000              MOVS     r0,#0
0002f4  4992              LDR      r1,|L2.1344|
0002f6  7008              STRB     r0,[r1,#0]
                  |L2.760|
;;;288    		}
;;;289    		
;;;290    				
;;;291    		if(Lock_Open == 1)
0002f8  4889              LDR      r0,|L2.1312|
0002fa  7800              LDRB     r0,[r0,#0]  ; Lock_Open
0002fc  2801              CMP      r0,#1
                  |L2.766|
0002fe  d179              BNE      |L2.1012|
;;;292    		{
;;;293    			if(timer_is_timeout_1ms(timer_open_lock, 3000) == 0)
000300  f64031b8          MOV      r1,#0xbb8
000304  2004              MOVS     r0,#4
000306  f7fffffe          BL       timer_is_timeout_1ms
00030a  b978              CBNZ     r0,|L2.812|
;;;294    			{
;;;295    //				lock_close();
;;;296    				if(LOCK_ON_READ()==0 || LOCK_OFF_READ()==0)
00030c  2110              MOVS     r1,#0x10
00030e  4881              LDR      r0,|L2.1300|
000310  f7fffffe          BL       GPIO_ReadInputDataBit
000314  b120              CBZ      r0,|L2.800|
000316  2120              MOVS     r1,#0x20
000318  487e              LDR      r0,|L2.1300|
00031a  f7fffffe          BL       GPIO_ReadInputDataBit
00031e  b928              CBNZ     r0,|L2.812|
                  |L2.800|
;;;297    				{
;;;298    					Lock_Close = 1;
000320  2001              MOVS     r0,#1
000322  4981              LDR      r1,|L2.1320|
000324  7008              STRB     r0,[r1,#0]
;;;299    					Lock_Open = 0;
000326  2000              MOVS     r0,#0
000328  497d              LDR      r1,|L2.1312|
00032a  7008              STRB     r0,[r1,#0]
                  |L2.812|
;;;300    				}
;;;301    			}
;;;302    			USART_OUT(USART1, "Lock_Open\r\n");
00032c  a188              ADR      r1,|L2.1360|
00032e  4836              LDR      r0,|L2.1032|
000330  f7fffffe          BL       USART_OUT
;;;303    			if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1)
000334  2110              MOVS     r1,#0x10
000336  4877              LDR      r0,|L2.1300|
000338  f7fffffe          BL       GPIO_ReadInputDataBit
00033c  b958              CBNZ     r0,|L2.854|
00033e  2120              MOVS     r1,#0x20
000340  4874              LDR      r0,|L2.1300|
000342  f7fffffe          BL       GPIO_ReadInputDataBit
000346  2801              CMP      r0,#1
000348  d105              BNE      |L2.854|
;;;304    			{
;;;305    				lock_open();	//ø™À¯
00034a  f7fffffe          BL       lock_open
;;;306    				USART_OUT(USART1, "AAA lock_open\r\n");
00034e  a183              ADR      r1,|L2.1372|
000350  482d              LDR      r0,|L2.1032|
000352  f7fffffe          BL       USART_OUT
                  |L2.854|
;;;307    			}
;;;308    			
;;;309    			if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0)
000356  2110              MOVS     r1,#0x10
000358  486e              LDR      r0,|L2.1300|
00035a  f7fffffe          BL       GPIO_ReadInputDataBit
00035e  2801              CMP      r0,#1
000360  d1cd              BNE      |L2.766|
000362  2120              MOVS     r1,#0x20
000364  486b              LDR      r0,|L2.1300|
000366  f7fffffe          BL       GPIO_ReadInputDataBit
00036a  2800              CMP      r0,#0
00036c  d1c7              BNE      |L2.766|
;;;310    			{
;;;311    				USART_OUT(USART1, "AAA lock_stop\r\n");
00036e  a17f              ADR      r1,|L2.1388|
000370  4825              LDR      r0,|L2.1032|
000372  f7fffffe          BL       USART_OUT
;;;312    				Lock_Open = 0;
000376  2000              MOVS     r0,#0
000378  4969              LDR      r1,|L2.1312|
00037a  7008              STRB     r0,[r1,#0]
;;;313    				lock_stop();	//Õ£÷π‘À––
00037c  f7fffffe          BL       lock_stop
;;;314    				
;;;315    				sprintf((char *)PublishLockBackbuf,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",1,2\r\n");
000380  a02b              ADR      r0,|L2.1072|
000382  4b27              LDR      r3,|L2.1056|
000384  a27d              ADR      r2,|L2.1404|
000386  a132              ADR      r1,|L2.1104|
000388  9000              STR      r0,[sp,#0]
00038a  4882              LDR      r0,|L2.1428|
00038c  f7fffffe          BL       __2sprintf
;;;316    				USART_OUT(USART1, "PublishLockBackbuf=%s\r\n", PublishLockBackbuf);
000390  4a80              LDR      r2,|L2.1428|
000392  a181              ADR      r1,|L2.1432|
000394  481c              LDR      r0,|L2.1032|
000396  f7fffffe          BL       USART_OUT
;;;317    				ret = gprs_send_at(PublishLockBackbuf, ">", 300, 0);
00039a  2300              MOVS     r3,#0
00039c  f44f7296          MOV      r2,#0x12c
0003a0  a131              ADR      r1,|L2.1128|
0003a2  487c              LDR      r0,|L2.1428|
0003a4  f7fffffe          BL       gprs_send_at
0003a8  4604              MOV      r4,r0
;;;318    				if(ret != NULL)
0003aa  b31c              CBZ      r4,|L2.1012|
;;;319    				{
;;;320    					memset(expressText, 0 ,512);
0003ac  f44f7100          MOV      r1,#0x200
0003b0  482e              LDR      r0,|L2.1132|
0003b2  f7fffffe          BL       __aeabi_memclr
;;;321    					memset(cipherText, 0 ,512);
0003b6  f44f7100          MOV      r1,#0x200
0003ba  482d              LDR      r0,|L2.1136|
0003bc  f7fffffe          BL       __aeabi_memclr
;;;322    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"1",'"',"ok",'"',"1");
0003c0  a07b              ADR      r0,|L2.1456|
0003c2  2122              MOVS     r1,#0x22
0003c4  a27b              ADR      r2,|L2.1460|
0003c6  e9cd1202          STRD     r1,r2,[sp,#8]
0003ca  e9cd1004          STRD     r1,r0,[sp,#0x10]
0003ce  a078              ADR      r0,|L2.1456|
0003d0  a379              ADR      r3,|L2.1464|
0003d2  460a              MOV      r2,r1
0003d4  e9cd1000          STRD     r1,r0,[sp,#0]
0003d8  a178              ADR      r1,|L2.1468|
0003da  4824              LDR      r0,|L2.1132|
0003dc  f7fffffe          BL       __2sprintf
;;;323    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
0003e0  4a22              LDR      r2,|L2.1132|
0003e2  a12a              ADR      r1,|L2.1164|
0003e4  4808              LDR      r0,|L2.1032|
0003e6  f7fffffe          BL       USART_OUT
;;;324    //						AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;325    					tmp[0] = 0x33;
0003ea  2033              MOVS     r0,#0x33
0003ec  4934              LDR      r1,|L2.1216|
0003ee  7008              STRB     r0,[r1,#0]
;;;326    					ret = gprs_send_at(tmp, "OK", 300, 0);
0003f0  2300              MOVS     r3,#0
0003f2  e0ef              B        |L2.1492|
                  |L2.1012|
0003f4  e0f7              B        |L2.1510|
0003f6  0000              DCW      0x0000
                  |L2.1016|
0003f8  75617274          DCB      "uart1 is ok\r\n",0
0003fc  31206973
000400  206f6b0d
000404  0a00    
000406  00                DCB      0
000407  00                DCB      0
                  |L2.1032|
                          DCD      0x40013800
                  |L2.1036|
00040c  77616e67          DCB      "wangzhongya\r\n",0
000410  7a686f6e
000414  6779610d
000418  0a00    
00041a  00                DCB      0
00041b  00                DCB      0
                  |L2.1052|
                          DCD      gprs_status
                  |L2.1056|
                          DCD      PARK_LOCK_Buffer
                  |L2.1060|
                          DCD      Bat_V
                  |L2.1064|
                          DCD      Bat_Pre
                  |L2.1068|
                          DCD      0x000186a0
                  |L2.1072|
000430  2c312c32          DCB      ",1,2\r\n",0
000434  0d0a00  
000437  00                DCB      0
                  |L2.1080|
000438  41542b50          DCB      "AT+PUBLISH=lockdata/",0
00043c  55424c49
000440  53483d6c
000444  6f636b64
000448  6174612f
00044c  00      
00044d  00                DCB      0
00044e  00                DCB      0
00044f  00                DCB      0
                  |L2.1104|
000450  25732573          DCB      "%s%s%s",0
000454  257300  
000457  00                DCB      0
                  |L2.1112|
                          DCD      PublishDataBatbuf
                  |L2.1116|
00045c  73737373          DCB      "ssss=%s\r\n",0
000460  3d25730d
000464  0a00    
000466  00                DCB      0
000467  00                DCB      0
                  |L2.1128|
000468  3e00              DCB      ">",0
00046a  00                DCB      0
00046b  00                DCB      0
                  |L2.1132|
                          DCD      expressText
                  |L2.1136|
                          DCD      cipherText
                  |L2.1140|
000474  323000            DCB      "20",0
000477  00                DCB      0
                  |L2.1144|
000478  62617474          DCB      "battery",0
00047c  65727900
                  |L2.1152|
000480  7b256325          DCB      "{%c%s%c:%s}",0
000484  7325633a
000488  25737d00
                  |L2.1164|
00048c  65787072          DCB      "expressText=%s\r\n",0
000490  65737354
000494  6578743d
000498  25730d0a
00049c  00      
00049d  00                DCB      0
00049e  00                DCB      0
00049f  00                DCB      0
                  |L2.1184|
                          DCD      aesKey
                  |L2.1188|
0004a4  6165734b          DCB      "aesKey=%s\r\n",0
0004a8  65793d25
0004ac  730d0a00
                  |L2.1200|
0004b0  63697068          DCB      "cipherText=%s\r\n",0
0004b4  65725465
0004b8  78743d25
0004bc  730d0a00
                  |L2.1216|
                          DCD      tmp
                  |L2.1220|
0004c4  4f4b00            DCB      "OK",0
0004c7  00                DCB      0
                  |L2.1224|
                          DCD      Bat_Pre_Flag
                  |L2.1228|
0004cc  2c33362c          DCB      ",36,2\r\n",0
0004d0  320d0a00
                  |L2.1236|
0004d4  25732573          DCB      "%s%s%",0
0004d8  2500    
0004da  00                DCB      0
0004db  00                DCB      0
                  |L2.1244|
0004dc  77616e67          DCB      "wangzhongya=%s\r\n",0
0004e0  7a686f6e
0004e4  6779613d
0004e8  25730d0a
0004ec  00      
0004ed  00                DCB      0
0004ee  00                DCB      0
0004ef  00                DCB      0
                  |L2.1264|
0004f0  746f7069          DCB      "topic: lock/",0
0004f4  633a206c
0004f8  6f636b2f
0004fc  00      
0004fd  00                DCB      0
0004fe  00                DCB      0
0004ff  00                DCB      0
                  |L2.1280|
                          DCD      protocol_buff
                  |L2.1284|
                          DCD      ||p1||
                  |L2.1288|
                          DCD      ||p2||
                  |L2.1292|
00050c  6c6f636b          DCB      "lock\r\n",0
000510  0d0a00  
000513  00                DCB      0
                  |L2.1300|
                          DCD      0x40010800
                  |L2.1304|
                          DCD      receiveText
                  |L2.1308|
                          DCD      Shaking
                  |L2.1312|
                          DCD      Lock_Open
                  |L2.1316|
                          DCD      Lock_Open_On
                  |L2.1320|
                          DCD      Lock_Close
                  |L2.1324|
                          DCD      Lock_Close_On
                  |L2.1328|
000530  746f7069          DCB      "topic: bell/",0
000534  633a2062
000538  656c6c2f
00053c  00      
00053d  00                DCB      0
00053e  00                DCB      0
00053f  00                DCB      0
                  |L2.1344|
                          DCD      bell_flag
                  |L2.1348|
000544  62656c6c          DCB      "bell\r\n",0
000548  0d0a00  
00054b  00                DCB      0
                  |L2.1356|
                          DCD      0x40011000
                  |L2.1360|
000550  4c6f636b          DCB      "Lock_Open\r\n",0
000554  5f4f7065
000558  6e0d0a00
                  |L2.1372|
00055c  41414120          DCB      "AAA lock_open\r\n",0
000560  6c6f636b
000564  5f6f7065
000568  6e0d0a00
                  |L2.1388|
00056c  41414120          DCB      "AAA lock_stop\r\n",0
000570  6c6f636b
000574  5f73746f
000578  700d0a00
                  |L2.1404|
00057c  41542b50          DCB      "AT+PUBLISH=lockback/",0
000580  55424c49
000584  53483d6c
000588  6f636b62
00058c  61636b2f
000590  00      
000591  00                DCB      0
000592  00                DCB      0
000593  00                DCB      0
                  |L2.1428|
                          DCD      PublishLockBackbuf
                  |L2.1432|
000598  5075626c          DCB      "PublishLockBackbuf=%s\r\n",0
00059c  6973684c
0005a0  6f636b42
0005a4  61636b62
0005a8  75663d25
0005ac  730d0a00
                  |L2.1456|
0005b0  3100              DCB      "1",0
0005b2  00                DCB      0
0005b3  00                DCB      0
                  |L2.1460|
0005b4  6f6b00            DCB      "ok",0
0005b7  00                DCB      0
                  |L2.1464|
0005b8  636d6400          DCB      "cmd",0
                  |L2.1468|
0005bc  7b256325          DCB      "{%c%s%c:%s,%c%s%c:%s}",0
0005c0  7325633a
0005c4  25732c25
0005c8  63257325
0005cc  633a2573
0005d0  7d00    
0005d2  00                DCB      0
0005d3  00                DCB      0
                  |L2.1492|
0005d4  f44f7296          MOV      r2,#0x12c
0005d8  f2af1118          ADR      r1,|L2.1220|
0005dc  4867              LDR      r0,|L2.1916|
0005de  f7fffffe          BL       gprs_send_at
0005e2  4604              MOV      r4,r0
;;;327    					if(ret == NULL)
0005e4  bf00              NOP      
                  |L2.1510|
;;;328    					{
;;;329    						
;;;330    					}
;;;331    				}			
;;;332    			}	
;;;333    		}
;;;334    		
;;;335    		if(Lock_Close == 1)
0005e6  4866              LDR      r0,|L2.1920|
0005e8  7800              LDRB     r0,[r0,#0]  ; Lock_Close
0005ea  2801              CMP      r0,#1
0005ec  d179              BNE      |L2.1762|
;;;336    		{
;;;337    			if(timer_is_timeout_1ms(timer_close_lock, 5000) == 0)
0005ee  f2413188          MOV      r1,#0x1388
0005f2  2003              MOVS     r0,#3
0005f4  f7fffffe          BL       timer_is_timeout_1ms
;;;338    			{
;;;339    //				lock_open();
;;;340    			}
;;;341    			USART_OUT(USART1, "BBB Lock_Close\r\n");
0005f8  a162              ADR      r1,|L2.1924|
0005fa  4867              LDR      r0,|L2.1944|
0005fc  f7fffffe          BL       USART_OUT
;;;342    			if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0)
000600  2110              MOVS     r1,#0x10
000602  4866              LDR      r0,|L2.1948|
000604  f7fffffe          BL       GPIO_ReadInputDataBit
000608  2801              CMP      r0,#1
00060a  d10a              BNE      |L2.1570|
00060c  2120              MOVS     r1,#0x20
00060e  4863              LDR      r0,|L2.1948|
000610  f7fffffe          BL       GPIO_ReadInputDataBit
000614  b928              CBNZ     r0,|L2.1570|
;;;343    			{
;;;344    				lock_close();
000616  f7fffffe          BL       lock_close
;;;345    				USART_OUT(USART1, "BBB lock_close\r\n");
00061a  a161              ADR      r1,|L2.1952|
00061c  485e              LDR      r0,|L2.1944|
00061e  f7fffffe          BL       USART_OUT
                  |L2.1570|
;;;346    			}
;;;347    			
;;;348    			if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1)
000622  2110              MOVS     r1,#0x10
000624  485d              LDR      r0,|L2.1948|
000626  f7fffffe          BL       GPIO_ReadInputDataBit
00062a  2800              CMP      r0,#0
00062c  d159              BNE      |L2.1762|
00062e  2120              MOVS     r1,#0x20
000630  485a              LDR      r0,|L2.1948|
000632  f7fffffe          BL       GPIO_ReadInputDataBit
000636  2801              CMP      r0,#1
000638  d153              BNE      |L2.1762|
;;;349    			{
;;;350    				Lock_Close = 0;
00063a  2000              MOVS     r0,#0
00063c  4950              LDR      r1,|L2.1920|
00063e  7008              STRB     r0,[r1,#0]
;;;351    				lock_stop();	//Õ£÷π‘À––
000640  f7fffffe          BL       lock_stop
;;;352    				USART_OUT(USART1, "BBB lock_stop\r\n");
000644  a15b              ADR      r1,|L2.1972|
000646  4854              LDR      r0,|L2.1944|
000648  f7fffffe          BL       USART_OUT
;;;353    				
;;;354    				sprintf((char *)PublishLockBackbuf,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",1,2\r\n");
00064c  f2af2020          ADR      r0,|L2.1072|
000650  4b5c              LDR      r3,|L2.1988|
000652  f2af02d8          ADR      r2,|L2.1404|
000656  f2af2108          ADR      r1,|L2.1104|
00065a  9000              STR      r0,[sp,#0]
00065c  485a              LDR      r0,|L2.1992|
00065e  f7fffffe          BL       __2sprintf
;;;355    				USART_OUT(USART1, "PublishLockBackbuf=%s\r\n", PublishLockBackbuf);
000662  4a59              LDR      r2,|L2.1992|
000664  f2af01d0          ADR      r1,|L2.1432|
000668  484b              LDR      r0,|L2.1944|
00066a  f7fffffe          BL       USART_OUT
;;;356    				ret = gprs_send_at(PublishLockBackbuf, ">", 300, 0);
00066e  2300              MOVS     r3,#0
000670  f44f7296          MOV      r2,#0x12c
000674  f2af2110          ADR      r1,|L2.1128|
000678  4853              LDR      r0,|L2.1992|
00067a  f7fffffe          BL       gprs_send_at
00067e  4604              MOV      r4,r0
;;;357    				if(ret != NULL)
000680  b37c              CBZ      r4,|L2.1762|
;;;358    				{
;;;359    					memset(expressText, 0 ,512);
000682  f44f7100          MOV      r1,#0x200
000686  4851              LDR      r0,|L2.1996|
000688  f7fffffe          BL       __aeabi_memclr
;;;360    					memset(cipherText, 0 ,512);
00068c  f44f7100          MOV      r1,#0x200
000690  484f              LDR      r0,|L2.2000|
000692  f7fffffe          BL       __aeabi_memclr
;;;361    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"2",'"',"ok",'"',"0");
000696  a04f              ADR      r0,|L2.2004|
000698  2122              MOVS     r1,#0x22
00069a  f2af02e8          ADR      r2,|L2.1460|
00069e  e9cd1202          STRD     r1,r2,[sp,#8]
0006a2  e9cd1004          STRD     r1,r0,[sp,#0x10]
0006a6  a04c              ADR      r0,|L2.2008|
0006a8  f2af03f4          ADR      r3,|L2.1464|
0006ac  460a              MOV      r2,r1
0006ae  e9cd1000          STRD     r1,r0,[sp,#0]
0006b2  f2af01f8          ADR      r1,|L2.1468|
0006b6  4845              LDR      r0,|L2.1996|
0006b8  f7fffffe          BL       __2sprintf
;;;362    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
0006bc  4a43              LDR      r2,|L2.1996|
0006be  f2af2134          ADR      r1,|L2.1164|
0006c2  4835              LDR      r0,|L2.1944|
0006c4  f7fffffe          BL       USART_OUT
;;;363    //						AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;364    					tmp[0] = 0x35;
0006c8  2035              MOVS     r0,#0x35
0006ca  492c              LDR      r1,|L2.1916|
0006cc  7008              STRB     r0,[r1,#0]
;;;365    					ret = gprs_send_at(tmp, "OK", 300, 0);
0006ce  2300              MOVS     r3,#0
0006d0  f44f7296          MOV      r2,#0x12c
0006d4  f2af2114          ADR      r1,|L2.1220|
0006d8  4828              LDR      r0,|L2.1916|
0006da  f7fffffe          BL       gprs_send_at
0006de  4604              MOV      r4,r0
;;;366    					if(ret == NULL)
0006e0  bf00              NOP      
                  |L2.1762|
;;;367    					{
;;;368    						
;;;369    					}
;;;370    				}
;;;371    			}
;;;372    		}
;;;373    		
;;;374    		if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==1)
0006e2  2110              MOVS     r1,#0x10
0006e4  482d              LDR      r0,|L2.1948|
0006e6  f7fffffe          BL       GPIO_ReadInputDataBit
0006ea  2801              CMP      r0,#1
0006ec  d109              BNE      |L2.1794|
0006ee  2120              MOVS     r1,#0x20
0006f0  482a              LDR      r0,|L2.1948|
0006f2  f7fffffe          BL       GPIO_ReadInputDataBit
0006f6  2801              CMP      r0,#1
0006f8  d103              BNE      |L2.1794|
;;;375    		{
;;;376    			
;;;377    			USART_OUT(USART1, "ddddd\r\n");
0006fa  a138              ADR      r1,|L2.2012|
0006fc  4826              LDR      r0,|L2.1944|
0006fe  f7fffffe          BL       USART_OUT
                  |L2.1794|
;;;378    		}
;;;379    		if(BUTTON1_READ() == 0)
000702  2140              MOVS     r1,#0x40
000704  4837              LDR      r0,|L2.2020|
000706  f7fffffe          BL       GPIO_ReadInputDataBit
00070a  b918              CBNZ     r0,|L2.1812|
;;;380    		{
;;;381    			USART_OUT(USART1, "bbbbb\r\n");
00070c  a136              ADR      r1,|L2.2024|
00070e  4822              LDR      r0,|L2.1944|
000710  f7fffffe          BL       USART_OUT
                  |L2.1812|
;;;382    		}
;;;383    		
;;;384    		
;;;385    		
;;;386    		if(timer_is_timeout_1ms(tim1_cnt, 1000*60*1) == 0)
000714  f64e2160          MOV      r1,#0xea60
000718  2000              MOVS     r0,#0
00071a  f7fffffe          BL       timer_is_timeout_1ms
00071e  bb58              CBNZ     r0,|L2.1912|
;;;387    		{
;;;388    		
;;;389    			sprintf((char *)PublishDataBatbuf,"%s%s%s","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",1,2\r\n");
000720  f2af20f4          ADR      r0,|L2.1072|
000724  4b27              LDR      r3,|L2.1988|
000726  f2af22f0          ADR      r2,|L2.1080|
00072a  f2af21dc          ADR      r1,|L2.1104|
00072e  9000              STR      r0,[sp,#0]
000730  482f              LDR      r0,|L2.2032|
000732  f7fffffe          BL       __2sprintf
;;;390    			USART_OUT(USART1, "ssss=%s\r\n", PublishDataBatbuf);
000736  4a2e              LDR      r2,|L2.2032|
000738  f2af21e0          ADR      r1,|L2.1116|
00073c  4816              LDR      r0,|L2.1944|
00073e  f7fffffe          BL       USART_OUT
;;;391    			ret = gprs_send_at(PublishDataBatbuf, ">", 300, 0);
000742  2300              MOVS     r3,#0
000744  f44f7296          MOV      r2,#0x12c
000748  f2af21e4          ADR      r1,|L2.1128|
00074c  4828              LDR      r0,|L2.2032|
00074e  f7fffffe          BL       gprs_send_at
000752  4604              MOV      r4,r0
;;;392    			if(ret != NULL)
000754  b184              CBZ      r4,|L2.1912|
;;;393    			{
;;;394    
;;;395    				tmp[0] = 0x30;
000756  2030              MOVS     r0,#0x30
000758  4908              LDR      r1,|L2.1916|
00075a  7008              STRB     r0,[r1,#0]
;;;396    				ret = gprs_send_at(tmp, "OK", 300, 0);
00075c  2300              MOVS     r3,#0
00075e  f44f7296          MOV      r2,#0x12c
000762  f2af21a0          ADR      r1,|L2.1220|
000766  4805              LDR      r0,|L2.1916|
000768  f7fffffe          BL       gprs_send_at
00076c  4604              MOV      r4,r0
;;;397    				if(ret != NULL)
;;;398    				{
;;;399    					
;;;400    				}
;;;401    				memset(PublishDataBatbuf, 0, 512);
00076e  f44f7100          MOV      r1,#0x200
000772  481f              LDR      r0,|L2.2032|
000774  f7fffffe          BL       __aeabi_memclr
                  |L2.1912|
000778  e450              B        |L2.28|
;;;402    			}
;;;403    		
;;;404    		}
;;;405    		
;;;406    //
;;;407    	}	 
;;;408    }
;;;409     
                          ENDP

00077a  0000              DCW      0x0000
                  |L2.1916|
                          DCD      tmp
                  |L2.1920|
                          DCD      Lock_Close
                  |L2.1924|
000784  42424220          DCB      "BBB Lock_Close\r\n",0
000788  4c6f636b
00078c  5f436c6f
000790  73650d0a
000794  00      
000795  00                DCB      0
000796  00                DCB      0
000797  00                DCB      0
                  |L2.1944|
                          DCD      0x40013800
                  |L2.1948|
                          DCD      0x40010800
                  |L2.1952|
0007a0  42424220          DCB      "BBB lock_close\r\n",0
0007a4  6c6f636b
0007a8  5f636c6f
0007ac  73650d0a
0007b0  00      
0007b1  00                DCB      0
0007b2  00                DCB      0
0007b3  00                DCB      0
                  |L2.1972|
0007b4  42424220          DCB      "BBB lock_stop\r\n",0
0007b8  6c6f636b
0007bc  5f73746f
0007c0  700d0a00
                  |L2.1988|
                          DCD      PARK_LOCK_Buffer
                  |L2.1992|
                          DCD      PublishLockBackbuf
                  |L2.1996|
                          DCD      expressText
                  |L2.2000|
                          DCD      cipherText
                  |L2.2004|
0007d4  3000              DCB      "0",0
0007d6  00                DCB      0
0007d7  00                DCB      0
                  |L2.2008|
0007d8  3200              DCB      "2",0
0007da  00                DCB      0
0007db  00                DCB      0
                  |L2.2012|
0007dc  64646464          DCB      "ddddd\r\n",0
0007e0  640d0a00
                  |L2.2020|
                          DCD      0x40011000
                  |L2.2024|
0007e8  62626262          DCB      "bbbbb\r\n",0
0007ec  620d0a00
                  |L2.2032|
                          DCD      PublishDataBatbuf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  USART1_TX_BUF
                          %        512
                  cipherText
                          %        512
                  receiveText
                          %        24
                  expressText
                          %        512
                  aesKey
                          %        16
                  PublishLockBackbuf
                          %        35
                  PublishDataBatbuf
                          %        35
                  PublishDataGpsbuf
                          %        45
                  PublishDataSelfCheckbuf
                          %        35
                  gpsx
                          %        166
                  longitudedtbuf
                          %        30
                  latitudedtbuf
                          %        30
                  dtbuf
                          %        50
                  self_calendar
                          %        10
                  lockbuf
                          %        16
                  lockbuff
                          %        16
                  protocol_buff
                          %        512
                  tmp
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  Gps_Longi_At24C
                          %        8
                  Gps_Lati_At24C
                          DCD      0x00000000
00000c  000000            DCB      0x00,0x00,0x00
                  Gps_Longi_At24C_Read
00000f  00                DCB      0x00
                          DCD      0x00000000
000014  000000            DCB      0x00,0x00,0x00
                  Gps_Lati_At24C_Read
000017  00                DCB      0x00
                          DCD      0x00000000
00001c  00000000          DCB      0x00,0x00,0x00,0x00
                  Gps_longi
                          DCD      0x00000000
                  Gps_Lati
                          DCD      0x00000000
                  bell_flag
000028  00                DCB      0x00
                  Shaking
000029  00                DCB      0x00
                  Shaking_Alarm_Flag
00002a  0000              DCB      0x00,0x00
                  Bat_V
00002c  0000              DCB      0x00,0x00
                  Bat_Pre
00002e  0000              DCB      0x00,0x00
                  Bat_Pre_Flag
000030  00000000          DCB      0x00,0x00,0x00,0x00
                  ||p1||
                          DCD      0x00000000
                  ||p2||
                          DCD      0x00000000
                  ||p3||
                          DCD      0x00000000
                  ||p4||
                          DCD      0x00000000
                  ||p5||
                          DCD      0x00000000
                  Lock_Open
000048  00                DCB      0x00
                  Lock_Open_On
000049  00                DCB      0x00
                  Lock_Open_Off
00004a  00                DCB      0x00
                  Lock_Open_Tim5s
00004b  00                DCB      0x00
                  Lock_Close
00004c  00                DCB      0x00
                  Lock_Close_On
00004d  00                DCB      0x00
                  Lock_Close_Off
00004e  00                DCB      0x00
                  Lock_Close_Tim5s
00004f  00                DCB      0x00
                  flag
000050  04                DCB      0x04
                  second_flag
000051  00                DCB      0x00
                  LOCK_ON_flag
000052  01                DCB      0x01
                  LOCK_OFF_flag
000053  01                DCB      0x01

                  __ARM_use_no_argv EQU 0
