; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\main.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\FLib\inc -I..\CORE -I..\driver -I..\BSP -I..\SYS -I..\tplib -IE:\github\dk-lock\src\Proj\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=..\obj\main.crf ..\USER\main.c]
                          THUMB

                          AREA ||i.Gps_Msg_Show||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_c
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  Gps_Msg_Show PROC
;;;104    
;;;105    void Gps_Msg_Show(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;106    {
;;;107     	float tp;		   
;;;108     
;;;109    	tp=gpsx.longitude;	   
000002  492b              LDR      r1,|L1.176|
000004  f8d10086          LDR      r0,[r1,#0x86]  ; gpsx
000008  f7fffffe          BL       __aeabi_ui2f
00000c  4607              MOV      r7,r0
;;;110    	sprintf((char *)longitudedtbuf,"%clongitude%c:%.5f %1c",'"','"',tp/=100000,gpsx.ewhemi);	
00000e  4929              LDR      r1,|L1.180|
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       __aeabi_fdiv
000016  4607              MOV      r7,r0
000018  4604              MOV      r4,r0
00001a  f7fffffe          BL       __aeabi_f2d
00001e  4605              MOV      r5,r0
000020  4823              LDR      r0,|L1.176|
000022  f890008a          LDRB     r0,[r0,#0x8a]  ; gpsx
000026  2322              MOVS     r3,#0x22
000028  461a              MOV      r2,r3
00002a  e9cd5100          STRD     r5,r1,[sp,#0]
00002e  9002              STR      r0,[sp,#8]
000030  a121              ADR      r1,|L1.184|
000032  4827              LDR      r0,|L1.208|
000034  f7fffffe          BL       __2sprintf
;;;111    	//USART_OUT("%s\r\n",dtbuf);	 	
;;;112    	USART_OUT(USART1,"%s\r\n",longitudedtbuf);	
000038  4a25              LDR      r2,|L1.208|
00003a  a126              ADR      r1,|L1.212|
00003c  4827              LDR      r0,|L1.220|
00003e  f7fffffe          BL       USART_OUT
;;;113    	tp=gpsx.latitude;	   
000042  491b              LDR      r1,|L1.176|
000044  f8d10081          LDR      r0,[r1,#0x81]  ; gpsx
000048  f7fffffe          BL       __aeabi_ui2f
00004c  4607              MOV      r7,r0
;;;114    	sprintf((char *)latitudedtbuf,"%clatitude%c:%.5f %1c",'"','"',tp/=100000,gpsx.nshemi);	
00004e  4919              LDR      r1,|L1.180|
000050  4638              MOV      r0,r7
000052  f7fffffe          BL       __aeabi_fdiv
000056  4607              MOV      r7,r0
000058  4604              MOV      r4,r0
00005a  f7fffffe          BL       __aeabi_f2d
00005e  4605              MOV      r5,r0
000060  4813              LDR      r0,|L1.176|
000062  f8900085          LDRB     r0,[r0,#0x85]  ; gpsx
000066  2322              MOVS     r3,#0x22
000068  461a              MOV      r2,r3
00006a  e9cd5100          STRD     r5,r1,[sp,#0]
00006e  9002              STR      r0,[sp,#8]
000070  a11b              ADR      r1,|L1.224|
000072  4821              LDR      r0,|L1.248|
000074  f7fffffe          BL       __2sprintf
;;;115    	USART_OUT(USART1,"%s\r\n",latitudedtbuf);
000078  4a1f              LDR      r2,|L1.248|
00007a  a116              ADR      r1,|L1.212|
00007c  4817              LDR      r0,|L1.220|
00007e  f7fffffe          BL       USART_OUT
;;;116    	tp=gpsx.altitude;	   
000082  490b              LDR      r1,|L1.176|
000084  f8d100a0          LDR      r0,[r1,#0xa0]  ; gpsx
000088  f7fffffe          BL       __aeabi_i2f
00008c  4607              MOV      r7,r0
;;;117     	sprintf((char *)dtbuf,"Altitude:%.1fm     ",tp/=10);	    			
00008e  491b              LDR      r1,|L1.252|
000090  4638              MOV      r0,r7
000092  f7fffffe          BL       __aeabi_fdiv
000096  4607              MOV      r7,r0
000098  4604              MOV      r4,r0
00009a  f7fffffe          BL       __aeabi_f2d
00009e  4605              MOV      r5,r0
0000a0  462a              MOV      r2,r5
0000a2  460b              MOV      r3,r1
0000a4  a116              ADR      r1,|L1.256|
0000a6  481b              LDR      r0,|L1.276|
0000a8  f7fffffe          BL       __2sprintf
;;;118    }
0000ac  bdfe              POP      {r1-r7,pc}
;;;119    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L1.176|
                          DCD      gpsx
                  |L1.180|
                          DCD      0x47c35000
                  |L1.184|
0000b8  25636c6f          DCB      "%clongitude%c:%.5f %1c",0
0000bc  6e676974
0000c0  75646525
0000c4  633a252e
0000c8  35662025
0000cc  316300  
0000cf  00                DCB      0
                  |L1.208|
                          DCD      longitudedtbuf
                  |L1.212|
0000d4  25730d0a          DCB      "%s\r\n",0
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L1.220|
                          DCD      0x40013800
                  |L1.224|
0000e0  25636c61          DCB      "%clatitude%c:%.5f %1c",0
0000e4  74697475
0000e8  64652563
0000ec  3a252e35
0000f0  66202531
0000f4  6300    
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L1.248|
                          DCD      latitudedtbuf
                  |L1.252|
                          DCD      0x41200000
                  |L1.256|
000100  416c7469          DCB      "Altitude:%.1fm     ",0
000104  74756465
000108  3a252e31
00010c  666d2020
000110  20202000
                  |L1.276|
                          DCD      dtbuf

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  main PROC
;;;121    
;;;122    int main(void)
000000  b086              SUB      sp,sp,#0x18
;;;123    { 
;;;124    	u16 j,i,rxlen;
;;;125    	u16 k=0;
000002  bf00              NOP      
;;;126    	u8 upload=0; 
000004  bf00              NOP      
;;;127    	u8 *ret;
;;;128    //	u8 *ret1, ret2;
;;;129    	
;;;130    	
;;;131    	
;;;132    	
;;;133    	bsp_init();
000006  f7fffffe          BL       bsp_init
;;;134    
;;;135    
;;;136    	USART_OUT(USART1, "uart1 is ok\r\n");
00000a  a1f9              ADR      r1,|L2.1008|
00000c  48fc              LDR      r0,|L2.1024|
00000e  f7fffffe          BL       USART_OUT
;;;137    	
;;;138    	
;;;139    	USART_OUT(USART1, "wangzhongya\r\n");
000012  a1fc              ADR      r1,|L2.1028|
000014  48fa              LDR      r0,|L2.1024|
000016  f7fffffe          BL       USART_OUT
;;;140    	
;;;141    	MOTOA_HIGH();
00001a  2101              MOVS     r1,#1
00001c  48fd              LDR      r0,|L2.1044|
00001e  f7fffffe          BL       GPIO_SetBits
;;;142    	MOTOB_HIGH();
000022  2102              MOVS     r1,#2
000024  48fb              LDR      r0,|L2.1044|
000026  f7fffffe          BL       GPIO_SetBits
;;;143    
;;;144    	while(1)
00002a  e332              B        |L2.1682|
                  |L2.44|
;;;145    	{	 
;;;146    
;;;147    		while(1)
00002c  e006              B        |L2.60|
                  |L2.46|
;;;148    		{
;;;149    			gprs_config();
00002e  f7fffffe          BL       gprs_config
;;;150    			if(gprs_status == 255)
000032  48f9              LDR      r0,|L2.1048|
000034  7800              LDRB     r0,[r0,#0]  ; gprs_status
000036  28ff              CMP      r0,#0xff
000038  d100              BNE      |L2.60|
;;;151    			{
;;;152    				break;
00003a  e000              B        |L2.62|
                  |L2.60|
00003c  e7f7              B        |L2.46|
                  |L2.62|
00003e  bf00              NOP      
;;;153    			}
;;;154    		}
;;;155    		usart1_recv_data();
000040  f7fffffe          BL       usart1_recv_data
;;;156    		usart2_recv_data();
000044  f7fffffe          BL       usart2_recv_data
;;;157    		
;;;158    		
;;;159    		
;;;160    		MOTOA_LOW();
000048  2101              MOVS     r1,#1
00004a  48f2              LDR      r0,|L2.1044|
00004c  f7fffffe          BL       GPIO_ResetBits
;;;161    		timer_delay_1ms(200);
000050  20c8              MOVS     r0,#0xc8
000052  f7fffffe          BL       timer_delay_1ms
;;;162    		MOTOB_HIGH();
000056  2102              MOVS     r1,#2
000058  48ee              LDR      r0,|L2.1044|
00005a  f7fffffe          BL       GPIO_SetBits
;;;163    		
;;;164    		
;;;165    		MakeFile_MD5_Checksum(PARK_LOCK_Buffer, 16);
00005e  2110              MOVS     r1,#0x10
000060  48ee              LDR      r0,|L2.1052|
000062  f7fffffe          BL       MakeFile_MD5_Checksum
;;;166    	
;;;167    		// µÁ≥ÿ–≈œ¢
;;;168    		Bat_V =Get_Adc_Average(ADC_Channel_0,10);
000066  210a              MOVS     r1,#0xa
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       Get_Adc_Average
00006e  49ec              LDR      r1,|L2.1056|
000070  8008              STRH     r0,[r1,#0]
;;;169    		Bat_V=Bat_V*3300/4096;
000072  8809              LDRH     r1,[r1,#0]  ; Bat_V
000074  f64042e4          MOV      r2,#0xce4
000078  fb01f002          MUL      r0,r1,r2
00007c  17c1              ASRS     r1,r0,#31
00007e  eb005111          ADD      r1,r0,r1,LSR #20
000082  f3c1310f          UBFX     r1,r1,#12,#16
000086  4ae6              LDR      r2,|L2.1056|
000088  8011              STRH     r1,[r2,#0]
;;;170    		Bat_V=Bat_V*88/20;
00008a  4610              MOV      r0,r2
00008c  8800              LDRH     r0,[r0,#0]  ; Bat_V
00008e  2158              MOVS     r1,#0x58
000090  4348              MULS     r0,r1,r0
000092  2114              MOVS     r1,#0x14
000094  fb90f0f1          SDIV     r0,r0,r1
000098  4611              MOV      r1,r2
00009a  8008              STRH     r0,[r1,#0]
;;;171    		Bat_Pre=(Bat_V-5000)*100/2400;
00009c  4608              MOV      r0,r1
00009e  8800              LDRH     r0,[r0,#0]  ; Bat_V
0000a0  f5a05098          SUB      r0,r0,#0x1300
0000a4  3888              SUBS     r0,r0,#0x88
0000a6  2164              MOVS     r1,#0x64
0000a8  4348              MULS     r0,r1,r0
0000aa  f44f6116          MOV      r1,#0x960
0000ae  fb90f0f1          SDIV     r0,r0,r1
0000b2  49dc              LDR      r1,|L2.1060|
0000b4  8008              STRH     r0,[r1,#0]
;;;172    		
;;;173    		if(timer_is_timeout_1ms(tim1_cnt, 30000) == 0)
0000b6  f2475130          MOV      r1,#0x7530
0000ba  2000              MOVS     r0,#0
0000bc  f7fffffe          BL       timer_is_timeout_1ms
0000c0  2800              CMP      r0,#0
0000c2  d17d              BNE      |L2.448|
;;;174    		{
;;;175    			
;;;176     		
;;;177    			sprintf((char *)PublishDataBatbuf,"%s%s%s","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",1,2\r\n");
0000c4  a0d8              ADR      r0,|L2.1064|
0000c6  4bd5              LDR      r3,|L2.1052|
0000c8  a2d9              ADR      r2,|L2.1072|
0000ca  a1df              ADR      r1,|L2.1096|
0000cc  9000              STR      r0,[sp,#0]
0000ce  48e0              LDR      r0,|L2.1104|
0000d0  f7fffffe          BL       __2sprintf
;;;178    			USART_OUT(USART1, "ssss=%s\r\n", PublishDataBatbuf);
0000d4  4ade              LDR      r2,|L2.1104|
0000d6  a1df              ADR      r1,|L2.1108|
0000d8  48c9              LDR      r0,|L2.1024|
0000da  f7fffffe          BL       USART_OUT
;;;179    			ret = gprs_send_at(PublishDataBatbuf, ">", 300, 0);
0000de  2300              MOVS     r3,#0
0000e0  f44f7296          MOV      r2,#0x12c
0000e4  a1de              ADR      r1,|L2.1120|
0000e6  48da              LDR      r0,|L2.1104|
0000e8  f7fffffe          BL       gprs_send_at
0000ec  4604              MOV      r4,r0
;;;180    			if(ret != NULL)
0000ee  2c00              CMP      r4,#0
0000f0  d038              BEQ      |L2.356|
;;;181    			{
;;;182    				memset(expressText, 0 ,512);
0000f2  f44f7100          MOV      r1,#0x200
0000f6  48db              LDR      r0,|L2.1124|
0000f8  f7fffffe          BL       __aeabi_memclr
;;;183    				memset(cipherText, 0 ,512);
0000fc  f44f7100          MOV      r1,#0x200
000100  48d9              LDR      r0,|L2.1128|
000102  f7fffffe          BL       __aeabi_memclr
;;;184    				sprintf((char *)expressText,"{%c%s%c:%s}",'"',"battery",'"',"20");
000106  a0d9              ADR      r0,|L2.1132|
000108  2122              MOVS     r1,#0x22
00010a  a3d9              ADR      r3,|L2.1136|
00010c  460a              MOV      r2,r1
00010e  e9cd1000          STRD     r1,r0,[sp,#0]
000112  a1d9              ADR      r1,|L2.1144|
000114  48d3              LDR      r0,|L2.1124|
000116  f7fffffe          BL       __2sprintf
;;;185    				USART_OUT(USART1, "expressText=%s\r\n", expressText);
00011a  4ad2              LDR      r2,|L2.1124|
00011c  a1d9              ADR      r1,|L2.1156|
00011e  48b8              LDR      r0,|L2.1024|
000120  f7fffffe          BL       USART_OUT
;;;186    //				AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;187    				USART_OUT(USART1, "aesKey=%s\r\n", aesKey);
000124  4adc              LDR      r2,|L2.1176|
000126  a1dd              ADR      r1,|L2.1180|
000128  48b5              LDR      r0,|L2.1024|
00012a  f7fffffe          BL       USART_OUT
;;;188    				USART_OUT(USART1, "cipherText=%s\r\n", cipherText);
00012e  4ace              LDR      r2,|L2.1128|
000130  a1dd              ADR      r1,|L2.1192|
000132  48b3              LDR      r0,|L2.1024|
000134  f7fffffe          BL       USART_OUT
;;;189    				memset(tmp, 0, 20);
000138  2114              MOVS     r1,#0x14
00013a  48df              LDR      r0,|L2.1208|
00013c  f7fffffe          BL       __aeabi_memclr
;;;190    				cipherText[0] = 0x31;
000140  2031              MOVS     r0,#0x31
000142  49c9              LDR      r1,|L2.1128|
000144  7008              STRB     r0,[r1,#0]
;;;191    				tmp[0] = 0x31;
000146  49dc              LDR      r1,|L2.1208|
000148  7008              STRB     r0,[r1,#0]
;;;192    				ret = gprs_send_at(tmp, "OK", 300, 0);
00014a  2300              MOVS     r3,#0
00014c  f44f7296          MOV      r2,#0x12c
000150  a1da              ADR      r1,|L2.1212|
000152  48d9              LDR      r0,|L2.1208|
000154  f7fffffe          BL       gprs_send_at
000158  4604              MOV      r4,r0
;;;193    				if(ret != NULL)
;;;194    				{
;;;195    					
;;;196    				}
;;;197    				memset(PublishDataBatbuf, 0, 512);
00015a  f44f7100          MOV      r1,#0x200
00015e  48bc              LDR      r0,|L2.1104|
000160  f7fffffe          BL       __aeabi_memclr
                  |L2.356|
;;;198    			}
;;;199    //			
;;;200    			if(Bat_Pre<10&&Bat_Pre_Flag==1)
000164  48af              LDR      r0,|L2.1060|
000166  8800              LDRH     r0,[r0,#0]  ; Bat_Pre
000168  280a              CMP      r0,#0xa
00016a  da3b              BGE      |L2.484|
00016c  48d4              LDR      r0,|L2.1216|
00016e  7800              LDRB     r0,[r0,#0]  ; Bat_Pre_Flag
000170  2801              CMP      r0,#1
000172  d137              BNE      |L2.484|
;;;201    			{
;;;202    				Bat_Pre_Flag=0;
000174  2000              MOVS     r0,#0
000176  49d2              LDR      r1,|L2.1216|
000178  7008              STRB     r0,[r1,#0]
;;;203    				sprintf((char *)PublishDataBatbuf,"%s%s%","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",36,2\r\n");
00017a  a0d2              ADR      r0,|L2.1220|
00017c  4ba7              LDR      r3,|L2.1052|
00017e  a2ac              ADR      r2,|L2.1072|
000180  a1d2              ADR      r1,|L2.1228|
000182  9000              STR      r0,[sp,#0]
000184  48b2              LDR      r0,|L2.1104|
000186  f7fffffe          BL       __2sprintf
;;;204    				USART_OUT(USART1, "wangzhongya=%s\r\n", PublishDataBatbuf);
00018a  4ab1              LDR      r2,|L2.1104|
00018c  a1d1              ADR      r1,|L2.1236|
00018e  489c              LDR      r0,|L2.1024|
000190  f7fffffe          BL       USART_OUT
;;;205    				ret = gprs_send_at(PublishDataBatbuf, ">", 300, 0);
000194  2300              MOVS     r3,#0
000196  f44f7296          MOV      r2,#0x12c
00019a  a1b1              ADR      r1,|L2.1120|
00019c  48ac              LDR      r0,|L2.1104|
00019e  f7fffffe          BL       gprs_send_at
0001a2  4604              MOV      r4,r0
;;;206    				if(ret != NULL)
0001a4  b164              CBZ      r4,|L2.448|
;;;207    				{
;;;208    					memset(expressText, 0 ,512);
0001a6  f44f7100          MOV      r1,#0x200
0001aa  48ae              LDR      r0,|L2.1124|
0001ac  f7fffffe          BL       __aeabi_memclr
;;;209    					memset(cipherText, 0 ,512);
0001b0  f44f7100          MOV      r1,#0x200
0001b4  48ac              LDR      r0,|L2.1128|
0001b6  f7fffffe          BL       __aeabi_memclr
;;;210    					sprintf((char *)expressText,"{%c%s%c:%s}",'"',"battery",'"',"20");
0001ba  a0ac              ADR      r0,|L2.1132|
0001bc  2122              MOVS     r1,#0x22
0001be  e000              B        |L2.450|
                  |L2.448|
0001c0  e010              B        |L2.484|
                  |L2.450|
0001c2  a3ab              ADR      r3,|L2.1136|
0001c4  460a              MOV      r2,r1
0001c6  e9cd1000          STRD     r1,r0,[sp,#0]
0001ca  a1ab              ADR      r1,|L2.1144|
0001cc  48a5              LDR      r0,|L2.1124|
0001ce  f7fffffe          BL       __2sprintf
;;;211    //					AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;212    					ret = gprs_send_at(cipherText, "OK", 300, 0);
0001d2  2300              MOVS     r3,#0
0001d4  f44f7296          MOV      r2,#0x12c
0001d8  a1b8              ADR      r1,|L2.1212|
0001da  48a3              LDR      r0,|L2.1128|
0001dc  f7fffffe          BL       gprs_send_at
0001e0  4604              MOV      r4,r0
;;;213    					if(ret == NULL)
0001e2  bf00              NOP      
                  |L2.484|
;;;214    					{
;;;215    						
;;;216    					}
;;;217    				}
;;;218    			}
;;;219    		}
;;;220    //		///
;;;221    		p1 = strstr((u8*)protocol_buff, "topic: lock/");
0001e4  a1c0              ADR      r1,|L2.1256|
0001e6  48c4              LDR      r0,|L2.1272|
0001e8  f7fffffe          BL       strstr
0001ec  49c3              LDR      r1,|L2.1276|
0001ee  6008              STR      r0,[r1,#0]  ; p1
;;;222    		p2 = strstr((u8 *)p1,(u8 *)PARK_LOCK_Buffer);
0001f0  498a              LDR      r1,|L2.1052|
0001f2  48c2              LDR      r0,|L2.1276|
0001f4  6800              LDR      r0,[r0,#0]  ; p1
0001f6  f7fffffe          BL       strstr
0001fa  49c1              LDR      r1,|L2.1280|
0001fc  6008              STR      r0,[r1,#0]  ; p2
;;;223    		if(strncmp((char *)p1,(char *)"topic: lock/",12)==0)
0001fe  220c              MOVS     r2,#0xc
000200  a1b9              ADR      r1,|L2.1256|
000202  48be              LDR      r0,|L2.1276|
000204  6800              LDR      r0,[r0,#0]  ; p1
000206  f7fffffe          BL       strncmp
00020a  2800              CMP      r0,#0
00020c  d152              BNE      |L2.692|
;;;224    		{
;;;225    			USART_OUT(USART1, "lock\r\n");
00020e  a1bd              ADR      r1,|L2.1284|
000210  487b              LDR      r0,|L2.1024|
000212  f7fffffe          BL       USART_OUT
;;;226    			
;;;227     			if((ALARM_LOCK_ON() == 0) || (ALARM_LOCK_OFF() == 0))
000216  2110              MOVS     r1,#0x10
000218  48bc              LDR      r0,|L2.1292|
00021a  f7fffffe          BL       GPIO_ReadInputDataBit
00021e  b128              CBZ      r0,|L2.556|
000220  2120              MOVS     r1,#0x20
000222  48ba              LDR      r0,|L2.1292|
000224  f7fffffe          BL       GPIO_ReadInputDataBit
000228  2800              CMP      r0,#0
00022a  d143              BNE      |L2.692|
                  |L2.556|
;;;228    			{
;;;229    				memset(receiveText ,0 , 512);
00022c  f44f7100          MOV      r1,#0x200
000230  48b7              LDR      r0,|L2.1296|
000232  f7fffffe          BL       __aeabi_memclr
;;;230    				memset(expressText ,0 , 512);
000236  f44f7100          MOV      r1,#0x200
00023a  488a              LDR      r0,|L2.1124|
00023c  f7fffffe          BL       __aeabi_memclr
;;;231    				
;;;232    				strcpy((char*)receiveText ,(char *)(p1+32));
000240  48ae              LDR      r0,|L2.1276|
000242  6801              LDR      r1,[r0,#0]  ; p1
000244  3120              ADDS     r1,r1,#0x20
000246  48b2              LDR      r0,|L2.1296|
000248  f7fffffe          BL       strcpy
;;;233    //				AES_Decrypt((char*)expressText, (char*)receiveText, (char*)aesKey);
;;;234    				Shaking=1;
00024c  2001              MOVS     r0,#1
00024e  49b1              LDR      r1,|L2.1300|
000250  7008              STRB     r0,[r1,#0]
;;;235    				if(*receiveText==0x31)
000252  48af              LDR      r0,|L2.1296|
000254  7800              LDRB     r0,[r0,#0]  ; receiveText
000256  2831              CMP      r0,#0x31
000258  d10e              BNE      |L2.632|
;;;236    				{
;;;237    					if(ALARM_LOCK_ON() == 0)
00025a  2110              MOVS     r1,#0x10
00025c  48ab              LDR      r0,|L2.1292|
00025e  f7fffffe          BL       GPIO_ReadInputDataBit
000262  b928              CBNZ     r0,|L2.624|
;;;238    					{
;;;239    						Lock_Open=1;
000264  2001              MOVS     r0,#1
000266  49ac              LDR      r1,|L2.1304|
000268  7008              STRB     r0,[r1,#0]
;;;240    						Lock_Open_On=1;
00026a  49ac              LDR      r1,|L2.1308|
00026c  7008              STRB     r0,[r1,#0]
00026e  e01c              B        |L2.682|
                  |L2.624|
;;;241    						
;;;242    					}
;;;243    					else
;;;244    					{
;;;245    						Lock_Open=0;
000270  2000              MOVS     r0,#0
000272  49a9              LDR      r1,|L2.1304|
000274  7008              STRB     r0,[r1,#0]
000276  e018              B        |L2.682|
                  |L2.632|
;;;246    					}
;;;247    				}
;;;248    				else if(*receiveText==0x32)
000278  48a5              LDR      r0,|L2.1296|
00027a  7800              LDRB     r0,[r0,#0]  ; receiveText
00027c  2832              CMP      r0,#0x32
00027e  d10e              BNE      |L2.670|
;;;249    				{
;;;250    					if(ALARM_LOCK_OFF() == 0)
000280  2120              MOVS     r1,#0x20
000282  48a2              LDR      r0,|L2.1292|
000284  f7fffffe          BL       GPIO_ReadInputDataBit
000288  b928              CBNZ     r0,|L2.662|
;;;251    					{
;;;252    						Lock_Close=1;
00028a  2001              MOVS     r0,#1
00028c  49a4              LDR      r1,|L2.1312|
00028e  7008              STRB     r0,[r1,#0]
;;;253    						Lock_Close_On=1;
000290  49a4              LDR      r1,|L2.1316|
000292  7008              STRB     r0,[r1,#0]
000294  e009              B        |L2.682|
                  |L2.662|
;;;254    					}
;;;255    					else
;;;256    					{
;;;257    						Lock_Close=0;
000296  2000              MOVS     r0,#0
000298  49a1              LDR      r1,|L2.1312|
00029a  7008              STRB     r0,[r1,#0]
00029c  e005              B        |L2.682|
                  |L2.670|
;;;258    					}
;;;259    				
;;;260    				}
;;;261    				else if(*receiveText == 0x30)
00029e  489c              LDR      r0,|L2.1296|
0002a0  7800              LDRB     r0,[r0,#0]  ; receiveText
0002a2  2830              CMP      r0,#0x30
0002a4  d101              BNE      |L2.682|
;;;262    				{
;;;263    					Park_Lock_stop();
0002a6  f7fffffe          BL       Park_Lock_stop
                  |L2.682|
;;;264    				}
;;;265    				
;;;266    				memset(protocol_buff, 0, 512);	
0002aa  f44f7100          MOV      r1,#0x200
0002ae  4892              LDR      r0,|L2.1272|
0002b0  f7fffffe          BL       __aeabi_memclr
                  |L2.692|
;;;267    				
;;;268    			}
;;;269    		}
;;;270    //		//
;;;271    //		if((ALARM_LOCK_ON() == 1) || (ALARM_LOCK_OFF() == 1))
;;;272    //		{
;;;273    //			
;;;274    //		}
;;;275    //		
;;;276    		p1 = strstr((char*)protocol_buff, "topic: bell/");
0002b4  a19c              ADR      r1,|L2.1320|
0002b6  4890              LDR      r0,|L2.1272|
0002b8  f7fffffe          BL       strstr
0002bc  498f              LDR      r1,|L2.1276|
0002be  6008              STR      r0,[r1,#0]  ; p1
;;;277    		p2 = strstr((char *)p1,(char *)PARK_LOCK_Buffer);
0002c0  4956              LDR      r1,|L2.1052|
0002c2  488e              LDR      r0,|L2.1276|
0002c4  6800              LDR      r0,[r0,#0]  ; p1
0002c6  f7fffffe          BL       strstr
0002ca  498d              LDR      r1,|L2.1280|
0002cc  6008              STR      r0,[r1,#0]  ; p2
;;;278    		if(strncmp((char *)p1,(char *)"topic: bell/",12)==0 && bell_flag==0)
0002ce  220c              MOVS     r2,#0xc
0002d0  a195              ADR      r1,|L2.1320|
0002d2  488a              LDR      r0,|L2.1276|
0002d4  6800              LDR      r0,[r0,#0]  ; p1
0002d6  f7fffffe          BL       strncmp
0002da  b9a8              CBNZ     r0,|L2.776|
0002dc  4896              LDR      r0,|L2.1336|
0002de  7800              LDRB     r0,[r0,#0]  ; bell_flag
0002e0  b990              CBNZ     r0,|L2.776|
;;;279    		{
;;;280    			USART_OUT(USART1, "bell\r\n");
0002e2  a196              ADR      r1,|L2.1340|
0002e4  4846              LDR      r0,|L2.1024|
0002e6  f7fffffe          BL       USART_OUT
;;;281    		
;;;282    			
;;;283    			bell_flag=1;
0002ea  2001              MOVS     r0,#1
0002ec  4992              LDR      r1,|L2.1336|
0002ee  7008              STRB     r0,[r1,#0]
;;;284    			
;;;285    			BEEP_HIGH();
0002f0  2108              MOVS     r1,#8
0002f2  4848              LDR      r0,|L2.1044|
0002f4  f7fffffe          BL       GPIO_SetBits
;;;286    			timer_delay_1ms(500);
0002f8  f44f70fa          MOV      r0,#0x1f4
0002fc  f7fffffe          BL       timer_delay_1ms
;;;287    			BEEP_LOW();
000300  2108              MOVS     r1,#8
000302  4844              LDR      r0,|L2.1044|
000304  f7fffffe          BL       GPIO_ResetBits
                  |L2.776|
;;;288    		}
;;;289    		
;;;290    		
;;;291    		if(bell_flag == 1)
000308  488b              LDR      r0,|L2.1336|
00030a  7800              LDRB     r0,[r0,#0]  ; bell_flag
00030c  2801              CMP      r0,#1
00030e  d102              BNE      |L2.790|
;;;292    		{
;;;293    			bell_flag = 0;
000310  2000              MOVS     r0,#0
000312  4989              LDR      r1,|L2.1336|
000314  7008              STRB     r0,[r1,#0]
                  |L2.790|
;;;294    		}
;;;295    		
;;;296    		
;;;297    		if(Lock_Open==1) 
000316  4880              LDR      r0,|L2.1304|
000318  7800              LDRB     r0,[r0,#0]  ; Lock_Open
00031a  2801              CMP      r0,#1
00031c  d104              BNE      |L2.808|
;;;298    		{
;;;299    			Lock_Open=0;
00031e  2000              MOVS     r0,#0
000320  497d              LDR      r1,|L2.1304|
000322  7008              STRB     r0,[r1,#0]
;;;300    			
;;;301    			Park_Lock_Open();
000324  f7fffffe          BL       Park_Lock_Open
                  |L2.808|
;;;302    		}
;;;303    		
;;;304    		if(Lock_Close == 1)
000328  487d              LDR      r0,|L2.1312|
00032a  7800              LDRB     r0,[r0,#0]  ; Lock_Close
00032c  2801              CMP      r0,#1
00032e  d104              BNE      |L2.826|
;;;305    		{
;;;306    			Lock_Close=0;
000330  2000              MOVS     r0,#0
000332  497b              LDR      r1,|L2.1312|
000334  7008              STRB     r0,[r1,#0]
;;;307    		
;;;308    			Park_Lock_Close();
000336  f7fffffe          BL       Park_Lock_Close
                  |L2.826|
;;;309    			
;;;310    		}
;;;311    		
;;;312    		
;;;313    		
;;;314    		
;;;315    		if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0 && Lock_Open == 1)
00033a  2110              MOVS     r1,#0x10
00033c  4873              LDR      r0,|L2.1292|
00033e  f7fffffe          BL       GPIO_ReadInputDataBit
000342  2801              CMP      r0,#1
                  |L2.836|
000344  d153              BNE      |L2.1006|
000346  2120              MOVS     r1,#0x20
000348  4870              LDR      r0,|L2.1292|
00034a  f7fffffe          BL       GPIO_ReadInputDataBit
00034e  2800              CMP      r0,#0
000350  d1f8              BNE      |L2.836|
000352  4871              LDR      r0,|L2.1304|
000354  7800              LDRB     r0,[r0,#0]  ; Lock_Open
000356  2801              CMP      r0,#1
000358  d1f4              BNE      |L2.836|
;;;316    		{
;;;317    			
;;;318    			Park_Lock_Open();	//ø™À¯
00035a  f7fffffe          BL       Park_Lock_Open
;;;319    			if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1)
00035e  2110              MOVS     r1,#0x10
000360  486a              LDR      r0,|L2.1292|
000362  f7fffffe          BL       GPIO_ReadInputDataBit
000366  2800              CMP      r0,#0
000368  d141              BNE      |L2.1006|
00036a  2120              MOVS     r1,#0x20
00036c  4867              LDR      r0,|L2.1292|
00036e  f7fffffe          BL       GPIO_ReadInputDataBit
000372  2801              CMP      r0,#1
000374  d13b              BNE      |L2.1006|
;;;320    			{
;;;321    				Lock_Open = 0;
000376  2000              MOVS     r0,#0
000378  4967              LDR      r1,|L2.1304|
00037a  7008              STRB     r0,[r1,#0]
;;;322    				Park_Lock_stop();	//Õ£÷π‘À––
00037c  f7fffffe          BL       Park_Lock_stop
;;;323    				
;;;324    				sprintf((char *)PublishLockBackbuf,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
000380  a070              ADR      r0,|L2.1348|
000382  4b26              LDR      r3,|L2.1052|
000384  a271              ADR      r2,|L2.1356|
000386  a130              ADR      r1,|L2.1096|
000388  9000              STR      r0,[sp,#0]
00038a  4876              LDR      r0,|L2.1380|
00038c  f7fffffe          BL       __2sprintf
;;;325    				USART_OUT(USART1, "PublishLockBackbuf=%s\r\n", PublishLockBackbuf);
000390  4a74              LDR      r2,|L2.1380|
000392  a175              ADR      r1,|L2.1384|
000394  481a              LDR      r0,|L2.1024|
000396  f7fffffe          BL       USART_OUT
;;;326    				ret = gprs_send_at(PublishLockBackbuf, ">", 300, 0);
00039a  2300              MOVS     r3,#0
00039c  f44f7296          MOV      r2,#0x12c
0003a0  a12f              ADR      r1,|L2.1120|
0003a2  4870              LDR      r0,|L2.1380|
0003a4  f7fffffe          BL       gprs_send_at
0003a8  4604              MOV      r4,r0
;;;327    				if(ret != NULL)
0003aa  b304              CBZ      r4,|L2.1006|
;;;328    				{
;;;329    					memset(expressText, 0 ,512);
0003ac  f44f7100          MOV      r1,#0x200
0003b0  482c              LDR      r0,|L2.1124|
0003b2  f7fffffe          BL       __aeabi_memclr
;;;330    					memset(cipherText, 0 ,512);
0003b6  f44f7100          MOV      r1,#0x200
0003ba  482b              LDR      r0,|L2.1128|
0003bc  f7fffffe          BL       __aeabi_memclr
;;;331    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"1",'"',"ok",'"',"1");
0003c0  a06f              ADR      r0,|L2.1408|
0003c2  2122              MOVS     r1,#0x22
0003c4  a26f              ADR      r2,|L2.1412|
0003c6  e9cd1202          STRD     r1,r2,[sp,#8]
0003ca  e9cd1004          STRD     r1,r0,[sp,#0x10]
0003ce  a06c              ADR      r0,|L2.1408|
0003d0  a36d              ADR      r3,|L2.1416|
0003d2  460a              MOV      r2,r1
0003d4  e9cd1000          STRD     r1,r0,[sp,#0]
0003d8  a16c              ADR      r1,|L2.1420|
0003da  4822              LDR      r0,|L2.1124|
0003dc  f7fffffe          BL       __2sprintf
;;;332    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
0003e0  4a20              LDR      r2,|L2.1124|
0003e2  a128              ADR      r1,|L2.1156|
0003e4  4806              LDR      r0,|L2.1024|
0003e6  f7fffffe          BL       USART_OUT
;;;333    //						AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;334    					ret = gprs_send_at(expressText, "OK", 300, 0);
0003ea  2300              MOVS     r3,#0
0003ec  e0da              B        |L2.1444|
                  |L2.1006|
0003ee  e0e2              B        |L2.1462|
                  |L2.1008|
0003f0  75617274          DCB      "uart1 is ok\r\n",0
0003f4  31206973
0003f8  206f6b0d
0003fc  0a00    
0003fe  00                DCB      0
0003ff  00                DCB      0
                  |L2.1024|
                          DCD      0x40013800
                  |L2.1028|
000404  77616e67          DCB      "wangzhongya\r\n",0
000408  7a686f6e
00040c  6779610d
000410  0a00    
000412  00                DCB      0
000413  00                DCB      0
                  |L2.1044|
                          DCD      0x40011000
                  |L2.1048|
                          DCD      gprs_status
                  |L2.1052|
                          DCD      PARK_LOCK_Buffer
                  |L2.1056|
                          DCD      Bat_V
                  |L2.1060|
                          DCD      Bat_Pre
                  |L2.1064|
000428  2c312c32          DCB      ",1,2\r\n",0
00042c  0d0a00  
00042f  00                DCB      0
                  |L2.1072|
000430  41542b50          DCB      "AT+PUBLISH=lockdata/",0
000434  55424c49
000438  53483d6c
00043c  6f636b64
000440  6174612f
000444  00      
000445  00                DCB      0
000446  00                DCB      0
000447  00                DCB      0
                  |L2.1096|
000448  25732573          DCB      "%s%s%s",0
00044c  257300  
00044f  00                DCB      0
                  |L2.1104|
                          DCD      PublishDataBatbuf
                  |L2.1108|
000454  73737373          DCB      "ssss=%s\r\n",0
000458  3d25730d
00045c  0a00    
00045e  00                DCB      0
00045f  00                DCB      0
                  |L2.1120|
000460  3e00              DCB      ">",0
000462  00                DCB      0
000463  00                DCB      0
                  |L2.1124|
                          DCD      expressText
                  |L2.1128|
                          DCD      cipherText
                  |L2.1132|
00046c  323000            DCB      "20",0
00046f  00                DCB      0
                  |L2.1136|
000470  62617474          DCB      "battery",0
000474  65727900
                  |L2.1144|
000478  7b256325          DCB      "{%c%s%c:%s}",0
00047c  7325633a
000480  25737d00
                  |L2.1156|
000484  65787072          DCB      "expressText=%s\r\n",0
000488  65737354
00048c  6578743d
000490  25730d0a
000494  00      
000495  00                DCB      0
000496  00                DCB      0
000497  00                DCB      0
                  |L2.1176|
                          DCD      aesKey
                  |L2.1180|
00049c  6165734b          DCB      "aesKey=%s\r\n",0
0004a0  65793d25
0004a4  730d0a00
                  |L2.1192|
0004a8  63697068          DCB      "cipherText=%s\r\n",0
0004ac  65725465
0004b0  78743d25
0004b4  730d0a00
                  |L2.1208|
                          DCD      tmp
                  |L2.1212|
0004bc  4f4b00            DCB      "OK",0
0004bf  00                DCB      0
                  |L2.1216|
                          DCD      Bat_Pre_Flag
                  |L2.1220|
0004c4  2c33362c          DCB      ",36,2\r\n",0
0004c8  320d0a00
                  |L2.1228|
0004cc  25732573          DCB      "%s%s%",0
0004d0  2500    
0004d2  00                DCB      0
0004d3  00                DCB      0
                  |L2.1236|
0004d4  77616e67          DCB      "wangzhongya=%s\r\n",0
0004d8  7a686f6e
0004dc  6779613d
0004e0  25730d0a
0004e4  00      
0004e5  00                DCB      0
0004e6  00                DCB      0
0004e7  00                DCB      0
                  |L2.1256|
0004e8  746f7069          DCB      "topic: lock/",0
0004ec  633a206c
0004f0  6f636b2f
0004f4  00      
0004f5  00                DCB      0
0004f6  00                DCB      0
0004f7  00                DCB      0
                  |L2.1272|
                          DCD      protocol_buff
                  |L2.1276|
                          DCD      ||p1||
                  |L2.1280|
                          DCD      ||p2||
                  |L2.1284|
000504  6c6f636b          DCB      "lock\r\n",0
000508  0d0a00  
00050b  00                DCB      0
                  |L2.1292|
                          DCD      0x40010800
                  |L2.1296|
                          DCD      receiveText
                  |L2.1300|
                          DCD      Shaking
                  |L2.1304|
                          DCD      Lock_Open
                  |L2.1308|
                          DCD      Lock_Open_On
                  |L2.1312|
                          DCD      Lock_Close
                  |L2.1316|
                          DCD      Lock_Close_On
                  |L2.1320|
000528  746f7069          DCB      "topic: bell/",0
00052c  633a2062
000530  656c6c2f
000534  00      
000535  00                DCB      0
000536  00                DCB      0
000537  00                DCB      0
                  |L2.1336|
                          DCD      bell_flag
                  |L2.1340|
00053c  62656c6c          DCB      "bell\r\n",0
000540  0d0a00  
000543  00                DCB      0
                  |L2.1348|
000544  2c34342c          DCB      ",44,2\r\n",0
000548  320d0a00
                  |L2.1356|
00054c  41542b50          DCB      "AT+PUBLISH=lockback/",0
000550  55424c49
000554  53483d6c
000558  6f636b62
00055c  61636b2f
000560  00      
000561  00                DCB      0
000562  00                DCB      0
000563  00                DCB      0
                  |L2.1380|
                          DCD      PublishLockBackbuf
                  |L2.1384|
000568  5075626c          DCB      "PublishLockBackbuf=%s\r\n",0
00056c  6973684c
000570  6f636b42
000574  61636b62
000578  75663d25
00057c  730d0a00
                  |L2.1408|
000580  3100              DCB      "1",0
000582  00                DCB      0
000583  00                DCB      0
                  |L2.1412|
000584  6f6b00            DCB      "ok",0
000587  00                DCB      0
                  |L2.1416|
000588  636d6400          DCB      "cmd",0
                  |L2.1420|
00058c  7b256325          DCB      "{%c%s%c:%s,%c%s%c:%s}",0
000590  7325633a
000594  25732c25
000598  63257325
00059c  633a2573
0005a0  7d00    
0005a2  00                DCB      0
0005a3  00                DCB      0
                  |L2.1444|
0005a4  f44f7296          MOV      r2,#0x12c
0005a8  f2af01f0          ADR      r1,|L2.1212|
0005ac  4839              LDR      r0,|L2.1684|
0005ae  f7fffffe          BL       gprs_send_at
0005b2  4604              MOV      r4,r0
;;;335    					if(ret == NULL)
0005b4  bf00              NOP      
                  |L2.1462|
;;;336    					{
;;;337    						
;;;338    					}
;;;339    				}
;;;340    				
;;;341    			}
;;;342    			
;;;343    		}
;;;344    		
;;;345    		if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1 && Lock_Close == 1)
0005b6  2110              MOVS     r1,#0x10
0005b8  4837              LDR      r0,|L2.1688|
0005ba  f7fffffe          BL       GPIO_ReadInputDataBit
0005be  2800              CMP      r0,#0
0005c0  d163              BNE      |L2.1674|
0005c2  2120              MOVS     r1,#0x20
0005c4  4834              LDR      r0,|L2.1688|
0005c6  f7fffffe          BL       GPIO_ReadInputDataBit
0005ca  2801              CMP      r0,#1
0005cc  d15d              BNE      |L2.1674|
0005ce  4833              LDR      r0,|L2.1692|
0005d0  7800              LDRB     r0,[r0,#0]  ; Lock_Close
0005d2  2801              CMP      r0,#1
0005d4  d159              BNE      |L2.1674|
;;;346    		{
;;;347    			
;;;348    			Park_Lock_Close();
0005d6  f7fffffe          BL       Park_Lock_Close
;;;349    			
;;;350    			if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0)
0005da  2110              MOVS     r1,#0x10
0005dc  482e              LDR      r0,|L2.1688|
0005de  f7fffffe          BL       GPIO_ReadInputDataBit
0005e2  2801              CMP      r0,#1
0005e4  d151              BNE      |L2.1674|
0005e6  2120              MOVS     r1,#0x20
0005e8  482b              LDR      r0,|L2.1688|
0005ea  f7fffffe          BL       GPIO_ReadInputDataBit
0005ee  2800              CMP      r0,#0
0005f0  d14b              BNE      |L2.1674|
;;;351    			{
;;;352    				Lock_Close = 0;
0005f2  492a              LDR      r1,|L2.1692|
0005f4  7008              STRB     r0,[r1,#0]
;;;353    				Park_Lock_stop();	//Õ£÷π‘À––
0005f6  f7fffffe          BL       Park_Lock_stop
;;;354    				
;;;355    				sprintf((char *)PublishLockBackbuf,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
0005fa  f2af00b8          ADR      r0,|L2.1348|
0005fe  4b28              LDR      r3,|L2.1696|
000600  f2af02b8          ADR      r2,|L2.1356|
000604  f2af11c0          ADR      r1,|L2.1096|
000608  9000              STR      r0,[sp,#0]
00060a  4826              LDR      r0,|L2.1700|
00060c  f7fffffe          BL       __2sprintf
;;;356    				USART_OUT(USART1, "PublishLockBackbuf=%s\r\n", PublishLockBackbuf);
000610  4a24              LDR      r2,|L2.1700|
000612  f2af01ac          ADR      r1,|L2.1384|
000616  4824              LDR      r0,|L2.1704|
000618  f7fffffe          BL       USART_OUT
;;;357    				ret = gprs_send_at(PublishLockBackbuf, ">", 300, 0);
00061c  2300              MOVS     r3,#0
00061e  f44f7296          MOV      r2,#0x12c
000622  f2af11c4          ADR      r1,|L2.1120|
000626  481f              LDR      r0,|L2.1700|
000628  f7fffffe          BL       gprs_send_at
00062c  4604              MOV      r4,r0
;;;358    				if(ret != NULL)
00062e  b364              CBZ      r4,|L2.1674|
;;;359    				{
;;;360    					memset(expressText, 0 ,512);
000630  f44f7100          MOV      r1,#0x200
000634  4817              LDR      r0,|L2.1684|
000636  f7fffffe          BL       __aeabi_memclr
;;;361    					memset(cipherText, 0 ,512);
00063a  f44f7100          MOV      r1,#0x200
00063e  481b              LDR      r0,|L2.1708|
000640  f7fffffe          BL       __aeabi_memclr
;;;362    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"2",'"',"ok",'"',"0");
000644  a01a              ADR      r0,|L2.1712|
000646  2122              MOVS     r1,#0x22
000648  f2af02c8          ADR      r2,|L2.1412|
00064c  e9cd1202          STRD     r1,r2,[sp,#8]
000650  e9cd1004          STRD     r1,r0,[sp,#0x10]
000654  a017              ADR      r0,|L2.1716|
000656  f2af03d0          ADR      r3,|L2.1416|
00065a  460a              MOV      r2,r1
00065c  e9cd1000          STRD     r1,r0,[sp,#0]
000660  f2af01d8          ADR      r1,|L2.1420|
000664  480b              LDR      r0,|L2.1684|
000666  f7fffffe          BL       __2sprintf
;;;363    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
00066a  4a0a              LDR      r2,|L2.1684|
00066c  f2af11ec          ADR      r1,|L2.1156|
000670  480d              LDR      r0,|L2.1704|
000672  f7fffffe          BL       USART_OUT
;;;364    //						AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;365    					ret = gprs_send_at(expressText, "OK", 300, 0);
000676  2300              MOVS     r3,#0
000678  f44f7296          MOV      r2,#0x12c
00067c  f2af11c4          ADR      r1,|L2.1212|
000680  4804              LDR      r0,|L2.1684|
000682  f7fffffe          BL       gprs_send_at
000686  4604              MOV      r4,r0
;;;366    					if(ret == NULL)
000688  bf00              NOP      
                  |L2.1674|
;;;367    					{
;;;368    						
;;;369    					}
;;;370    				}
;;;371    			}
;;;372    		}
;;;373    		
;;;374    		if(LOCK_ON_READ()==0)
00068a  2110              MOVS     r1,#0x10
00068c  4802              LDR      r0,|L2.1688|
00068e  f7fffffe          BL       GPIO_ReadInputDataBit
                  |L2.1682|
000692  e4cb              B        |L2.44|
;;;375    		{
;;;376    //			BEEP_HIGH();
;;;377    //			timer_delay_1ms(100);
;;;378    //			BEEP_LOW();
;;;379    			
;;;380    //			USART_OUT(USART1, "ddddd\r\n");
;;;381    		}
;;;382    		
;;;383    		
;;;384    //		
;;;385    //		if(ALARM_LOCK_ON()==0)
;;;386    //		{
;;;387    //			 Shaking=0;
;;;388    //			
;;;389    //			
;;;390    //		}
;;;391    //		
;;;392    		
;;;393    //		if((ALARM_LOCK_ON()==0)&&(LOCK_OFF_flag==0)&&(flag==4)&&Hand_Flag==0)
;;;394    //		{
;;;395    //			Shaking=0;
;;;396    //			Park_Lock_stop();
;;;397    //			
;;;398    //			if(Shaking_Alarm_Flag==0)
;;;399    //			{
;;;400    //				if(Lock_Open_Off==1)
;;;401    //				{
;;;402    //					sprintf((char *)PublishLockBackbuf,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;403    //					USART_OUT(USART1, "PublishLockBackbuf=%s\r\n", PublishLockBackbuf);
;;;404    //					ret = gprs_send_at(PublishLockBackbuf, ">", 300, 0);
;;;405    //					if(ret != NULL)
;;;406    //					{
;;;407    //						memset(expressText, 0 ,512);
;;;408    //						memset(cipherText, 0 ,512);
;;;409    //						sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"1",'"',"ok",'"',"1");
;;;410    //						USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;411    ////						AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;412    //						ret = gprs_send_at(expressText, "OK", 300, 0);
;;;413    //						if(ret == NULL)
;;;414    //						{
;;;415    //							
;;;416    //						}
;;;417    //					}
;;;418    //				}
;;;419    //				if(Lock_Open_Off==0)
;;;420    //				{
;;;421    //					sprintf((char *)PublishLockBackbuf,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;422    //					USART_OUT(USART1, "PublishLockBackbuf=%s\r\n", PublishLockBackbuf);
;;;423    //					ret = gprs_send_at(PublishLockBackbuf, ">", 300, 0);
;;;424    //					if(ret != NULL)
;;;425    //					{
;;;426    //						memset(expressText, 0 ,512);
;;;427    //						memset(cipherText, 0 ,512);
;;;428    //						sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"2",'"',"ok",'"',"0");
;;;429    //						USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;430    ////						AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;431    //						ret = gprs_send_at(expressText, "OK", 300, 0);
;;;432    //						if(ret == NULL)
;;;433    //						{
;;;434    //							
;;;435    //						}
;;;436    //					}
;;;437    //				}				
;;;438    //			}
;;;439    //			Lock_Open_Off=0;
;;;440    //			Lock_Open_On=0;
;;;441    //			Lock_Close_On=0;
;;;442    //			LOCK_OFF_flag=1;
;;;443    //		}
;;;444    //		else if(ALARM_LOCK_ON()==1)
;;;445    //		{
;;;446    //			LOCK_OFF_flag=0;
;;;447    //		}
;;;448    //		
;;;449    //		if(Lock_Close_On == 1)
;;;450    //		{
;;;451    //			
;;;452    //		}
;;;453    		
;;;454    	}	 
;;;455    }
;;;456     
                          ENDP

                  |L2.1684|
                          DCD      expressText
                  |L2.1688|
                          DCD      0x40010800
                  |L2.1692|
                          DCD      Lock_Close
                  |L2.1696|
                          DCD      PARK_LOCK_Buffer
                  |L2.1700|
                          DCD      PublishLockBackbuf
                  |L2.1704|
                          DCD      0x40013800
                  |L2.1708|
                          DCD      cipherText
                  |L2.1712|
0006b0  3000              DCB      "0",0
0006b2  00                DCB      0
0006b3  00                DCB      0
                  |L2.1716|
0006b4  3200              DCB      "2",0
0006b6  00                DCB      0
0006b7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  USART1_TX_BUF
                          %        512
                  cipherText
                          %        512
                  receiveText
                          %        24
                  expressText
                          %        512
                  aesKey
                          %        16
                  PublishLockBackbuf
                          %        35
                  PublishDataBatbuf
                          %        35
                  PublishDataGpsbuf
                          %        45
                  PublishDataSelfCheckbuf
                          %        35
                  gpsx
                          %        166
                  longitudedtbuf
                          %        30
                  latitudedtbuf
                          %        30
                  dtbuf
                          %        50
                  self_calendar
                          %        10
                  lockbuf
                          %        16
                  lockbuff
                          %        16
                  protocol_buff
                          %        512
                  tmp
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  Gps_Longi_At24C
                          %        8
                  Gps_Lati_At24C
                          DCD      0x00000000
00000c  000000            DCB      0x00,0x00,0x00
                  Gps_Longi_At24C_Read
00000f  00                DCB      0x00
                          DCD      0x00000000
000014  000000            DCB      0x00,0x00,0x00
                  Gps_Lati_At24C_Read
000017  00                DCB      0x00
                          DCD      0x00000000
00001c  00000000          DCB      0x00,0x00,0x00,0x00
                  Gps_longi
                          DCD      0x00000000
                  Gps_Lati
                          DCD      0x00000000
                  bell_flag
000028  00                DCB      0x00
                  Shaking
000029  00                DCB      0x00
                  Shaking_Alarm_Flag
00002a  0000              DCB      0x00,0x00
                  Bat_V
00002c  0000              DCB      0x00,0x00
                  Bat_Pre
00002e  0000              DCB      0x00,0x00
                  Bat_Pre_Flag
000030  00000000          DCB      0x00,0x00,0x00,0x00
                  ||p1||
                          DCD      0x00000000
                  ||p2||
                          DCD      0x00000000
                  ||p3||
                          DCD      0x00000000
                  ||p4||
                          DCD      0x00000000
                  ||p5||
                          DCD      0x00000000
                  Lock_Open
000048  00                DCB      0x00
                  Lock_Open_On
000049  00                DCB      0x00
                  Lock_Open_Off
00004a  00                DCB      0x00
                  Lock_Open_Tim5s
00004b  00                DCB      0x00
                  Lock_Close
00004c  00                DCB      0x00
                  Lock_Close_On
00004d  00                DCB      0x00
                  Lock_Close_Off
00004e  00                DCB      0x00
                  Lock_Close_Tim5s
00004f  00                DCB      0x00
                  flag
000050  04                DCB      0x04
                  second_flag
000051  00                DCB      0x00
                  LOCK_ON_flag
000052  01                DCB      0x01
                  LOCK_OFF_flag
000053  01                DCB      0x01

                  __ARM_use_no_argv EQU 0
