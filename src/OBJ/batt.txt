; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\batt.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\batt.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\FLib\inc -I..\CORE -I..\driver -I..\BSP -I..\SYS -I..\tplib -IE:\github\dk-lock\src\Proj\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=..\obj\batt.crf ..\USER\batt.c]
                          THUMB

                          AREA ||i.batt_dev_to_svr||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  batt_dev_to_svr PROC
;;;40     
;;;41     void batt_dev_to_svr(void)
000000  b510              PUSH     {r4,lr}
;;;42     {
000002  f5ad6dc1          SUB      sp,sp,#0x608
;;;43     	u16 val = 0;
000006  2400              MOVS     r4,#0
;;;44     	
;;;45     	u8 publish_buff[512] = {0};
000008  f44f7100          MOV      r1,#0x200
00000c  f50d6081          ADD      r0,sp,#0x408
000010  f7fffffe          BL       __aeabi_memclr4
;;;46     	u8 tmp[512] = {0};
000014  f44f7100          MOV      r1,#0x200
000018  a882              ADD      r0,sp,#0x208
00001a  f7fffffe          BL       __aeabi_memclr4
;;;47     	u8 aes_data[512] = {0};
00001e  f44f7100          MOV      r1,#0x200
000022  a802              ADD      r0,sp,#8
000024  f7fffffe          BL       __aeabi_memclr4
;;;48     	
;;;49     	val = batt_get_volume();
000028  f7fffffe          BL       batt_get_volume
00002c  4604              MOV      r4,r0
;;;50     	
;;;51     	if(val < 20 && val > 10 && batt_state == 0)
00002e  2c14              CMP      r4,#0x14
000030  da37              BGE      |L1.162|
000032  2c0a              CMP      r4,#0xa
000034  dd35              BLE      |L1.162|
000036  4838              LDR      r0,|L1.280|
000038  7800              LDRB     r0,[r0,#0]  ; batt_state
00003a  2800              CMP      r0,#0
00003c  d131              BNE      |L1.162|
;;;52     	{
;;;53     		batt_state = 1;
00003e  2001              MOVS     r0,#1
000040  4935              LDR      r1,|L1.280|
000042  7008              STRB     r0,[r1,#0]
;;;54     		sprintf((char *)publish_buff, "%s%s%s", "AT+PUBLISH=lockdata/", PARK_LOCK_Buffer, ",24,2\r\n");
000044  a035              ADR      r0,|L1.284|
000046  4b37              LDR      r3,|L1.292|
000048  a237              ADR      r2,|L1.296|
00004a  a13d              ADR      r1,|L1.320|
00004c  9000              STR      r0,[sp,#0]
00004e  f50d6081          ADD      r0,sp,#0x408
000052  f7fffffe          BL       __2sprintf
;;;55     				
;;;56     		gprs_send_at(publish_buff, ">", 30, 0);
000056  2300              MOVS     r3,#0
000058  221e              MOVS     r2,#0x1e
00005a  a13b              ADR      r1,|L1.328|
00005c  f50d6081          ADD      r0,sp,#0x408
000060  f7fffffe          BL       gprs_send_at
;;;57     		memset(tmp, 0 , 512);
000064  f44f7100          MOV      r1,#0x200
000068  a882              ADD      r0,sp,#0x208
00006a  f7fffffe          BL       __aeabi_memclr4
;;;58     		memset(aes_data, 0 ,512);
00006e  f44f7100          MOV      r1,#0x200
000072  a802              ADD      r0,sp,#8
000074  f7fffffe          BL       __aeabi_memclr4
;;;59     		sprintf((char *)tmp, "{%c%s%c:%s}", '"',"battery", '"', "20");
000078  a034              ADR      r0,|L1.332|
00007a  2122              MOVS     r1,#0x22
00007c  a334              ADR      r3,|L1.336|
00007e  460a              MOV      r2,r1
000080  e9cd1000          STRD     r1,r0,[sp,#0]
000084  a134              ADR      r1,|L1.344|
000086  a882              ADD      r0,sp,#0x208
000088  f7fffffe          BL       __2sprintf
;;;60     		AES_Encrypt((char *)tmp, (char*)aes_data, (char*)aesKey);
00008c  4a35              LDR      r2,|L1.356|
00008e  a902              ADD      r1,sp,#8
000090  a882              ADD      r0,sp,#0x208
000092  f7fffffe          BL       AES_Encrypt
;;;61     		gprs_send_at(aes_data, "OK", 30, 0);
000096  2300              MOVS     r3,#0
000098  221e              MOVS     r2,#0x1e
00009a  a133              ADR      r1,|L1.360|
00009c  a802              ADD      r0,sp,#8
00009e  f7fffffe          BL       gprs_send_at
                  |L1.162|
;;;62     		
;;;63     	}
;;;64     	
;;;65     	
;;;66     	if(val < 0 && batt_state == 1)
0000a2  2c00              CMP      r4,#0
0000a4  da35              BGE      |L1.274|
0000a6  481c              LDR      r0,|L1.280|
0000a8  7800              LDRB     r0,[r0,#0]  ; batt_state
0000aa  2801              CMP      r0,#1
0000ac  d131              BNE      |L1.274|
;;;67     	{
;;;68     		batt_state = 0;
0000ae  2000              MOVS     r0,#0
0000b0  4919              LDR      r1,|L1.280|
0000b2  7008              STRB     r0,[r1,#0]
;;;69     		
;;;70     		sprintf((char *)publish_buff, "%s%s%s", "AT+PUBLISH=lockdata/", PARK_LOCK_Buffer, ",24,2\r\n");
0000b4  a019              ADR      r0,|L1.284|
0000b6  4b1b              LDR      r3,|L1.292|
0000b8  a21b              ADR      r2,|L1.296|
0000ba  a121              ADR      r1,|L1.320|
0000bc  9000              STR      r0,[sp,#0]
0000be  f50d6081          ADD      r0,sp,#0x408
0000c2  f7fffffe          BL       __2sprintf
;;;71     				
;;;72     		gprs_send_at(publish_buff, ">", 30, 0);
0000c6  2300              MOVS     r3,#0
0000c8  221e              MOVS     r2,#0x1e
0000ca  a11f              ADR      r1,|L1.328|
0000cc  f50d6081          ADD      r0,sp,#0x408
0000d0  f7fffffe          BL       gprs_send_at
;;;73     		memset(tmp, 0 , 512);
0000d4  f44f7100          MOV      r1,#0x200
0000d8  a882              ADD      r0,sp,#0x208
0000da  f7fffffe          BL       __aeabi_memclr4
;;;74     		memset(aes_data, 0 ,512);
0000de  f44f7100          MOV      r1,#0x200
0000e2  a802              ADD      r0,sp,#8
0000e4  f7fffffe          BL       __aeabi_memclr4
;;;75     		sprintf((char *)tmp, "{%c%s%c:%s}", '"',"battery", '"', "10");
0000e8  a020              ADR      r0,|L1.364|
0000ea  2122              MOVS     r1,#0x22
0000ec  a318              ADR      r3,|L1.336|
0000ee  460a              MOV      r2,r1
0000f0  e9cd1000          STRD     r1,r0,[sp,#0]
0000f4  a118              ADR      r1,|L1.344|
0000f6  a882              ADD      r0,sp,#0x208
0000f8  f7fffffe          BL       __2sprintf
;;;76     		AES_Encrypt((char *)tmp, (char*)aes_data, (char*)aesKey);
0000fc  4a19              LDR      r2,|L1.356|
0000fe  a902              ADD      r1,sp,#8
000100  a882              ADD      r0,sp,#0x208
000102  f7fffffe          BL       AES_Encrypt
;;;77     		gprs_send_at(aes_data, "OK", 30, 0);
000106  2300              MOVS     r3,#0
000108  221e              MOVS     r2,#0x1e
00010a  a117              ADR      r1,|L1.360|
00010c  a802              ADD      r0,sp,#8
00010e  f7fffffe          BL       gprs_send_at
                  |L1.274|
;;;78     	}
;;;79     	
;;;80     }
000112  f50d6dc1          ADD      sp,sp,#0x608
000116  bd10              POP      {r4,pc}
;;;81     
                          ENDP

                  |L1.280|
                          DCD      batt_state
                  |L1.284|
00011c  2c32342c          DCB      ",24,2\r\n",0
000120  320d0a00
                  |L1.292|
                          DCD      PARK_LOCK_Buffer
                  |L1.296|
000128  41542b50          DCB      "AT+PUBLISH=lockdata/",0
00012c  55424c49
000130  53483d6c
000134  6f636b64
000138  6174612f
00013c  00      
00013d  00                DCB      0
00013e  00                DCB      0
00013f  00                DCB      0
                  |L1.320|
000140  25732573          DCB      "%s%s%s",0
000144  257300  
000147  00                DCB      0
                  |L1.328|
000148  3e00              DCB      ">",0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L1.332|
00014c  323000            DCB      "20",0
00014f  00                DCB      0
                  |L1.336|
000150  62617474          DCB      "battery",0
000154  65727900
                  |L1.344|
000158  7b256325          DCB      "{%c%s%c:%s}",0
00015c  7325633a
000160  25737d00
                  |L1.356|
                          DCD      aesKey
                  |L1.360|
000168  4f4b00            DCB      "OK",0
00016b  00                DCB      0
                  |L1.364|
00016c  313000            DCB      "10",0
00016f  00                DCB      0

                          AREA ||i.batt_get_volume||, CODE, READONLY, ALIGN=1

                  batt_get_volume PROC
;;;21     
;;;22     u16 batt_get_volume(void)
000000  b570              PUSH     {r4-r6,lr}
;;;23     {
;;;24     	
;;;25     	
;;;26     	u16  batt_value = 0, res = 0;
000002  bf00              NOP      
000004  bf00              NOP      
;;;27     	
;;;28     //	batt_value = adc_average_value(ADC_Channel_0, 10);
;;;29     	batt_value = Get_Adc_Average(ADC_Channel_0, 10);
000006  210a              MOVS     r1,#0xa
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       Get_Adc_Average
00000e  4604              MOV      r4,r0
;;;30     	
;;;31     	batt_value = batt_value * 3300 / 4096;
000010  f64041e4          MOV      r1,#0xce4
000014  fb04f001          MUL      r0,r4,r1
000018  17c1              ASRS     r1,r0,#31
00001a  eb005111          ADD      r1,r0,r1,LSR #20
00001e  f3c1340f          UBFX     r4,r1,#12,#16
;;;32     	
;;;33     	batt_value = batt_value * 88 / 20;
000022  2058              MOVS     r0,#0x58
000024  4360              MULS     r0,r4,r0
000026  2114              MOVS     r1,#0x14
000028  fb90f0f1          SDIV     r0,r0,r1
00002c  b284              UXTH     r4,r0
;;;34     	
;;;35     	res = (batt_value-5000) * 100 / 1024;
00002e  f5a45198          SUB      r1,r4,#0x1300
000032  3988              SUBS     r1,r1,#0x88
000034  2264              MOVS     r2,#0x64
000036  fb01f002          MUL      r0,r1,r2
00003a  17c1              ASRS     r1,r0,#31
00003c  eb005191          ADD      r1,r0,r1,LSR #22
000040  f3c1258f          UBFX     r5,r1,#10,#16
;;;36     	
;;;37     
;;;38     	return res;
000044  4628              MOV      r0,r5
;;;39     }
000046  bd70              POP      {r4-r6,pc}
;;;40     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  batt_state
000000  00                DCB      0x00
