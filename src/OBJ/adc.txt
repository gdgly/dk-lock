; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\adc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\adc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\BSP\24CXX -I..\BSP\ADC -I..\BSP\GPS -I..\BSP\IIC -I..\BSP\RTC -I..\BSP\TIMER -I..\BSP\USART2 -I..\BSP\USART3 -I..\FLib\inc -I..\CORE -I..\SYS\sys -I..\SYS\delay -I..\SYS\usart -IE:\dk\HH-1\HH\Proj\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=..\obj\adc.crf ..\BSP\ADC\adc.c]
                          THUMB

                          AREA ||i.Adc_Init||, CODE, READONLY, ALIGN=2

                  Adc_Init PROC
;;;20     //我们默认将开启通道0~3																	   
;;;21     void  Adc_Init(void)
000000  b500              PUSH     {lr}
;;;22     { 	
000002  b087              SUB      sp,sp,#0x1c
;;;23     	ADC_InitTypeDef ADC_InitStructure; 
;;;24     	GPIO_InitTypeDef GPIO_InitStructure;
;;;25     
;;;26     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA |RCC_APB2Periph_ADC1	, ENABLE );	  //使能ADC1通道时钟
000004  2101              MOVS     r1,#1
000006  f44f7001          MOV      r0,#0x204
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;27      
;;;28     
;;;29     	RCC_ADCCLKConfig(RCC_PCLK2_Div6);   //设置ADC分频因子6 72M/6=12,ADC最大时间不能超过14M
00000e  f44f4000          MOV      r0,#0x8000
000012  f7fffffe          BL       RCC_ADCCLKConfig
;;;30     
;;;31     	//PA1 作为模拟通道输入引脚                         
;;;32     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000016  2001              MOVS     r0,#1
000018  f8ad0004          STRH     r0,[sp,#4]
;;;33     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;		//模拟输入引脚
00001c  2000              MOVS     r0,#0
00001e  f88d0007          STRB     r0,[sp,#7]
;;;34     	GPIO_Init(GPIOA, &GPIO_InitStructure);	
000022  a901              ADD      r1,sp,#4
000024  4817              LDR      r0,|L1.132|
000026  f7fffffe          BL       GPIO_Init
;;;35     
;;;36     	ADC_DeInit(ADC1);  //复位ADC1,将外设 ADC1 的全部寄存器重设为缺省值
00002a  4817              LDR      r0,|L1.136|
00002c  f7fffffe          BL       ADC_DeInit
;;;37     
;;;38     	ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;	//ADC工作模式:ADC1和ADC2工作在独立模式
000030  2000              MOVS     r0,#0
000032  9002              STR      r0,[sp,#8]
;;;39     	ADC_InitStructure.ADC_ScanConvMode = DISABLE;	//模数转换工作在单通道模式
000034  f88d000c          STRB     r0,[sp,#0xc]
;;;40     	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;	//模数转换工作在单次转换模式
000038  f88d000d          STRB     r0,[sp,#0xd]
;;;41     	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;	//转换由软件而不是外部触发启动
00003c  f44f2060          MOV      r0,#0xe0000
000040  9004              STR      r0,[sp,#0x10]
;;;42     	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;	//ADC数据右对齐
000042  2000              MOVS     r0,#0
000044  9005              STR      r0,[sp,#0x14]
;;;43     	ADC_InitStructure.ADC_NbrOfChannel = 1;	//顺序进行规则转换的ADC通道的数目
000046  2001              MOVS     r0,#1
000048  f88d0018          STRB     r0,[sp,#0x18]
;;;44     	ADC_Init(ADC1, &ADC_InitStructure);	//根据ADC_InitStruct中指定的参数初始化外设ADCx的寄存器   
00004c  a902              ADD      r1,sp,#8
00004e  480e              LDR      r0,|L1.136|
000050  f7fffffe          BL       ADC_Init
;;;45     
;;;46       
;;;47     	ADC_Cmd(ADC1, ENABLE);	//使能指定的ADC1
000054  2101              MOVS     r1,#1
000056  480c              LDR      r0,|L1.136|
000058  f7fffffe          BL       ADC_Cmd
;;;48     	
;;;49     	ADC_ResetCalibration(ADC1);	//使能复位校准  
00005c  480a              LDR      r0,|L1.136|
00005e  f7fffffe          BL       ADC_ResetCalibration
;;;50     	 
;;;51     	while(ADC_GetResetCalibrationStatus(ADC1));	//等待复位校准结束
000062  bf00              NOP      
                  |L1.100|
000064  4808              LDR      r0,|L1.136|
000066  f7fffffe          BL       ADC_GetResetCalibrationStatus
00006a  2800              CMP      r0,#0
00006c  d1fa              BNE      |L1.100|
;;;52     	
;;;53     	ADC_StartCalibration(ADC1);	 //开启AD校准
00006e  4806              LDR      r0,|L1.136|
000070  f7fffffe          BL       ADC_StartCalibration
;;;54      
;;;55     	while(ADC_GetCalibrationStatus(ADC1));	 //等待校准结束
000074  bf00              NOP      
                  |L1.118|
000076  4804              LDR      r0,|L1.136|
000078  f7fffffe          BL       ADC_GetCalibrationStatus
00007c  2800              CMP      r0,#0
00007e  d1fa              BNE      |L1.118|
;;;56      
;;;57     	//ADC_SoftwareStartConvCmd(ADC1, ENABLE);		//使能指定的ADC1的软件转换启动功能
;;;58     
;;;59     }				  
000080  b007              ADD      sp,sp,#0x1c
000082  bd00              POP      {pc}
;;;60     //获得ADC值
                          ENDP

                  |L1.132|
                          DCD      0x40010800
                  |L1.136|
                          DCD      0x40012400

                          AREA ||i.Get_Adc||, CODE, READONLY, ALIGN=2

                  Get_Adc PROC
;;;61     //ch:通道值 0~3
;;;62     u16 Get_Adc(u8 ch)   
000000  b510              PUSH     {r4,lr}
;;;63     {
000002  4604              MOV      r4,r0
;;;64       	//设置指定ADC的规则组通道，一个序列，采样时间
;;;65     	ADC_RegularChannelConfig(ADC1, ch, 1, ADC_SampleTime_239Cycles5 );	//ADC1,ADC通道,采样时间为239.5周期	  			    
000004  2307              MOVS     r3,#7
000006  2201              MOVS     r2,#1
000008  4621              MOV      r1,r4
00000a  4809              LDR      r0,|L2.48|
00000c  f7fffffe          BL       ADC_RegularChannelConfig
;;;66       
;;;67     	ADC_SoftwareStartConvCmd(ADC1, ENABLE);		//使能指定的ADC1的软件转换启动功能	
000010  2101              MOVS     r1,#1
000012  4807              LDR      r0,|L2.48|
000014  f7fffffe          BL       ADC_SoftwareStartConvCmd
;;;68     	 
;;;69     	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC ));//等待转换结束
000018  bf00              NOP      
                  |L2.26|
00001a  2102              MOVS     r1,#2
00001c  4804              LDR      r0,|L2.48|
00001e  f7fffffe          BL       ADC_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L2.26|
;;;70     
;;;71     	return ADC_GetConversionValue(ADC1);	//返回最近一次ADC1规则组的转换结果
000026  4802              LDR      r0,|L2.48|
000028  f7fffffe          BL       ADC_GetConversionValue
;;;72     }
00002c  bd10              POP      {r4,pc}
;;;73     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40012400

                          AREA ||i.Get_Adc_Average||, CODE, READONLY, ALIGN=1

                  Get_Adc_Average PROC
;;;73     
;;;74     u16 Get_Adc_Average(u8 ch,u8 times)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;75     {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;76     	u32 temp_val=0;
000008  2500              MOVS     r5,#0
;;;77     	u8 t;
;;;78     	for(t=0;t<times;t++)
00000a  2600              MOVS     r6,#0
00000c  e008              B        |L3.32|
                  |L3.14|
;;;79     	{
;;;80     		temp_val+=Get_Adc(ch);
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       Get_Adc
000014  4405              ADD      r5,r5,r0
;;;81     		delay_ms(5);
000016  2005              MOVS     r0,#5
000018  f7fffffe          BL       delay_ms
00001c  1c70              ADDS     r0,r6,#1              ;78
00001e  b2c6              UXTB     r6,r0                 ;78
                  |L3.32|
000020  42a6              CMP      r6,r4                 ;78
000022  dbf4              BLT      |L3.14|
;;;82     	}
;;;83     	return temp_val/times;
000024  fbb5f0f4          UDIV     r0,r5,r4
000028  b280              UXTH     r0,r0
;;;84     } 	 
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;85     
                          ENDP

