; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\obj\24cxx_1.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\24cxx_1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\USER -I..\FLib\inc -I..\CORE -I..\driver -I..\BSP -I..\SYS -I..\tplib -IE:\github\dk-lock\src\Proj\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=..\obj\24cxx_1.crf ..\driver\24cxx.c]
                          THUMB

                          AREA ||i.AT24CXX_Check||, CODE, READONLY, ALIGN=1

                  AT24CXX_Check PROC
;;;96     //返回0:检测成功
;;;97     u8 AT24CXX_Check(void)
000000  b510              PUSH     {r4,lr}
;;;98     {
;;;99     	u8 temp;
;;;100    	temp=AT24CXX_ReadOneByte(32767);//避免每次开机都写AT24CXX			   
000002  f64770ff          MOV      r0,#0x7fff
000006  f7fffffe          BL       AT24CXX_ReadOneByte
00000a  4604              MOV      r4,r0
;;;101    	if(temp==0X55)return 0;		   
00000c  2c55              CMP      r4,#0x55
00000e  d101              BNE      |L1.20|
000010  2000              MOVS     r0,#0
                  |L1.18|
;;;102    	else//排除第一次初始化的情况
;;;103    	{
;;;104    		AT24CXX_WriteOneByte(32767,0X55);
;;;105    	    temp=AT24CXX_ReadOneByte(32767);	  
;;;106    		if(temp==0X55)return 0;
;;;107    	}
;;;108    	return 1;											  
;;;109    }
000012  bd10              POP      {r4,pc}
                  |L1.20|
000014  2155              MOVS     r1,#0x55              ;104
000016  f64770ff          MOV      r0,#0x7fff            ;104
00001a  f7fffffe          BL       AT24CXX_WriteOneByte
00001e  f64770ff          MOV      r0,#0x7fff            ;105
000022  f7fffffe          BL       AT24CXX_ReadOneByte
000026  4604              MOV      r4,r0                 ;105
000028  2c55              CMP      r4,#0x55              ;106
00002a  d101              BNE      |L1.48|
00002c  2000              MOVS     r0,#0                 ;106
00002e  e7f0              B        |L1.18|
                  |L1.48|
000030  2001              MOVS     r0,#1                 ;108
000032  e7ee              B        |L1.18|
;;;110    
                          ENDP


                          AREA ||i.AT24CXX_Init||, CODE, READONLY, ALIGN=1

                  AT24CXX_Init PROC
;;;9      //初始化IIC接口
;;;10     void AT24CXX_Init(void)
000000  b510              PUSH     {r4,lr}
;;;11     {
;;;12     	IIC_Init();
000002  f7fffffe          BL       IIC_Init
;;;13     }
000006  bd10              POP      {r4,pc}
;;;14     //在AT24CXX指定地址读出一个数据
                          ENDP


                          AREA ||i.AT24CXX_Read||, CODE, READONLY, ALIGN=1

                  AT24CXX_Read PROC
;;;114    //NumToRead:要读出数据的个数
;;;115    void AT24CXX_Read(u16 ReadAddr,u8 *pBuffer,u16 NumToRead)
000000  b570              PUSH     {r4-r6,lr}
;;;116    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;117    	while(NumToRead)
000008  e008              B        |L3.28|
                  |L3.10|
;;;118    	{
;;;119    		*pBuffer++=AT24CXX_ReadOneByte(ReadAddr++);	
00000a  4630              MOV      r0,r6
00000c  1c72              ADDS     r2,r6,#1
00000e  b296              UXTH     r6,r2
000010  f7fffffe          BL       AT24CXX_ReadOneByte
000014  f8040b01          STRB     r0,[r4],#1
;;;120    		NumToRead--;
000018  1e68              SUBS     r0,r5,#1
00001a  b285              UXTH     r5,r0
                  |L3.28|
00001c  2d00              CMP      r5,#0                 ;117
00001e  d1f4              BNE      |L3.10|
;;;121    	}
;;;122    }  
000020  bd70              POP      {r4-r6,pc}
;;;123    //在AT24CXX里面的指定地址开始写入指定个数的数据
                          ENDP


                          AREA ||i.AT24CXX_ReadLenByte||, CODE, READONLY, ALIGN=1

                  AT24CXX_ReadLenByte PROC
;;;80     //Len        :要读出数据的长度2,4
;;;81     u32 AT24CXX_ReadLenByte(u16 ReadAddr,u8 Len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;82     {  	
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;83     	u8 t;
;;;84     	u32 temp=0;
000008  2600              MOVS     r6,#0
;;;85     	for(t=0;t<Len;t++)
00000a  2500              MOVS     r5,#0
00000c  e009              B        |L4.34|
                  |L4.14|
;;;86     	{
;;;87     		temp<<=8;
00000e  0236              LSLS     r6,r6,#8
;;;88     		temp+=AT24CXX_ReadOneByte(ReadAddr+Len-t-1); 	 				   
000010  1939              ADDS     r1,r7,r4
000012  1b49              SUBS     r1,r1,r5
000014  1e49              SUBS     r1,r1,#1
000016  b288              UXTH     r0,r1
000018  f7fffffe          BL       AT24CXX_ReadOneByte
00001c  4406              ADD      r6,r6,r0
00001e  1c68              ADDS     r0,r5,#1              ;85
000020  b2c5              UXTB     r5,r0                 ;85
                  |L4.34|
000022  42a5              CMP      r5,r4                 ;85
000024  dbf3              BLT      |L4.14|
;;;89     	}
;;;90     	return temp;												    
000026  4630              MOV      r0,r6
;;;91     }
000028  e8bd81f0          POP      {r4-r8,pc}
;;;92     //检查AT24CXX是否正常
                          ENDP


                          AREA ||i.AT24CXX_ReadOneByte||, CODE, READONLY, ALIGN=1

                  AT24CXX_ReadOneByte PROC
;;;16     //返回值  :读到的数据
;;;17     u8 AT24CXX_ReadOneByte(u16 ReadAddr)
000000  b570              PUSH     {r4-r6,lr}
;;;18     {				  
000002  4604              MOV      r4,r0
;;;19     	u8 temp=0;		  	    																 
000004  2600              MOVS     r6,#0
;;;20         IIC_Start();  
000006  f7fffffe          BL       IIC_Start
;;;21     	if(EE_TYPE>AT24C16)
;;;22     	{
;;;23     		IIC_Send_Byte(0XA0);	   //发送写命令
00000a  20a0              MOVS     r0,#0xa0
00000c  f7fffffe          BL       IIC_Send_Byte
;;;24     		IIC_Wait_Ack();
000010  f7fffffe          BL       IIC_Wait_Ack
;;;25     		IIC_Send_Byte(ReadAddr>>8);//发送高地址
000014  1220              ASRS     r0,r4,#8
000016  f7fffffe          BL       IIC_Send_Byte
;;;26     		//IIC_Wait_Ack();		 
;;;27     	}else IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据 	 
;;;28     
;;;29     	IIC_Wait_Ack(); 
00001a  f7fffffe          BL       IIC_Wait_Ack
;;;30         IIC_Send_Byte(ReadAddr%256);   //发送低地址
00001e  4625              MOV      r5,r4
000020  17e1              ASRS     r1,r4,#31
000022  eb046111          ADD      r1,r4,r1,LSR #24
000026  1209              ASRS     r1,r1,#8
000028  eba42101          SUB      r1,r4,r1,LSL #8
00002c  b2c8              UXTB     r0,r1
00002e  f7fffffe          BL       IIC_Send_Byte
;;;31     	IIC_Wait_Ack();	    
000032  f7fffffe          BL       IIC_Wait_Ack
;;;32     	IIC_Start();  	 	   
000036  f7fffffe          BL       IIC_Start
;;;33     	IIC_Send_Byte(0XA1);           //进入接收模式			   
00003a  20a1              MOVS     r0,#0xa1
00003c  f7fffffe          BL       IIC_Send_Byte
;;;34     	IIC_Wait_Ack();	 
000040  f7fffffe          BL       IIC_Wait_Ack
;;;35         temp=IIC_Read_Byte(0);		   
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       IIC_Read_Byte
00004a  4606              MOV      r6,r0
;;;36         IIC_Stop();//产生一个停止条件	    
00004c  f7fffffe          BL       IIC_Stop
;;;37     	return temp;
000050  4630              MOV      r0,r6
;;;38     }
000052  bd70              POP      {r4-r6,pc}
;;;39     //在AT24CXX指定地址写入一个数据
                          ENDP


                          AREA ||i.AT24CXX_Write||, CODE, READONLY, ALIGN=1

                  AT24CXX_Write PROC
;;;126    //NumToWrite:要写入数据的个数
;;;127    void AT24CXX_Write(u16 WriteAddr,u8 *pBuffer,u16 NumToWrite)
000000  b570              PUSH     {r4-r6,lr}
;;;128    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;129    	while(NumToWrite--)
000008  e006              B        |L6.24|
                  |L6.10|
;;;130    	{
;;;131    		AT24CXX_WriteOneByte(WriteAddr,*pBuffer);
00000a  7821              LDRB     r1,[r4,#0]
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       AT24CXX_WriteOneByte
;;;132    		WriteAddr++;
000012  1c68              ADDS     r0,r5,#1
000014  b285              UXTH     r5,r0
;;;133    		pBuffer++;
000016  1c64              ADDS     r4,r4,#1
                  |L6.24|
000018  1e30              SUBS     r0,r6,#0              ;129
00001a  f1a60101          SUB      r1,r6,#1              ;129
00001e  b28e              UXTH     r6,r1                 ;129
000020  d1f3              BNE      |L6.10|
;;;134    	}
;;;135    }
000022  bd70              POP      {r4-r6,pc}
;;;136     
                          ENDP


                          AREA ||i.AT24CXX_WriteLenByte||, CODE, READONLY, ALIGN=1

                  AT24CXX_WriteLenByte PROC
;;;66     //Len        :要写入数据的长度2,4
;;;67     void AT24CXX_WriteLenByte(u16 WriteAddr,u32 DataToWrite,u8 Len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;68     {  	
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;69     	u8 t;
;;;70     	for(t=0;t<Len;t++)
00000a  2400              MOVS     r4,#0
00000c  e009              B        |L7.34|
                  |L7.14|
;;;71     	{
;;;72     		AT24CXX_WriteOneByte(WriteAddr+t,(DataToWrite>>(8*t))&0xff);
00000e  00e2              LSLS     r2,r4,#3
000010  fa26f202          LSR      r2,r6,r2
000014  b2d1              UXTB     r1,r2
000016  192a              ADDS     r2,r5,r4
000018  b290              UXTH     r0,r2
00001a  f7fffffe          BL       AT24CXX_WriteOneByte
00001e  1c60              ADDS     r0,r4,#1              ;70
000020  b2c4              UXTB     r4,r0                 ;70
                  |L7.34|
000022  42bc              CMP      r4,r7                 ;70
000024  dbf3              BLT      |L7.14|
;;;73     	}												    
;;;74     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;75     
                          ENDP


                          AREA ||i.AT24CXX_WriteOneByte||, CODE, READONLY, ALIGN=1

                  AT24CXX_WriteOneByte PROC
;;;41     //DataToWrite:要写入的数据
;;;42     void AT24CXX_WriteOneByte(u16 WriteAddr,u8 DataToWrite)
000000  b570              PUSH     {r4-r6,lr}
;;;43     {				   	  	    																 
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;44         IIC_Start();  
000006  f7fffffe          BL       IIC_Start
;;;45     	if(EE_TYPE>AT24C16)
;;;46     	{
;;;47     		IIC_Send_Byte(0XA0);	    //发送写命令
00000a  20a0              MOVS     r0,#0xa0
00000c  f7fffffe          BL       IIC_Send_Byte
;;;48     		IIC_Wait_Ack();
000010  f7fffffe          BL       IIC_Wait_Ack
;;;49     		IIC_Send_Byte(WriteAddr>>8);//发送高地址
000014  1220              ASRS     r0,r4,#8
000016  f7fffffe          BL       IIC_Send_Byte
;;;50      	}else
;;;51     	{
;;;52     		IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据 
;;;53     	}	 
;;;54     	IIC_Wait_Ack();	   
00001a  f7fffffe          BL       IIC_Wait_Ack
;;;55         IIC_Send_Byte(WriteAddr%256);   //发送低地址
00001e  4625              MOV      r5,r4
000020  17e1              ASRS     r1,r4,#31
000022  eb046111          ADD      r1,r4,r1,LSR #24
000026  1209              ASRS     r1,r1,#8
000028  eba42101          SUB      r1,r4,r1,LSL #8
00002c  b2c8              UXTB     r0,r1
00002e  f7fffffe          BL       IIC_Send_Byte
;;;56     	IIC_Wait_Ack(); 	 										  		   
000032  f7fffffe          BL       IIC_Wait_Ack
;;;57     	IIC_Send_Byte(DataToWrite);     //发送字节							   
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       IIC_Send_Byte
;;;58     	IIC_Wait_Ack();  		    	   
00003c  f7fffffe          BL       IIC_Wait_Ack
;;;59         IIC_Stop();//产生一个停止条件 
000040  f7fffffe          BL       IIC_Stop
;;;60     	delay_ms(10);	 
000044  200a              MOVS     r0,#0xa
000046  f7fffffe          BL       delay_ms
;;;61     }
00004a  bd70              POP      {r4-r6,pc}
;;;62     //在AT24CXX里面的指定地址开始写入长度为Len的数据
                          ENDP

