; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usart.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\usart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\usart.crf ..\driver\usart.c]
                          THUMB

                          AREA ||i.SendCmd||, CODE, READONLY, ALIGN=2

                  SendCmd PROC
;;;493    
;;;494    void SendCmd(char* cmd, char* result, int timeOut)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;495    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;496    	USART2_Clear();
00000a  f7fffffe          BL       USART2_Clear
;;;497        while(1)
00000e  e016              B        |L1.62|
                  |L1.16|
;;;498        { 
;;;499    		USART2_Clear();
000010  f7fffffe          BL       USART2_Clear
;;;500            USART2_Write(USART2, cmd, strlen(cmd));
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       strlen
00001a  b2c7              UXTB     r7,r0
00001c  463a              MOV      r2,r7
00001e  4621              MOV      r1,r4
000020  4809              LDR      r0,|L1.72|
000022  f7fffffe          BL       USART2_Write
;;;501            timer_delay_1ms(timeOut);
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       timer_delay_1ms
;;;502    
;;;503    //		delay_ms(timeOut);
;;;504    //		printf("send_cmd:%s\r\n", usart2_rcv_buf);
;;;505            if((NULL != strstr(usart2_buff, result)))	//??????????
00002c  4631              MOV      r1,r6
00002e  4807              LDR      r0,|L1.76|
000030  f7fffffe          BL       strstr
000034  b118              CBZ      r0,|L1.62|
;;;506            {
;;;507    					  usart2_cnt=0;
000036  2000              MOVS     r0,#0
000038  4905              LDR      r1,|L1.80|
00003a  8008              STRH     r0,[r1,#0]
;;;508    			
;;;509    //					  myfree(usart2_rcv_buf);
;;;510    //					  myfree(cmd);
;;;511    //					  myfree(result);
;;;512                break;
00003c  e000              B        |L1.64|
                  |L1.62|
00003e  e7e7              B        |L1.16|
                  |L1.64|
000040  bf00              NOP      
;;;513            }
;;;514    //        else
;;;515    //        {
;;;516    //            delay_ms(200);
;;;517    ////			timer_delay_1ms(200);
;;;518    //        }
;;;519        }
;;;520    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;521    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      0x40004400
                  |L1.76|
                          DCD      usart2_buff
                  |L1.80|
                          DCD      usart2_cnt

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;269    */
;;;270    void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;271    {
;;;272    
;;;273    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;274    	
;;;275       	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  481e              LDR      r0,|L2.132|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b358              CBZ      r0,|L2.104|
;;;276        {   
;;;277    	    USART_ClearITPendingBit(USART1, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  481b              LDR      r0,|L2.132|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;278    				
;;;279            ch = USART_ReceiveData(USART1);	 
00001a  481a              LDR      r0,|L2.132|
00001c  f7fffffe          BL       USART_ReceiveData
000020  b2c4              UXTB     r4,r0
;;;280    		
;;;281    		timer_is_timeout_1ms(timer_uart1, 0);
000022  2100              MOVS     r1,#0
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       timer_is_timeout_1ms
;;;282    		
;;;283    //		if(usart1_rx_status == 0)
;;;284    		{
;;;285    			
;;;286    			if (usart1_cnt < USART_BUFF_LENGHT)
00002a  4817              LDR      r0,|L2.136|
00002c  8800              LDRH     r0,[r0,#0]  ; usart1_cnt
00002e  f5b07f00          CMP      r0,#0x200
000032  da0b              BGE      |L2.76|
;;;287    			{
;;;288    				
;;;289    				usart1_buff[usart1_cnt++] = ch;
000034  4814              LDR      r0,|L2.136|
000036  8801              LDRH     r1,[r0,#0]  ; usart1_cnt
000038  8800              LDRH     r0,[r0,#0]  ; usart1_cnt
00003a  1c40              ADDS     r0,r0,#1
00003c  4a12              LDR      r2,|L2.136|
00003e  8010              STRH     r0,[r2,#0]
000040  4812              LDR      r0,|L2.140|
000042  5444              STRB     r4,[r0,r1]
;;;290    //				USART_SendData(USART1, ch);	 
;;;291    				usart1_rx_status = 1;
000044  2001              MOVS     r0,#1
000046  4912              LDR      r1,|L2.144|
000048  7008              STRB     r0,[r1,#0]
00004a  e00d              B        |L2.104|
                  |L2.76|
;;;292    			}
;;;293    			else
;;;294    			{
;;;295    				memset(usart1_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区
00004c  f2402102          MOV      r1,#0x202
000050  4810              LDR      r0,|L2.148|
000052  6800              LDR      r0,[r0,#0]  ; usart1_rx_buff
000054  f7fffffe          BL       __aeabi_memclr
;;;296    				memset(usart1_buff, 0, 512);	
000058  f44f7100          MOV      r1,#0x200
00005c  480b              LDR      r0,|L2.140|
00005e  f7fffffe          BL       __aeabi_memclr
;;;297    				usart1_cnt = 0;			
000062  2000              MOVS     r0,#0
000064  4908              LDR      r1,|L2.136|
000066  8008              STRH     r0,[r1,#0]
                  |L2.104|
;;;298    			}
;;;299    		}
;;;300    	}
;;;301    	
;;;302    	if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET)                  
000068  f2407127          MOV      r1,#0x727
00006c  4805              LDR      r0,|L2.132|
00006e  f7fffffe          BL       USART_GetITStatus
000072  b128              CBZ      r0,|L2.128|
;;;303      	{ 
;;;304         	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);					   
000074  2200              MOVS     r2,#0
000076  f2407127          MOV      r1,#0x727
00007a  4802              LDR      r0,|L2.132|
00007c  f7fffffe          BL       USART_ITConfig
                  |L2.128|
;;;305      	}	
;;;306    	
;;;307    
;;;308    }
000080  bd10              POP      {r4,pc}
;;;309    
                          ENDP

000082  0000              DCW      0x0000
                  |L2.132|
                          DCD      0x40013800
                  |L2.136|
                          DCD      usart1_cnt
                  |L2.140|
                          DCD      usart1_buff
                  |L2.144|
                          DCD      usart1_rx_status
                  |L2.148|
                          DCD      usart1_rx_buff

                          AREA ||i.USART2_Clear||, CODE, READONLY, ALIGN=2

                  USART2_Clear PROC
;;;470    
;;;471    void USART2_Clear(void)
000000  b510              PUSH     {r4,lr}
;;;472    {
;;;473    	memset(usart2_buff, 0, strlen(usart2_buff));
000002  4806              LDR      r0,|L3.28|
000004  f7fffffe          BL       strlen
000008  4604              MOV      r4,r0
00000a  4621              MOV      r1,r4
00000c  4803              LDR      r0,|L3.28|
00000e  f7fffffe          BL       __aeabi_memclr
;;;474        usart2_cnt = 0;
000012  2000              MOVS     r0,#0
000014  4902              LDR      r1,|L3.32|
000016  8008              STRH     r0,[r1,#0]
;;;475    }
000018  bd10              POP      {r4,pc}
;;;476    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      usart2_buff
                  |L3.32|
                          DCD      usart2_cnt

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;339    */
;;;340    void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;341    {
;;;342    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;343    
;;;344       	if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  481b              LDR      r0,|L4.120|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b328              CBZ      r0,|L4.92|
;;;345        {   
;;;346    	    USART_ClearITPendingBit(USART2, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  4818              LDR      r0,|L4.120|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;347    		
;;;348    		timer_is_timeout_1ms(timer_uart2, 0);		//定时器清零
00001a  2100              MOVS     r1,#0
00001c  200b              MOVS     r0,#0xb
00001e  f7fffffe          BL       timer_is_timeout_1ms
;;;349    		
;;;350    		if(usart2_rx_status == 0)
000022  4816              LDR      r0,|L4.124|
000024  7800              LDRB     r0,[r0,#0]  ; usart2_rx_status
000026  b9c8              CBNZ     r0,|L4.92|
;;;351    		{
;;;352    			ch = USART_ReceiveData(USART2);	 
000028  4813              LDR      r0,|L4.120|
00002a  f7fffffe          BL       USART_ReceiveData
00002e  b2c4              UXTB     r4,r0
;;;353    			
;;;354    			if (usart2_cnt < USART_BUFF_LENGHT)
000030  4813              LDR      r0,|L4.128|
000032  8800              LDRH     r0,[r0,#0]  ; usart2_cnt
000034  f5b07f00          CMP      r0,#0x200
000038  da08              BGE      |L4.76|
;;;355    			{			
;;;356    				usart2_buff[usart2_cnt++] = ch;
00003a  4811              LDR      r0,|L4.128|
00003c  8801              LDRH     r1,[r0,#0]  ; usart2_cnt
00003e  8800              LDRH     r0,[r0,#0]  ; usart2_cnt
000040  1c40              ADDS     r0,r0,#1
000042  4a0f              LDR      r2,|L4.128|
000044  8010              STRH     r0,[r2,#0]
000046  480f              LDR      r0,|L4.132|
000048  5444              STRB     r4,[r0,r1]
00004a  e007              B        |L4.92|
                  |L4.76|
;;;357    
;;;358    			}
;;;359    			else
;;;360    			{
;;;361    //				memset(usart2_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区
;;;362    				memset(usart2_buff, 0, 512);	
00004c  f44f7100          MOV      r1,#0x200
000050  480c              LDR      r0,|L4.132|
000052  f7fffffe          BL       __aeabi_memclr
;;;363    				usart2_cnt = 0;			
000056  2000              MOVS     r0,#0
000058  4909              LDR      r1,|L4.128|
00005a  8008              STRH     r0,[r1,#0]
                  |L4.92|
;;;364    			}
;;;365    		}
;;;366    
;;;367    	}
;;;368    	
;;;369    	if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)                  
00005c  f2407127          MOV      r1,#0x727
000060  4805              LDR      r0,|L4.120|
000062  f7fffffe          BL       USART_GetITStatus
000066  b128              CBZ      r0,|L4.116|
;;;370      	{ 
;;;371         	USART_ITConfig(USART2, USART_IT_TXE, DISABLE);					   
000068  2200              MOVS     r2,#0
00006a  f2407127          MOV      r1,#0x727
00006e  4802              LDR      r0,|L4.120|
000070  f7fffffe          BL       USART_ITConfig
                  |L4.116|
;;;372      	}	
;;;373    	 	
;;;374    }
000074  bd10              POP      {r4,pc}
;;;375    
                          ENDP

000076  0000              DCW      0x0000
                  |L4.120|
                          DCD      0x40004400
                  |L4.124|
                          DCD      usart2_rx_status
                  |L4.128|
                          DCD      usart2_cnt
                  |L4.132|
                          DCD      usart2_buff

                          AREA ||i.USART2_Write||, CODE, READONLY, ALIGN=1

                  USART2_Write PROC
;;;479    */
;;;480    void USART2_Write(USART_TypeDef* USARTx, uint8_t *Data, uint8_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;481    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;482        uint8_t i;
;;;483        USART_ClearFlag(USARTx, USART_FLAG_TC);
00000a  2140              MOVS     r1,#0x40
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       USART_ClearFlag
;;;484        for(i = 0; i < len; i++)
000012  2600              MOVS     r6,#0
000014  e00d              B        |L5.50|
                  |L5.22|
;;;485        {
;;;486            USART_SendData(USARTx, *Data++);
000016  f8141b01          LDRB     r1,[r4],#1
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       USART_SendData
;;;487            while( USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET );
000020  bf00              NOP      
                  |L5.34|
000022  2140              MOVS     r1,#0x40
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       USART_GetFlagStatus
00002a  2800              CMP      r0,#0
00002c  d0f9              BEQ      |L5.34|
00002e  1c70              ADDS     r0,r6,#1              ;484
000030  b2c6              UXTB     r6,r0                 ;484
                  |L5.50|
000032  42ae              CMP      r6,r5                 ;484
000034  dbef              BLT      |L5.22|
;;;488        }
;;;489    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;490    
                          ENDP


                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;407    */
;;;408    void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;409    {
;;;410    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;411    
;;;412       	if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  481b              LDR      r0,|L6.120|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b328              CBZ      r0,|L6.92|
;;;413        {   
;;;414    	    USART_ClearITPendingBit(USART3, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  4818              LDR      r0,|L6.120|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;415    		timer_is_timeout_1ms(timer_uart3, 0);
00001a  2100              MOVS     r1,#0
00001c  200c              MOVS     r0,#0xc
00001e  f7fffffe          BL       timer_is_timeout_1ms
;;;416    		
;;;417    //		if(usart3_rx_status == 0)
;;;418    		{	
;;;419    			ch = USART_ReceiveData(USART3);	 
000022  4815              LDR      r0,|L6.120|
000024  f7fffffe          BL       USART_ReceiveData
000028  b2c4              UXTB     r4,r0
;;;420    
;;;421    			if (usart3_cnt < USART_BUFF_LENGHT)
00002a  4814              LDR      r0,|L6.124|
00002c  8800              LDRH     r0,[r0,#0]  ; usart3_cnt
00002e  f5b07f00          CMP      r0,#0x200
000032  da0b              BGE      |L6.76|
;;;422    			{
;;;423    				usart3_buff[usart3_cnt++] = ch;	
000034  4811              LDR      r0,|L6.124|
000036  8801              LDRH     r1,[r0,#0]  ; usart3_cnt
000038  8800              LDRH     r0,[r0,#0]  ; usart3_cnt
00003a  1c40              ADDS     r0,r0,#1
00003c  4a0f              LDR      r2,|L6.124|
00003e  8010              STRH     r0,[r2,#0]
000040  480f              LDR      r0,|L6.128|
000042  5444              STRB     r4,[r0,r1]
;;;424    				usart3_rx_status = 1;				
000044  2001              MOVS     r0,#1
000046  490f              LDR      r1,|L6.132|
000048  7008              STRB     r0,[r1,#0]
00004a  e007              B        |L6.92|
                  |L6.76|
;;;425    			}
;;;426    			else
;;;427    			{
;;;428    				memset(usart3_buff, 0, USART_BUFF_LENGHT);
00004c  f44f7100          MOV      r1,#0x200
000050  480b              LDR      r0,|L6.128|
000052  f7fffffe          BL       __aeabi_memclr
;;;429    				usart3_cnt = 0;
000056  2000              MOVS     r0,#0
000058  4908              LDR      r1,|L6.124|
00005a  8008              STRH     r0,[r1,#0]
                  |L6.92|
;;;430    			}
;;;431    		}	
;;;432    	}
;;;433    	
;;;434    	if(USART_GetITStatus(USART3, USART_IT_TXE) != RESET)                  
00005c  f2407127          MOV      r1,#0x727
000060  4805              LDR      r0,|L6.120|
000062  f7fffffe          BL       USART_GetITStatus
000066  b128              CBZ      r0,|L6.116|
;;;435      	{ 
;;;436         	USART_ITConfig(USART3, USART_IT_TXE, DISABLE);					   
000068  2200              MOVS     r2,#0
00006a  f2407127          MOV      r1,#0x727
00006e  4802              LDR      r0,|L6.120|
000070  f7fffffe          BL       USART_ITConfig
                  |L6.116|
;;;437      	}	
;;;438    	
;;;439    }
000074  bd10              POP      {r4,pc}
;;;440    
                          ENDP

000076  0000              DCW      0x0000
                  |L6.120|
                          DCD      0x40004800
                  |L6.124|
                          DCD      usart3_cnt
                  |L6.128|
                          DCD      usart3_buff
                  |L6.132|
                          DCD      usart3_rx_status

                          AREA ||i.USART_OUT||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  USART_OUT PROC
;;;539    */
;;;540    void USART_OUT(USART_TypeDef* USARTx, uint8_t *Data,...)
000000  b40f              PUSH     {r0-r3}
;;;541    { 
000002  b570              PUSH     {r4-r6,lr}
000004  b08a              SUB      sp,sp,#0x28
000006  4606              MOV      r6,r0
;;;542    	const char *s;
;;;543        int d;  
;;;544        char buf[32];
;;;545        
;;;546    	va_list ap;
;;;547        __va_start(ap, Data);
000008  a810              ADD      r0,sp,#0x40
00000a  9001              STR      r0,[sp,#4]
;;;548    	
;;;549    	
;;;550    	USART_GetFlagStatus(USARTx, USART_FLAG_TC);	//
00000c  2140              MOVS     r1,#0x40
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       USART_GetFlagStatus
;;;551    	while(*Data != '\0')
000014  e073              B        |L7.254|
                  |L7.22|
;;;552    	{				                         
;;;553    		if(*Data==0x5c)
000016  980f              LDR      r0,[sp,#0x3c]
000018  7800              LDRB     r0,[r0,#0]
00001a  285c              CMP      r0,#0x5c
00001c  d11c              BNE      |L7.88|
;;;554    		{									
;;;555    			switch (*++Data)
00001e  980f              LDR      r0,[sp,#0x3c]
000020  1c40              ADDS     r0,r0,#1
000022  900f              STR      r0,[sp,#0x3c]
000024  7800              LDRB     r0,[r0,#0]
000026  286e              CMP      r0,#0x6e
000028  d009              BEQ      |L7.62|
00002a  2872              CMP      r0,#0x72
00002c  d10f              BNE      |L7.78|
;;;556    			{
;;;557    				case 'r':							          
;;;558    					USART_SendData(USARTx, 0x0d);	   
00002e  210d              MOVS     r1,#0xd
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       USART_SendData
;;;559    					Data++;
000036  980f              LDR      r0,[sp,#0x3c]
000038  1c40              ADDS     r0,r0,#1
00003a  900f              STR      r0,[sp,#0x3c]
;;;560    				break;
00003c  e00b              B        |L7.86|
                  |L7.62|
;;;561    				case 'n':							          
;;;562    					USART_SendData(USARTx, 0x0a);	
00003e  210a              MOVS     r1,#0xa
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       USART_SendData
;;;563    					Data++;
000046  980f              LDR      r0,[sp,#0x3c]
000048  1c40              ADDS     r0,r0,#1
00004a  900f              STR      r0,[sp,#0x3c]
;;;564    				break;
00004c  e003              B        |L7.86|
                  |L7.78|
;;;565    				
;;;566    				default:
;;;567    					Data++;
00004e  980f              LDR      r0,[sp,#0x3c]
000050  1c40              ADDS     r0,r0,#1
000052  900f              STR      r0,[sp,#0x3c]
;;;568    			    break;
000054  bf00              NOP      
                  |L7.86|
000056  e04b              B        |L7.240|
                  |L7.88|
;;;569    			}						 
;;;570    		}
;;;571    		else if(*Data=='%')
000058  980f              LDR      r0,[sp,#0x3c]
00005a  7800              LDRB     r0,[r0,#0]
00005c  2825              CMP      r0,#0x25
00005e  d140              BNE      |L7.226|
;;;572    		{									  //
;;;573    			switch (*++Data){				
000060  980f              LDR      r0,[sp,#0x3c]
000062  1c40              ADDS     r0,r0,#1
000064  900f              STR      r0,[sp,#0x3c]
000066  7800              LDRB     r0,[r0,#0]
000068  2864              CMP      r0,#0x64
00006a  d018              BEQ      |L7.158|
00006c  2873              CMP      r0,#0x73
00006e  d133              BNE      |L7.216|
;;;574    				case 's':										  
;;;575                    	s = __va_arg(ap, const char *);
000070  9801              LDR      r0,[sp,#4]
000072  c810              LDM      r0!,{r4}
000074  9001              STR      r0,[sp,#4]
;;;576                    	for ( ; *s; s++) 
000076  e00b              B        |L7.144|
                  |L7.120|
;;;577    					{
;;;578                        	USART_SendData(USARTx,*s);
000078  7821              LDRB     r1,[r4,#0]
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       USART_SendData
;;;579    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000080  bf00              NOP      
                  |L7.130|
000082  2140              MOVS     r1,#0x40
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       USART_GetFlagStatus
00008a  2800              CMP      r0,#0
00008c  d0f9              BEQ      |L7.130|
00008e  1c64              ADDS     r4,r4,#1              ;576
                  |L7.144|
000090  7820              LDRB     r0,[r4,#0]            ;576
000092  2800              CMP      r0,#0                 ;576
000094  d1f0              BNE      |L7.120|
;;;580                    	}
;;;581    					Data++;
000096  980f              LDR      r0,[sp,#0x3c]
000098  1c40              ADDS     r0,r0,#1
00009a  900f              STR      r0,[sp,#0x3c]
;;;582                    	break;
00009c  e020              B        |L7.224|
                  |L7.158|
;;;583                	case 'd':										 
;;;584                    	d = __va_arg(ap, int);
00009e  9801              LDR      r0,[sp,#4]
0000a0  c820              LDM      r0!,{r5}
0000a2  9001              STR      r0,[sp,#4]
;;;585    					
;;;586    					sprintf(buf, "%d", d);
0000a4  462a              MOV      r2,r5
0000a6  a11a              ADR      r1,|L7.272|
0000a8  a802              ADD      r0,sp,#8
0000aa  f7fffffe          BL       __2sprintf
;;;587                    	for (s = buf; *s; s++) 
0000ae  ac02              ADD      r4,sp,#8
0000b0  e00b              B        |L7.202|
                  |L7.178|
;;;588    					{
;;;589                        	USART_SendData(USARTx,*s);
0000b2  7821              LDRB     r1,[r4,#0]
0000b4  4630              MOV      r0,r6
0000b6  f7fffffe          BL       USART_SendData
;;;590    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000ba  bf00              NOP      
                  |L7.188|
0000bc  2140              MOVS     r1,#0x40
0000be  4630              MOV      r0,r6
0000c0  f7fffffe          BL       USART_GetFlagStatus
0000c4  2800              CMP      r0,#0
0000c6  d0f9              BEQ      |L7.188|
0000c8  1c64              ADDS     r4,r4,#1              ;587
                  |L7.202|
0000ca  7820              LDRB     r0,[r4,#0]            ;587
0000cc  2800              CMP      r0,#0                 ;587
0000ce  d1f0              BNE      |L7.178|
;;;591                    	}
;;;592    					Data++;
0000d0  980f              LDR      r0,[sp,#0x3c]
0000d2  1c40              ADDS     r0,r0,#1
0000d4  900f              STR      r0,[sp,#0x3c]
;;;593                    	break;
0000d6  e003              B        |L7.224|
                  |L7.216|
;;;594    				default:
;;;595    					Data++;
0000d8  980f              LDR      r0,[sp,#0x3c]
0000da  1c40              ADDS     r0,r0,#1
0000dc  900f              STR      r0,[sp,#0x3c]
;;;596    				    break;
0000de  bf00              NOP      
                  |L7.224|
0000e0  e006              B        |L7.240|
                  |L7.226|
;;;597    			}		 
;;;598    		}
;;;599    		else 
;;;600    			USART_SendData(USARTx, *Data++);
0000e2  980f              LDR      r0,[sp,#0x3c]
0000e4  f8101b01          LDRB     r1,[r0],#1
0000e8  900f              STR      r0,[sp,#0x3c]
0000ea  4630              MOV      r0,r6
0000ec  f7fffffe          BL       USART_SendData
                  |L7.240|
;;;601    		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000f0  bf00              NOP      
                  |L7.242|
0000f2  2140              MOVS     r1,#0x40
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       USART_GetFlagStatus
0000fa  2800              CMP      r0,#0
0000fc  d0f9              BEQ      |L7.242|
                  |L7.254|
0000fe  980f              LDR      r0,[sp,#0x3c]         ;551
000100  7800              LDRB     r0,[r0,#0]            ;551
000102  2800              CMP      r0,#0                 ;551
000104  d187              BNE      |L7.22|
;;;602    	}
;;;603    }
000106  b00a              ADD      sp,sp,#0x28
000108  bc70              POP      {r4-r6}
00010a  f85dfb14          LDR      pc,[sp],#0x14
;;;604    
                          ENDP

00010e  0000              DCW      0x0000
                  |L7.272|
000110  256400            DCB      "%d",0
000113  00                DCB      0

                          AREA ||i.usart1_init||, CODE, READONLY, ALIGN=2

                  usart1_init PROC
;;;116    */
;;;117    void usart1_init(u32 band_rate, u8 word_length, u8 parity, u8 stop_bit)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;118    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;119    	
;;;120    	USART_InitTypeDef usart_init_structre;
;;;121    	
;;;122    	usart_init_structre.USART_BaudRate = band_rate;
00000c  9700              STR      r7,[sp,#0]
;;;123    	usart_init_structre.USART_WordLength = word_length;
00000e  f8ad4004          STRH     r4,[sp,#4]
;;;124    	usart_init_structre.USART_StopBits = stop_bit;
000012  f8ad6006          STRH     r6,[sp,#6]
;;;125    	usart_init_structre.USART_Parity = parity;
000016  f8ad5008          STRH     r5,[sp,#8]
;;;126    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00001a  2000              MOVS     r0,#0
00001c  f8ad000c          STRH     r0,[sp,#0xc]
;;;127    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000020  200c              MOVS     r0,#0xc
000022  f8ad000a          STRH     r0,[sp,#0xa]
;;;128    	USART_Init(USART1, &usart_init_structre);
000026  4669              MOV      r1,sp
000028  4807              LDR      r0,|L8.72|
00002a  f7fffffe          BL       USART_Init
;;;129    		
;;;130    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
00002e  2201              MOVS     r2,#1
000030  f2405125          MOV      r1,#0x525
000034  4804              LDR      r0,|L8.72|
000036  f7fffffe          BL       USART_ITConfig
;;;131    	
;;;132    	USART_Cmd(USART1, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  4802              LDR      r0,|L8.72|
00003e  f7fffffe          BL       USART_Cmd
;;;133    	
;;;134    }
000042  e8bd81ff          POP      {r0-r8,pc}
;;;135    
                          ENDP

000046  0000              DCW      0x0000
                  |L8.72|
                          DCD      0x40013800

                          AREA ||i.usart1_recv_data||, CODE, READONLY, ALIGN=2

                  usart1_recv_data PROC
;;;309    
;;;310    void usart1_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;311    {
;;;312    
;;;313    	if(timer_is_timeout_1ms(timer_uart1, 40) == 0)	//40ms没接收到数据认为接收数据完成		
000002  2128              MOVS     r1,#0x28
000004  200a              MOVS     r0,#0xa
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b978              CBNZ     r0,|L9.44|
;;;314    	{
;;;315    
;;;316    		USART_OUT(USART2, usart1_buff);
00000c  4908              LDR      r1,|L9.48|
00000e  4809              LDR      r0,|L9.52|
000010  f7fffffe          BL       USART_OUT
;;;317    		USART_OUT(USART1, usart1_buff);
000014  4906              LDR      r1,|L9.48|
000016  4808              LDR      r0,|L9.56|
000018  f7fffffe          BL       USART_OUT
;;;318    		
;;;319    		memset(usart1_buff, 0, 512);	
00001c  f44f7100          MOV      r1,#0x200
000020  4803              LDR      r0,|L9.48|
000022  f7fffffe          BL       __aeabi_memclr
;;;320    		usart1_cnt = 0;	
000026  2000              MOVS     r0,#0
000028  4904              LDR      r1,|L9.60|
00002a  8008              STRH     r0,[r1,#0]
                  |L9.44|
;;;321    	}
;;;322    
;;;323    }
00002c  bd10              POP      {r4,pc}
;;;324    
                          ENDP

00002e  0000              DCW      0x0000
                  |L9.48|
                          DCD      usart1_buff
                  |L9.52|
                          DCD      0x40004400
                  |L9.56|
                          DCD      0x40013800
                  |L9.60|
                          DCD      usart1_cnt

                          AREA ||i.usart2_init||, CODE, READONLY, ALIGN=2

                  usart2_init PROC
;;;154    */
;;;155    void usart2_init(u32 band_rate)
000000  b51f              PUSH     {r0-r4,lr}
;;;156    {
000002  4604              MOV      r4,r0
;;;157    	USART_InitTypeDef usart_init_structre;
;;;158    	
;;;159    	usart_init_structre.USART_BaudRate = band_rate;
000004  9400              STR      r4,[sp,#0]
;;;160    	usart_init_structre.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;161    	usart_init_structre.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;162    	usart_init_structre.USART_Parity = USART_Parity_No;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;163    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;164    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;165    	USART_Init(USART2, &usart_init_structre);
00001e  4669              MOV      r1,sp
000020  4806              LDR      r0,|L10.60|
000022  f7fffffe          BL       USART_Init
;;;166    		
;;;167    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000026  2201              MOVS     r2,#1
000028  f2405125          MOV      r1,#0x525
00002c  4803              LDR      r0,|L10.60|
00002e  f7fffffe          BL       USART_ITConfig
;;;168    	
;;;169    	USART_Cmd(USART2, ENABLE);
000032  2101              MOVS     r1,#1
000034  4801              LDR      r0,|L10.60|
000036  f7fffffe          BL       USART_Cmd
;;;170    	
;;;171    }
00003a  bd1f              POP      {r0-r4,pc}
;;;172    
                          ENDP

                  |L10.60|
                          DCD      0x40004400

                          AREA ||i.usart2_recv_data||, CODE, READONLY, ALIGN=2

                  usart2_recv_data PROC
;;;376    
;;;377    void usart2_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;378    {		
;;;379    	if(timer_is_timeout_1ms(timer_uart2, 40) == 0)	//40ms没接收到数据认为接收数据完成		
000002  2128              MOVS     r1,#0x28
000004  200b              MOVS     r0,#0xb
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b988              CBNZ     r0,|L11.48|
;;;380    	{
;;;381    		
;;;382    		USART_OUT(USART1, usart2_buff);
00000c  4909              LDR      r1,|L11.52|
00000e  480a              LDR      r0,|L11.56|
000010  f7fffffe          BL       USART_OUT
;;;383    		memcpy(protocol_buff, usart2_buff, 512);
000014  f44f7200          MOV      r2,#0x200
000018  4906              LDR      r1,|L11.52|
00001a  4808              LDR      r0,|L11.60|
00001c  f7fffffe          BL       __aeabi_memcpy
;;;384    		
;;;385    		memset(usart2_buff, 0, 512);	
000020  f44f7100          MOV      r1,#0x200
000024  4803              LDR      r0,|L11.52|
000026  f7fffffe          BL       __aeabi_memclr
;;;386    		usart2_cnt = 0;	
00002a  2000              MOVS     r0,#0
00002c  4904              LDR      r1,|L11.64|
00002e  8008              STRH     r0,[r1,#0]
                  |L11.48|
;;;387    		
;;;388    	}	
;;;389    }
000030  bd10              POP      {r4,pc}
;;;390    
                          ENDP

000032  0000              DCW      0x0000
                  |L11.52|
                          DCD      usart2_buff
                  |L11.56|
                          DCD      0x40013800
                  |L11.60|
                          DCD      protocol_buff
                  |L11.64|
                          DCD      usart2_cnt

                          AREA ||i.usart3_init||, CODE, READONLY, ALIGN=2

                  usart3_init PROC
;;;190    */
;;;191    void usart3_init(u32 band_rate)
000000  b51f              PUSH     {r0-r4,lr}
;;;192    {
000002  4604              MOV      r4,r0
;;;193    	USART_InitTypeDef usart_init_structre;
;;;194    	
;;;195    	usart_init_structre.USART_BaudRate = band_rate;
000004  9400              STR      r4,[sp,#0]
;;;196    	usart_init_structre.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;197    	usart_init_structre.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;198    	usart_init_structre.USART_Parity = USART_Parity_No;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;199    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;200    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;201    	USART_Init(USART3, &usart_init_structre);
00001e  4669              MOV      r1,sp
000020  4806              LDR      r0,|L12.60|
000022  f7fffffe          BL       USART_Init
;;;202    		
;;;203    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
000026  2201              MOVS     r2,#1
000028  f2405125          MOV      r1,#0x525
00002c  4803              LDR      r0,|L12.60|
00002e  f7fffffe          BL       USART_ITConfig
;;;204    	
;;;205    	USART_Cmd(USART3, ENABLE);
000032  2101              MOVS     r1,#1
000034  4801              LDR      r0,|L12.60|
000036  f7fffffe          BL       USART_Cmd
;;;206    	
;;;207    	
;;;208    
;;;209    }
00003a  bd1f              POP      {r0-r4,pc}
;;;210    
                          ENDP

                  |L12.60|
                          DCD      0x40004800

                          AREA ||i.usart3_recv_data||, CODE, READONLY, ALIGN=2

                  usart3_recv_data PROC
;;;455    */
;;;456    void usart3_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;457    {
;;;458    	
;;;459    	if(timer_is_timeout_1ms(timer_uart3, 50)==0)	//40ms没接收到数据认为接收数据完成		
000002  2132              MOVS     r1,#0x32
000004  200c              MOVS     r0,#0xc
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b988              CBNZ     r0,|L13.48|
;;;460    	{
;;;461    
;;;462    		USART_OUT(USART1, usart3_buff);
00000c  4909              LDR      r1,|L13.52|
00000e  480a              LDR      r0,|L13.56|
000010  f7fffffe          BL       USART_OUT
;;;463    		memcpy(gps_buff, usart3_buff, 512);
000014  f44f7200          MOV      r2,#0x200
000018  4906              LDR      r1,|L13.52|
00001a  4808              LDR      r0,|L13.60|
00001c  f7fffffe          BL       __aeabi_memcpy
;;;464    		
;;;465    		memset(usart3_buff, 0, 512);	
000020  f44f7100          MOV      r1,#0x200
000024  4803              LDR      r0,|L13.52|
000026  f7fffffe          BL       __aeabi_memclr
;;;466    		usart3_cnt = 0;	
00002a  2000              MOVS     r0,#0
00002c  4904              LDR      r1,|L13.64|
00002e  8008              STRH     r0,[r1,#0]
                  |L13.48|
;;;467    	}	
;;;468    }
000030  bd10              POP      {r4,pc}
;;;469    
                          ENDP

000032  0000              DCW      0x0000
                  |L13.52|
                          DCD      usart3_buff
                  |L13.56|
                          DCD      0x40013800
                  |L13.60|
                          DCD      gps_buff
                  |L13.64|
                          DCD      usart3_cnt

                          AREA ||i.usart4_init||, CODE, READONLY, ALIGN=2

                  usart4_init PROC
;;;227    */
;;;228    void usart4_init(u32 band_rate)
000000  b51f              PUSH     {r0-r4,lr}
;;;229    {
000002  4604              MOV      r4,r0
;;;230    	USART_InitTypeDef usart_init_structre;
;;;231    	
;;;232    	usart_init_structre.USART_BaudRate = band_rate;
000004  9400              STR      r4,[sp,#0]
;;;233    	usart_init_structre.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;234    	usart_init_structre.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;235    	usart_init_structre.USART_Parity = USART_Parity_No;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;236    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;237    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;238    	USART_Init(UART4, &usart_init_structre);
00001e  4669              MOV      r1,sp
000020  4806              LDR      r0,|L14.60|
000022  f7fffffe          BL       USART_Init
;;;239    		
;;;240    
;;;241    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);
000026  2201              MOVS     r2,#1
000028  f2405125          MOV      r1,#0x525
00002c  4803              LDR      r0,|L14.60|
00002e  f7fffffe          BL       USART_ITConfig
;;;242    	
;;;243    	
;;;244    	USART_Cmd(UART4, ENABLE);
000032  2101              MOVS     r1,#1
000034  4801              LDR      r0,|L14.60|
000036  f7fffffe          BL       USART_Cmd
;;;245    	
;;;246    	
;;;247    
;;;248    }
00003a  bd1f              POP      {r0-r4,pc}
;;;249    
                          ENDP

                  |L14.60|
                          DCD      0x40004c00

                          AREA ||i.usart_gpio_init||, CODE, READONLY, ALIGN=2

                  usart_gpio_init PROC
;;;58     
;;;59     void usart_gpio_init(void)
000000  b508              PUSH     {r3,lr}
;;;60     {
;;;61     	GPIO_InitTypeDef gpio_init_structure;
;;;62     	
;;;63     		// UART1
;;;64     	gpio_init_structure.GPIO_Pin = GPIO_Pin_9;				// UART1 TX				    
000002  f44f7000          MOV      r0,#0x200
000006  f8ad0000          STRH     r0,[sp,#0]
;;;65       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
00000a  2018              MOVS     r0,#0x18
00000c  f88d0003          STRB     r0,[sp,#3]
;;;66       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;67       	GPIO_Init(GPIOA, &gpio_init_structure);
000016  4669              MOV      r1,sp
000018  4823              LDR      r0,|L15.168|
00001a  f7fffffe          BL       GPIO_Init
;;;68     	gpio_init_structure.GPIO_Pin = GPIO_Pin_10;				
00001e  f44f6080          MOV      r0,#0x400
000022  f8ad0000          STRH     r0,[sp,#0]
;;;69       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000026  2004              MOVS     r0,#4
000028  f88d0003          STRB     r0,[sp,#3]
;;;70       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
00002c  2003              MOVS     r0,#3
00002e  f88d0002          STRB     r0,[sp,#2]
;;;71       	GPIO_Init(GPIOA, &gpio_init_structure);
000032  4669              MOV      r1,sp
000034  481c              LDR      r0,|L15.168|
000036  f7fffffe          BL       GPIO_Init
;;;72     	
;;;73     	// UART2
;;;74     	gpio_init_structure.GPIO_Pin = GPIO_Pin_2;				// UART2 TX				    
00003a  2004              MOVS     r0,#4
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;75       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
000040  2018              MOVS     r0,#0x18
000042  f88d0003          STRB     r0,[sp,#3]
;;;76       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
000046  2003              MOVS     r0,#3
000048  f88d0002          STRB     r0,[sp,#2]
;;;77       	GPIO_Init(GPIOA, &gpio_init_structure);
00004c  4669              MOV      r1,sp
00004e  4816              LDR      r0,|L15.168|
000050  f7fffffe          BL       GPIO_Init
;;;78     	gpio_init_structure.GPIO_Pin = GPIO_Pin_3;				
000054  2008              MOVS     r0,#8
000056  f8ad0000          STRH     r0,[sp,#0]
;;;79       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00005a  2004              MOVS     r0,#4
00005c  f88d0003          STRB     r0,[sp,#3]
;;;80       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
000060  2003              MOVS     r0,#3
000062  f88d0002          STRB     r0,[sp,#2]
;;;81       	GPIO_Init(GPIOA, &gpio_init_structure);
000066  4669              MOV      r1,sp
000068  480f              LDR      r0,|L15.168|
00006a  f7fffffe          BL       GPIO_Init
;;;82     
;;;83     
;;;84     	// UART3
;;;85     	gpio_init_structure.GPIO_Pin = GPIO_Pin_10;				// UART3 TX				    
00006e  f44f6080          MOV      r0,#0x400
000072  f8ad0000          STRH     r0,[sp,#0]
;;;86       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
000076  2018              MOVS     r0,#0x18
000078  f88d0003          STRB     r0,[sp,#3]
;;;87       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
00007c  2003              MOVS     r0,#3
00007e  f88d0002          STRB     r0,[sp,#2]
;;;88       	GPIO_Init(GPIOB, &gpio_init_structure);
000082  4669              MOV      r1,sp
000084  4809              LDR      r0,|L15.172|
000086  f7fffffe          BL       GPIO_Init
;;;89     	gpio_init_structure.GPIO_Pin = GPIO_Pin_11;				
00008a  f44f6000          MOV      r0,#0x800
00008e  f8ad0000          STRH     r0,[sp,#0]
;;;90       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000092  2004              MOVS     r0,#4
000094  f88d0003          STRB     r0,[sp,#3]
;;;91       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
000098  2003              MOVS     r0,#3
00009a  f88d0002          STRB     r0,[sp,#2]
;;;92       	GPIO_Init(GPIOB, &gpio_init_structure);
00009e  4669              MOV      r1,sp
0000a0  4802              LDR      r0,|L15.172|
0000a2  f7fffffe          BL       GPIO_Init
;;;93     	
;;;94     
;;;95     }
0000a6  bd08              POP      {r3,pc}
;;;96     
                          ENDP

                  |L15.168|
                          DCD      0x40010800
                  |L15.172|
                          DCD      0x40010c00

                          AREA ||i.usart_printf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  usart_printf PROC
;;;607    
;;;608    void usart_printf(USART_TypeDef* USARTx, uint16_t data_size, uint8_t *data,...)
000000  b40f              PUSH     {r0-r3}
;;;609    { 
000002  b5f0              PUSH     {r4-r7,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4607              MOV      r7,r0
000008  460d              MOV      r5,r1
;;;610    	const char *s;
;;;611        int d;  
;;;612        char buf[32];
;;;613        
;;;614    	va_list ap;
;;;615        __va_start(ap, data);
00000a  a811              ADD      r0,sp,#0x44
00000c  9000              STR      r0,[sp,#0]
;;;616    	
;;;617    	
;;;618    	USART_GetFlagStatus(USARTx, USART_FLAG_TC);	//
00000e  2140              MOVS     r1,#0x40
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       USART_GetFlagStatus
;;;619    	while(data_size--)
000016  e073              B        |L16.256|
                  |L16.24|
;;;620    	{				                         
;;;621    		if(*data==0x5c)
000018  9810              LDR      r0,[sp,#0x40]
00001a  7800              LDRB     r0,[r0,#0]
00001c  285c              CMP      r0,#0x5c
00001e  d11c              BNE      |L16.90|
;;;622    		{									
;;;623    			switch (*++data)
000020  9810              LDR      r0,[sp,#0x40]
000022  1c40              ADDS     r0,r0,#1
000024  9010              STR      r0,[sp,#0x40]
000026  7800              LDRB     r0,[r0,#0]
000028  286e              CMP      r0,#0x6e
00002a  d009              BEQ      |L16.64|
00002c  2872              CMP      r0,#0x72
00002e  d10f              BNE      |L16.80|
;;;624    			{
;;;625    				case 'r':							          
;;;626    					USART_SendData(USARTx, 0x0d);	   
000030  210d              MOVS     r1,#0xd
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       USART_SendData
;;;627    					data++;
000038  9810              LDR      r0,[sp,#0x40]
00003a  1c40              ADDS     r0,r0,#1
00003c  9010              STR      r0,[sp,#0x40]
;;;628    				break;
00003e  e00b              B        |L16.88|
                  |L16.64|
;;;629    				case 'n':							          
;;;630    					USART_SendData(USARTx, 0x0a);	
000040  210a              MOVS     r1,#0xa
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       USART_SendData
;;;631    					data++;
000048  9810              LDR      r0,[sp,#0x40]
00004a  1c40              ADDS     r0,r0,#1
00004c  9010              STR      r0,[sp,#0x40]
;;;632    				break;
00004e  e003              B        |L16.88|
                  |L16.80|
;;;633    				
;;;634    				default:
;;;635    					data++;
000050  9810              LDR      r0,[sp,#0x40]
000052  1c40              ADDS     r0,r0,#1
000054  9010              STR      r0,[sp,#0x40]
;;;636    			    break;
000056  bf00              NOP      
                  |L16.88|
000058  e04b              B        |L16.242|
                  |L16.90|
;;;637    			}						 
;;;638    		}
;;;639    		else if(*data=='%')
00005a  9810              LDR      r0,[sp,#0x40]
00005c  7800              LDRB     r0,[r0,#0]
00005e  2825              CMP      r0,#0x25
000060  d140              BNE      |L16.228|
;;;640    		{									  //
;;;641    			switch (*++data){				
000062  9810              LDR      r0,[sp,#0x40]
000064  1c40              ADDS     r0,r0,#1
000066  9010              STR      r0,[sp,#0x40]
000068  7800              LDRB     r0,[r0,#0]
00006a  2864              CMP      r0,#0x64
00006c  d018              BEQ      |L16.160|
00006e  2873              CMP      r0,#0x73
000070  d133              BNE      |L16.218|
;;;642    				case 's':										  
;;;643                    	s = __va_arg(ap, const char *);
000072  9800              LDR      r0,[sp,#0]
000074  c810              LDM      r0!,{r4}
000076  9000              STR      r0,[sp,#0]
;;;644                    	for ( ; *s; s++) 
000078  e00b              B        |L16.146|
                  |L16.122|
;;;645    					{
;;;646                        	USART_SendData(USARTx,*s);
00007a  7821              LDRB     r1,[r4,#0]
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       USART_SendData
;;;647    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000082  bf00              NOP      
                  |L16.132|
000084  2140              MOVS     r1,#0x40
000086  4638              MOV      r0,r7
000088  f7fffffe          BL       USART_GetFlagStatus
00008c  2800              CMP      r0,#0
00008e  d0f9              BEQ      |L16.132|
000090  1c64              ADDS     r4,r4,#1              ;644
                  |L16.146|
000092  7820              LDRB     r0,[r4,#0]            ;644
000094  2800              CMP      r0,#0                 ;644
000096  d1f0              BNE      |L16.122|
;;;648                    	}
;;;649    					data++;
000098  9810              LDR      r0,[sp,#0x40]
00009a  1c40              ADDS     r0,r0,#1
00009c  9010              STR      r0,[sp,#0x40]
;;;650                    	break;
00009e  e020              B        |L16.226|
                  |L16.160|
;;;651                	case 'd':										 
;;;652                    	d = __va_arg(ap, int);
0000a0  9800              LDR      r0,[sp,#0]
0000a2  c840              LDM      r0!,{r6}
0000a4  9000              STR      r0,[sp,#0]
;;;653    					
;;;654    					sprintf(buf, "%d", d);
0000a6  4632              MOV      r2,r6
0000a8  a11a              ADR      r1,|L16.276|
0000aa  a801              ADD      r0,sp,#4
0000ac  f7fffffe          BL       __2sprintf
;;;655                    	for (s = buf; *s; s++) 
0000b0  ac01              ADD      r4,sp,#4
0000b2  e00b              B        |L16.204|
                  |L16.180|
;;;656    					{
;;;657                        	USART_SendData(USARTx,*s);
0000b4  7821              LDRB     r1,[r4,#0]
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       USART_SendData
;;;658    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000bc  bf00              NOP      
                  |L16.190|
0000be  2140              MOVS     r1,#0x40
0000c0  4638              MOV      r0,r7
0000c2  f7fffffe          BL       USART_GetFlagStatus
0000c6  2800              CMP      r0,#0
0000c8  d0f9              BEQ      |L16.190|
0000ca  1c64              ADDS     r4,r4,#1              ;655
                  |L16.204|
0000cc  7820              LDRB     r0,[r4,#0]            ;655
0000ce  2800              CMP      r0,#0                 ;655
0000d0  d1f0              BNE      |L16.180|
;;;659                    	}
;;;660    					data++;
0000d2  9810              LDR      r0,[sp,#0x40]
0000d4  1c40              ADDS     r0,r0,#1
0000d6  9010              STR      r0,[sp,#0x40]
;;;661                    	break;
0000d8  e003              B        |L16.226|
                  |L16.218|
;;;662    				default:
;;;663    					data++;
0000da  9810              LDR      r0,[sp,#0x40]
0000dc  1c40              ADDS     r0,r0,#1
0000de  9010              STR      r0,[sp,#0x40]
;;;664    				    break;
0000e0  bf00              NOP      
                  |L16.226|
0000e2  e006              B        |L16.242|
                  |L16.228|
;;;665    			}		 
;;;666    		}
;;;667    		else 
;;;668    			USART_SendData(USARTx, *data++);
0000e4  9810              LDR      r0,[sp,#0x40]
0000e6  f8101b01          LDRB     r1,[r0],#1
0000ea  9010              STR      r0,[sp,#0x40]
0000ec  4638              MOV      r0,r7
0000ee  f7fffffe          BL       USART_SendData
                  |L16.242|
;;;669    		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000f2  bf00              NOP      
                  |L16.244|
0000f4  2140              MOVS     r1,#0x40
0000f6  4638              MOV      r0,r7
0000f8  f7fffffe          BL       USART_GetFlagStatus
0000fc  2800              CMP      r0,#0
0000fe  d0f9              BEQ      |L16.244|
                  |L16.256|
000100  1e28              SUBS     r0,r5,#0              ;619
000102  f1a50101          SUB      r1,r5,#1              ;619
000106  b28d              UXTH     r5,r1                 ;619
000108  d186              BNE      |L16.24|
;;;670    	}
;;;671    }
00010a  b009              ADD      sp,sp,#0x24
00010c  bcf0              POP      {r4-r7}
00010e  f85dfb14          LDR      pc,[sp],#0x14
;;;672    
                          ENDP

000112  0000              DCW      0x0000
                  |L16.276|
000114  256400            DCB      "%d",0
000117  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ||sb||
                          %        514
                  usart1_buff
                          %        512
                  usart2_buff
                          %        512
                  usart3_buff
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  usart1_rx_buff
                          DCD      ||sb||
                  usart2_rx_buff
                          DCD      ||sb||
                  usart3_rx_buff
                          DCD      ||sb||
                  usart1_cnt
00000c  0000              DCW      0x0000
                  usart2_cnt
00000e  0000              DCW      0x0000
                  usart3_cnt
000010  0000              DCW      0x0000
                  usart1_rx_status
000012  00                DCB      0x00
                  usart2_rx_status
000013  00                DCB      0x00
                  usart3_rx_status
000014  00                DCB      0x00
                  usart4_rx_status
000015  00                DCB      0x00
                  usart5_rx_status
000016  00                DCB      0x00
