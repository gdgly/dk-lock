; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\usart.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\usart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -I..\MQTT -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\usart.crf ..\driver\usart.c]
                          THUMB

                          AREA ||i.UART4_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART4_IRQHandler PROC
;;;380    */
;;;381    void UART4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;382    {
;;;383    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;384    
;;;385       	if (USART_GetITStatus(UART4, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  480e              LDR      r0,|L1.68|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b160              CBZ      r0,|L1.42|
;;;386        {   
;;;387    	    USART_ClearITPendingBit(UART4, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  480b              LDR      r0,|L1.68|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;388    		timer_is_timeout_1ms(timer_uart4, 0);
00001a  2100              MOVS     r1,#0
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       timer_is_timeout_1ms
;;;389    		
;;;390    //		if(usart4_rx_status == 0)
;;;391    		{
;;;392    			ch = USART_ReceiveData(UART4);	 
000022  4808              LDR      r0,|L1.68|
000024  f7fffffe          BL       USART_ReceiveData
000028  b2c4              UXTB     r4,r0
                  |L1.42|
;;;393    		
;;;394    		}	
;;;395    	}
;;;396    	
;;;397    	if(USART_GetITStatus(UART4, USART_IT_TXE) != RESET)                  
00002a  f2407127          MOV      r1,#0x727
00002e  4805              LDR      r0,|L1.68|
000030  f7fffffe          BL       USART_GetITStatus
000034  b128              CBZ      r0,|L1.66|
;;;398      	{ 
;;;399         	USART_ITConfig(UART4, USART_IT_TXE, DISABLE);					   
000036  2200              MOVS     r2,#0
000038  f2407127          MOV      r1,#0x727
00003c  4801              LDR      r0,|L1.68|
00003e  f7fffffe          BL       USART_ITConfig
                  |L1.66|
;;;400      	}	
;;;401    	
;;;402    }
000042  bd10              POP      {r4,pc}
;;;403    
                          ENDP

                  |L1.68|
                          DCD      0x40004c00

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;240    */
;;;241    void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;242    {
;;;243    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;244    	
;;;245       	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  4818              LDR      r0,|L2.108|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1f8              CBZ      r0,|L2.80|
;;;246        {   
;;;247    	    USART_ClearITPendingBit(USART1, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  4815              LDR      r0,|L2.108|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;248    				
;;;249            ch = USART_ReceiveData(USART1);	 
00001a  4814              LDR      r0,|L2.108|
00001c  f7fffffe          BL       USART_ReceiveData
000020  b2c4              UXTB     r4,r0
;;;250    		
;;;251    		timer_is_timeout_1ms(timer_uart1, 0);
000022  2100              MOVS     r1,#0
000024  200d              MOVS     r0,#0xd
000026  f7fffffe          BL       timer_is_timeout_1ms
;;;252    		
;;;253    //		if(usart1_rx_status == 0)
;;;254    		{
;;;255    			if (usart1_rx_buff.index < USART_BUFF_LENGHT)
00002a  4811              LDR      r0,|L2.112|
00002c  8800              LDRH     r0,[r0,#0]  ; usart1_rx_buff
00002e  f5b07f00          CMP      r0,#0x200
000032  da08              BGE      |L2.70|
;;;256    			{	
;;;257    				usart1_rx_buff.pdata[usart1_rx_buff.index++] = ch;
000034  480e              LDR      r0,|L2.112|
000036  8801              LDRH     r1,[r0,#0]  ; usart1_rx_buff
000038  8800              LDRH     r0,[r0,#0]  ; usart1_rx_buff
00003a  1c40              ADDS     r0,r0,#1
00003c  4a0c              LDR      r2,|L2.112|
00003e  8010              STRH     r0,[r2,#0]
000040  1c90              ADDS     r0,r2,#2
000042  5444              STRB     r4,[r0,r1]
000044  e004              B        |L2.80|
                  |L2.70|
;;;258    			}
;;;259    			else
;;;260    			{
;;;261    				memset(&usart1_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区		
000046  f2402102          MOV      r1,#0x202
00004a  4809              LDR      r0,|L2.112|
00004c  f7fffffe          BL       __aeabi_memclr
                  |L2.80|
;;;262    			}
;;;263    		}
;;;264    	}
;;;265    	
;;;266    	if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET)                  
000050  f2407127          MOV      r1,#0x727
000054  4805              LDR      r0,|L2.108|
000056  f7fffffe          BL       USART_GetITStatus
00005a  b128              CBZ      r0,|L2.104|
;;;267      	{ 
;;;268         	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);					   
00005c  2200              MOVS     r2,#0
00005e  f2407127          MOV      r1,#0x727
000062  4802              LDR      r0,|L2.108|
000064  f7fffffe          BL       USART_ITConfig
                  |L2.104|
;;;269      	}		
;;;270    
;;;271    }
000068  bd10              POP      {r4,pc}
;;;272    
                          ENDP

00006a  0000              DCW      0x0000
                  |L2.108|
                          DCD      0x40013800
                  |L2.112|
                          DCD      usart1_rx_buff

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;300    */
;;;301    void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;302    {
;;;303    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;304    
;;;305       	if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  4818              LDR      r0,|L3.108|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1f8              CBZ      r0,|L3.80|
;;;306        {   
;;;307    	    USART_ClearITPendingBit(USART2, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  4815              LDR      r0,|L3.108|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;308    		
;;;309    		timer_is_timeout_1ms(timer_uart2, 0);		//定时器清零		
00001a  2100              MOVS     r1,#0
00001c  200e              MOVS     r0,#0xe
00001e  f7fffffe          BL       timer_is_timeout_1ms
;;;310    //		if(usart2_rx_status == 0)
;;;311    		{
;;;312    			ch = USART_ReceiveData(USART2);	 
000022  4812              LDR      r0,|L3.108|
000024  f7fffffe          BL       USART_ReceiveData
000028  b2c4              UXTB     r4,r0
;;;313    			
;;;314    			if (usart2_rx_buff.index < USART_BUFF_LENGHT)
00002a  4811              LDR      r0,|L3.112|
00002c  8800              LDRH     r0,[r0,#0]  ; usart2_rx_buff
00002e  f5b07f00          CMP      r0,#0x200
000032  da08              BGE      |L3.70|
;;;315    			{			
;;;316    				usart2_rx_buff.pdata[usart2_rx_buff.index++] = ch;
000034  480e              LDR      r0,|L3.112|
000036  8801              LDRH     r1,[r0,#0]  ; usart2_rx_buff
000038  8800              LDRH     r0,[r0,#0]  ; usart2_rx_buff
00003a  1c40              ADDS     r0,r0,#1
00003c  4a0c              LDR      r2,|L3.112|
00003e  8010              STRH     r0,[r2,#0]
000040  1c90              ADDS     r0,r2,#2
000042  5444              STRB     r4,[r0,r1]
000044  e004              B        |L3.80|
                  |L3.70|
;;;317    
;;;318    			}
;;;319    			else
;;;320    			{
;;;321    				memset(&usart2_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区
000046  f2402102          MOV      r1,#0x202
00004a  4809              LDR      r0,|L3.112|
00004c  f7fffffe          BL       __aeabi_memclr
                  |L3.80|
;;;322    			}
;;;323    		}
;;;324    	}
;;;325    	
;;;326    	if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)                  
000050  f2407127          MOV      r1,#0x727
000054  4805              LDR      r0,|L3.108|
000056  f7fffffe          BL       USART_GetITStatus
00005a  b128              CBZ      r0,|L3.104|
;;;327      	{ 
;;;328         	USART_ITConfig(USART2, USART_IT_TXE, DISABLE);					   
00005c  2200              MOVS     r2,#0
00005e  f2407127          MOV      r1,#0x727
000062  4802              LDR      r0,|L3.108|
000064  f7fffffe          BL       USART_ITConfig
                  |L3.104|
;;;329      	}	
;;;330     	
;;;331    }
000068  bd10              POP      {r4,pc}
;;;332    
                          ENDP

00006a  0000              DCW      0x0000
                  |L3.108|
                          DCD      0x40004400
                  |L3.112|
                          DCD      usart2_rx_buff

                          AREA ||i.USART_OUT||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  USART_OUT PROC
;;;449    */
;;;450    void USART_OUT(USART_TypeDef* USARTx, uint8_t *Data,...)
000000  b40f              PUSH     {r0-r3}
;;;451    { 
000002  b570              PUSH     {r4-r6,lr}
000004  b08a              SUB      sp,sp,#0x28
000006  4606              MOV      r6,r0
;;;452    	const char *s;
;;;453        int d;  
;;;454        char buf[32];
;;;455        
;;;456    	va_list ap;
;;;457        __va_start(ap, Data);
000008  a810              ADD      r0,sp,#0x40
00000a  9001              STR      r0,[sp,#4]
;;;458    	
;;;459    	
;;;460    	USART_GetFlagStatus(USARTx, USART_FLAG_TC);	//
00000c  2140              MOVS     r1,#0x40
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       USART_GetFlagStatus
;;;461    	while(*Data != '\0')
000014  e073              B        |L4.254|
                  |L4.22|
;;;462    	{				                         
;;;463    		if(*Data==0x5c)
000016  980f              LDR      r0,[sp,#0x3c]
000018  7800              LDRB     r0,[r0,#0]
00001a  285c              CMP      r0,#0x5c
00001c  d11c              BNE      |L4.88|
;;;464    		{									
;;;465    			switch (*++Data)
00001e  980f              LDR      r0,[sp,#0x3c]
000020  1c40              ADDS     r0,r0,#1
000022  900f              STR      r0,[sp,#0x3c]
000024  7800              LDRB     r0,[r0,#0]
000026  286e              CMP      r0,#0x6e
000028  d009              BEQ      |L4.62|
00002a  2872              CMP      r0,#0x72
00002c  d10f              BNE      |L4.78|
;;;466    			{
;;;467    				case 'r':							          
;;;468    					USART_SendData(USARTx, 0x0d);	   
00002e  210d              MOVS     r1,#0xd
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       USART_SendData
;;;469    					Data++;
000036  980f              LDR      r0,[sp,#0x3c]
000038  1c40              ADDS     r0,r0,#1
00003a  900f              STR      r0,[sp,#0x3c]
;;;470    				break;
00003c  e00b              B        |L4.86|
                  |L4.62|
;;;471    				case 'n':							          
;;;472    					USART_SendData(USARTx, 0x0a);	
00003e  210a              MOVS     r1,#0xa
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       USART_SendData
;;;473    					Data++;
000046  980f              LDR      r0,[sp,#0x3c]
000048  1c40              ADDS     r0,r0,#1
00004a  900f              STR      r0,[sp,#0x3c]
;;;474    				break;
00004c  e003              B        |L4.86|
                  |L4.78|
;;;475    				
;;;476    				default:
;;;477    					Data++;
00004e  980f              LDR      r0,[sp,#0x3c]
000050  1c40              ADDS     r0,r0,#1
000052  900f              STR      r0,[sp,#0x3c]
;;;478    			    break;
000054  bf00              NOP      
                  |L4.86|
000056  e04b              B        |L4.240|
                  |L4.88|
;;;479    			}						 
;;;480    		}
;;;481    		else if(*Data=='%')
000058  980f              LDR      r0,[sp,#0x3c]
00005a  7800              LDRB     r0,[r0,#0]
00005c  2825              CMP      r0,#0x25
00005e  d140              BNE      |L4.226|
;;;482    		{									  //
;;;483    			switch (*++Data){				
000060  980f              LDR      r0,[sp,#0x3c]
000062  1c40              ADDS     r0,r0,#1
000064  900f              STR      r0,[sp,#0x3c]
000066  7800              LDRB     r0,[r0,#0]
000068  2864              CMP      r0,#0x64
00006a  d018              BEQ      |L4.158|
00006c  2873              CMP      r0,#0x73
00006e  d133              BNE      |L4.216|
;;;484    				case 's':										  
;;;485                    	s = __va_arg(ap, const char *);
000070  9801              LDR      r0,[sp,#4]
000072  c810              LDM      r0!,{r4}
000074  9001              STR      r0,[sp,#4]
;;;486                    	for ( ; *s; s++) 
000076  e00b              B        |L4.144|
                  |L4.120|
;;;487    					{
;;;488                        	USART_SendData(USARTx,*s);
000078  7821              LDRB     r1,[r4,#0]
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       USART_SendData
;;;489    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000080  bf00              NOP      
                  |L4.130|
000082  2140              MOVS     r1,#0x40
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       USART_GetFlagStatus
00008a  2800              CMP      r0,#0
00008c  d0f9              BEQ      |L4.130|
00008e  1c64              ADDS     r4,r4,#1              ;486
                  |L4.144|
000090  7820              LDRB     r0,[r4,#0]            ;486
000092  2800              CMP      r0,#0                 ;486
000094  d1f0              BNE      |L4.120|
;;;490                    	}
;;;491    					Data++;
000096  980f              LDR      r0,[sp,#0x3c]
000098  1c40              ADDS     r0,r0,#1
00009a  900f              STR      r0,[sp,#0x3c]
;;;492                    	break;
00009c  e020              B        |L4.224|
                  |L4.158|
;;;493                	case 'd':										 
;;;494                    	d = __va_arg(ap, int);
00009e  9801              LDR      r0,[sp,#4]
0000a0  c820              LDM      r0!,{r5}
0000a2  9001              STR      r0,[sp,#4]
;;;495    					
;;;496    					sprintf(buf, "%d", d);
0000a4  462a              MOV      r2,r5
0000a6  a11a              ADR      r1,|L4.272|
0000a8  a802              ADD      r0,sp,#8
0000aa  f7fffffe          BL       __2sprintf
;;;497                    	for (s = buf; *s; s++) 
0000ae  ac02              ADD      r4,sp,#8
0000b0  e00b              B        |L4.202|
                  |L4.178|
;;;498    					{
;;;499                        	USART_SendData(USARTx,*s);
0000b2  7821              LDRB     r1,[r4,#0]
0000b4  4630              MOV      r0,r6
0000b6  f7fffffe          BL       USART_SendData
;;;500    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000ba  bf00              NOP      
                  |L4.188|
0000bc  2140              MOVS     r1,#0x40
0000be  4630              MOV      r0,r6
0000c0  f7fffffe          BL       USART_GetFlagStatus
0000c4  2800              CMP      r0,#0
0000c6  d0f9              BEQ      |L4.188|
0000c8  1c64              ADDS     r4,r4,#1              ;497
                  |L4.202|
0000ca  7820              LDRB     r0,[r4,#0]            ;497
0000cc  2800              CMP      r0,#0                 ;497
0000ce  d1f0              BNE      |L4.178|
;;;501                    	}
;;;502    					Data++;
0000d0  980f              LDR      r0,[sp,#0x3c]
0000d2  1c40              ADDS     r0,r0,#1
0000d4  900f              STR      r0,[sp,#0x3c]
;;;503                    	break;
0000d6  e003              B        |L4.224|
                  |L4.216|
;;;504    				default:
;;;505    					Data++;
0000d8  980f              LDR      r0,[sp,#0x3c]
0000da  1c40              ADDS     r0,r0,#1
0000dc  900f              STR      r0,[sp,#0x3c]
;;;506    				    break;
0000de  bf00              NOP      
                  |L4.224|
0000e0  e006              B        |L4.240|
                  |L4.226|
;;;507    			}		 
;;;508    		}
;;;509    		else 
;;;510    			USART_SendData(USARTx, *Data++);
0000e2  980f              LDR      r0,[sp,#0x3c]
0000e4  f8101b01          LDRB     r1,[r0],#1
0000e8  900f              STR      r0,[sp,#0x3c]
0000ea  4630              MOV      r0,r6
0000ec  f7fffffe          BL       USART_SendData
                  |L4.240|
;;;511    		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000f0  bf00              NOP      
                  |L4.242|
0000f2  2140              MOVS     r1,#0x40
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       USART_GetFlagStatus
0000fa  2800              CMP      r0,#0
0000fc  d0f9              BEQ      |L4.242|
                  |L4.254|
0000fe  980f              LDR      r0,[sp,#0x3c]         ;461
000100  7800              LDRB     r0,[r0,#0]            ;461
000102  2800              CMP      r0,#0                 ;461
000104  d187              BNE      |L4.22|
;;;512    	}
;;;513    }
000106  b00a              ADD      sp,sp,#0x28
000108  bc70              POP      {r4-r6}
00010a  f85dfb14          LDR      pc,[sp],#0x14
;;;514    
                          ENDP

00010e  0000              DCW      0x0000
                  |L4.272|
000110  256400            DCB      "%d",0
000113  00                DCB      0

                          AREA ||i.usart1_init||, CODE, READONLY, ALIGN=2

                  usart1_init PROC
;;;131    */
;;;132    void usart1_init(u32 band_rate, u8 word_length, u8 parity, u8 stop_bit)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;133    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;134    	
;;;135    	USART_InitTypeDef usart_init_structre;
;;;136    	
;;;137    	usart_init_structre.USART_BaudRate = band_rate;
00000c  9700              STR      r7,[sp,#0]
;;;138    	usart_init_structre.USART_WordLength = word_length;
00000e  f8ad4004          STRH     r4,[sp,#4]
;;;139    	usart_init_structre.USART_StopBits = stop_bit;
000012  f8ad6006          STRH     r6,[sp,#6]
;;;140    	usart_init_structre.USART_Parity = parity;
000016  f8ad5008          STRH     r5,[sp,#8]
;;;141    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00001a  2000              MOVS     r0,#0
00001c  f8ad000c          STRH     r0,[sp,#0xc]
;;;142    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000020  200c              MOVS     r0,#0xc
000022  f8ad000a          STRH     r0,[sp,#0xa]
;;;143    	USART_Init(USART1, &usart_init_structre);
000026  4669              MOV      r1,sp
000028  4807              LDR      r0,|L5.72|
00002a  f7fffffe          BL       USART_Init
;;;144    		
;;;145    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
00002e  2201              MOVS     r2,#1
000030  f2405125          MOV      r1,#0x525
000034  4804              LDR      r0,|L5.72|
000036  f7fffffe          BL       USART_ITConfig
;;;146    	
;;;147    	USART_Cmd(USART1, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  4802              LDR      r0,|L5.72|
00003e  f7fffffe          BL       USART_Cmd
;;;148    	
;;;149    }
000042  e8bd81ff          POP      {r0-r8,pc}
;;;150    
                          ENDP

000046  0000              DCW      0x0000
                  |L5.72|
                          DCD      0x40013800

                          AREA ||i.usart1_recv_data||, CODE, READONLY, ALIGN=2

                  usart1_recv_data PROC
;;;272    
;;;273    void usart1_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;274    {
;;;275    	
;;;276    	if(timer_is_timeout_1ms(timer_uart1, 20) == 0)	//40ms没接收到数据认为接收数据完成		
000002  2114              MOVS     r1,#0x14
000004  200d              MOVS     r0,#0xd
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b950              CBNZ     r0,|L6.34|
;;;277    	{
;;;278    		
;;;279    		usart_send(USART1, usart1_rx_buff.pdata, usart1_rx_buff.index);
00000c  4805              LDR      r0,|L6.36|
00000e  8802              LDRH     r2,[r0,#0]  ; usart1_rx_buff
000010  1c81              ADDS     r1,r0,#2
000012  4805              LDR      r0,|L6.40|
000014  f7fffffe          BL       usart_send
;;;280    		
;;;281    		memset(&usart1_rx_buff, 0, sizeof(usart_buff_t));
000018  f2402102          MOV      r1,#0x202
00001c  4801              LDR      r0,|L6.36|
00001e  f7fffffe          BL       __aeabi_memclr
                  |L6.34|
;;;282    	}
;;;283    
;;;284    }
000022  bd10              POP      {r4,pc}
;;;285    
                          ENDP

                  |L6.36|
                          DCD      usart1_rx_buff
                  |L6.40|
                          DCD      0x40013800

                          AREA ||i.usart2_init||, CODE, READONLY, ALIGN=2

                  usart2_init PROC
;;;169    */
;;;170    void usart2_init(u32 band_rate)
000000  b51f              PUSH     {r0-r4,lr}
;;;171    {
000002  4604              MOV      r4,r0
;;;172    	USART_InitTypeDef usart_init_structre;
;;;173    	
;;;174    	usart_init_structre.USART_BaudRate = band_rate;
000004  9400              STR      r4,[sp,#0]
;;;175    	usart_init_structre.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;176    	usart_init_structre.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;177    	usart_init_structre.USART_Parity = USART_Parity_No;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;178    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;179    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;180    	USART_Init(USART2, &usart_init_structre);
00001e  4669              MOV      r1,sp
000020  4806              LDR      r0,|L7.60|
000022  f7fffffe          BL       USART_Init
;;;181    		
;;;182    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000026  2201              MOVS     r2,#1
000028  f2405125          MOV      r1,#0x525
00002c  4803              LDR      r0,|L7.60|
00002e  f7fffffe          BL       USART_ITConfig
;;;183    	
;;;184    	USART_Cmd(USART2, ENABLE);
000032  2101              MOVS     r1,#1
000034  4801              LDR      r0,|L7.60|
000036  f7fffffe          BL       USART_Cmd
;;;185    	
;;;186    }
00003a  bd1f              POP      {r0-r4,pc}
;;;187    
                          ENDP

                  |L7.60|
                          DCD      0x40004400

                          AREA ||i.usart2_recv_data||, CODE, READONLY, ALIGN=2

                  usart2_recv_data PROC
;;;333    
;;;334    void usart2_recv_data(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;335    {		
000002  b085              SUB      sp,sp,#0x14
;;;336    	char *p1 = NULL;
000004  2400              MOVS     r4,#0
;;;337    	char *p2 = NULL;
000006  2600              MOVS     r6,#0
;;;338    	char *p3 = NULL;
000008  2700              MOVS     r7,#0
;;;339    	u8 tmp_str[20] = {0};
00000a  2114              MOVS     r1,#0x14
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       __aeabi_memclr4
;;;340    	int data_len = 0;
000012  2500              MOVS     r5,#0
;;;341    	
;;;342    	if(timer_is_timeout_1ms(timer_uart2, 20) == 0)	//20ms没接收到数据认为接收数据完成		
000014  2114              MOVS     r1,#0x14
000016  200e              MOVS     r0,#0xe
000018  f7fffffe          BL       timer_is_timeout_1ms
00001c  2800              CMP      r0,#0
00001e  d12b              BNE      |L8.120|
;;;343    	{
;;;344    		p1 = strstr((const char*)usart2_rx_buff.pdata, "+IPD");
000020  a116              ADR      r1,|L8.124|
000022  4818              LDR      r0,|L8.132|
000024  f7fffffe          BL       strstr
000028  4604              MOV      r4,r0
;;;345    		if(p1 != NULL)
00002a  b1fc              CBZ      r4,|L8.108|
;;;346    		{
;;;347    			p2 = str_picked(p1, ",", ":", (char*)tmp_str);
00002c  466b              MOV      r3,sp
00002e  a216              ADR      r2,|L8.136|
000030  a116              ADR      r1,|L8.140|
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       str_picked
000038  4606              MOV      r6,r0
;;;348    			if(p2 != NULL)
00003a  b11e              CBZ      r6,|L8.68|
;;;349    			{
;;;350    				data_len = atoi((char*)tmp_str);
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       atoi
000042  4605              MOV      r5,r0
                  |L8.68|
;;;351    			}
;;;352    			
;;;353    			p3 = strstr((const char*)usart2_rx_buff.pdata, ":");
000044  a110              ADR      r1,|L8.136|
000046  480f              LDR      r0,|L8.132|
000048  f7fffffe          BL       strstr
00004c  4607              MOV      r7,r0
;;;354    			memcpy(mqtt_buff.pdata, p3+1, data_len);
00004e  462a              MOV      r2,r5
000050  1c79              ADDS     r1,r7,#1
000052  480f              LDR      r0,|L8.144|
000054  f7fffffe          BL       __aeabi_memcpy
;;;355    			mqtt_buff.index = data_len;
000058  490d              LDR      r1,|L8.144|
00005a  1e89              SUBS     r1,r1,#2
00005c  800d              STRH     r5,[r1,#0]
;;;356    			
;;;357    			usart_send(USART1, usart2_rx_buff.pdata, usart2_rx_buff.index);	
00005e  4809              LDR      r0,|L8.132|
000060  1e80              SUBS     r0,r0,#2
000062  8802              LDRH     r2,[r0,#0]  ; usart2_rx_buff
000064  1c81              ADDS     r1,r0,#2
000066  480b              LDR      r0,|L8.148|
000068  f7fffffe          BL       usart_send
                  |L8.108|
;;;358    		}		
;;;359    		
;;;360    		memset(&usart2_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区
00006c  f2402102          MOV      r1,#0x202
000070  4804              LDR      r0,|L8.132|
000072  1e80              SUBS     r0,r0,#2
000074  f7fffffe          BL       __aeabi_memclr
                  |L8.120|
;;;361    	}	
;;;362    }
000078  b005              ADD      sp,sp,#0x14
00007a  bdf0              POP      {r4-r7,pc}
;;;363    
                          ENDP

                  |L8.124|
00007c  2b495044          DCB      "+IPD",0
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L8.132|
                          DCD      usart2_rx_buff+0x2
                  |L8.136|
000088  3a00              DCB      ":",0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L8.140|
00008c  2c00              DCB      ",",0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L8.144|
                          DCD      mqtt_buff+0x2
                  |L8.148|
                          DCD      0x40013800

                          AREA ||i.usart4_init||, CODE, READONLY, ALIGN=2

                  usart4_init PROC
;;;205    */
;;;206    void usart4_init(u32 band_rate)
000000  b51f              PUSH     {r0-r4,lr}
;;;207    {
000002  4604              MOV      r4,r0
;;;208    	USART_InitTypeDef usart_init_structre;
;;;209    	
;;;210    	usart_init_structre.USART_BaudRate = band_rate;
000004  9400              STR      r4,[sp,#0]
;;;211    	usart_init_structre.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;212    	usart_init_structre.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;213    	usart_init_structre.USART_Parity = USART_Parity_No;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;214    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;215    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;216    	USART_Init(UART4, &usart_init_structre);
00001e  4669              MOV      r1,sp
000020  4806              LDR      r0,|L9.60|
000022  f7fffffe          BL       USART_Init
;;;217    		
;;;218    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);
000026  2201              MOVS     r2,#1
000028  f2405125          MOV      r1,#0x525
00002c  4803              LDR      r0,|L9.60|
00002e  f7fffffe          BL       USART_ITConfig
;;;219    	
;;;220    	USART_Cmd(UART4, ENABLE);
000032  2101              MOVS     r1,#1
000034  4801              LDR      r0,|L9.60|
000036  f7fffffe          BL       USART_Cmd
;;;221    	
;;;222    }
00003a  bd1f              POP      {r0-r4,pc}
;;;223    
                          ENDP

                  |L9.60|
                          DCD      0x40004c00

                          AREA ||i.usart4_recv_data||, CODE, READONLY, ALIGN=1

                  usart4_recv_data PROC
;;;418    */
;;;419    void usart4_recv_data(void)
000000  4770              BX       lr
;;;420    {
;;;421    //	if(timer_is_timeout_1ms(timer_uart4, 20) == 0)	//20ms没接收到数据认为接收数据完成		
;;;422    //	{
;;;423    //		USART_OUT(UART4, usart4_rx_buff->pdata);
;;;424    //		memset(usart4_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区
;;;425    //	}	
;;;426    }
;;;427    
                          ENDP


                          AREA ||i.usart_gpio_init||, CODE, READONLY, ALIGN=2

                  usart_gpio_init PROC
;;;62     
;;;63     void usart_gpio_init(void)
000000  b508              PUSH     {r3,lr}
;;;64     {
;;;65     	GPIO_InitTypeDef gpio_init_structure;
;;;66     	
;;;67     		// UART1
;;;68     	gpio_init_structure.GPIO_Pin = GPIO_Pin_9;				// UART1 TX				    
000002  f44f7000          MOV      r0,#0x200
000006  f8ad0000          STRH     r0,[sp,#0]
;;;69       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
00000a  2018              MOVS     r0,#0x18
00000c  f88d0003          STRB     r0,[sp,#3]
;;;70       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;71       	GPIO_Init(GPIOA, &gpio_init_structure);
000016  4669              MOV      r1,sp
000018  4831              LDR      r0,|L11.224|
00001a  f7fffffe          BL       GPIO_Init
;;;72     	gpio_init_structure.GPIO_Pin = GPIO_Pin_10;				
00001e  f44f6080          MOV      r0,#0x400
000022  f8ad0000          STRH     r0,[sp,#0]
;;;73       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000026  2004              MOVS     r0,#4
000028  f88d0003          STRB     r0,[sp,#3]
;;;74       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
00002c  2003              MOVS     r0,#3
00002e  f88d0002          STRB     r0,[sp,#2]
;;;75       	GPIO_Init(GPIOA, &gpio_init_structure);
000032  4669              MOV      r1,sp
000034  482a              LDR      r0,|L11.224|
000036  f7fffffe          BL       GPIO_Init
;;;76     	
;;;77     	// UART2
;;;78     	gpio_init_structure.GPIO_Pin = GPIO_Pin_2;				// UART2 TX				    
00003a  2004              MOVS     r0,#4
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;79       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
000040  2018              MOVS     r0,#0x18
000042  f88d0003          STRB     r0,[sp,#3]
;;;80       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
000046  2003              MOVS     r0,#3
000048  f88d0002          STRB     r0,[sp,#2]
;;;81       	GPIO_Init(GPIOA, &gpio_init_structure);
00004c  4669              MOV      r1,sp
00004e  4824              LDR      r0,|L11.224|
000050  f7fffffe          BL       GPIO_Init
;;;82     	gpio_init_structure.GPIO_Pin = GPIO_Pin_3;				
000054  2008              MOVS     r0,#8
000056  f8ad0000          STRH     r0,[sp,#0]
;;;83       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00005a  2004              MOVS     r0,#4
00005c  f88d0003          STRB     r0,[sp,#3]
;;;84       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
000060  2003              MOVS     r0,#3
000062  f88d0002          STRB     r0,[sp,#2]
;;;85       	GPIO_Init(GPIOA, &gpio_init_structure);
000066  4669              MOV      r1,sp
000068  481d              LDR      r0,|L11.224|
00006a  f7fffffe          BL       GPIO_Init
;;;86     
;;;87     
;;;88     	// UART3
;;;89     	gpio_init_structure.GPIO_Pin = GPIO_Pin_10;				// UART3 TX				    
00006e  f44f6080          MOV      r0,#0x400
000072  f8ad0000          STRH     r0,[sp,#0]
;;;90       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
000076  2018              MOVS     r0,#0x18
000078  f88d0003          STRB     r0,[sp,#3]
;;;91       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
00007c  2003              MOVS     r0,#3
00007e  f88d0002          STRB     r0,[sp,#2]
;;;92       	GPIO_Init(GPIOB, &gpio_init_structure);
000082  4669              MOV      r1,sp
000084  4817              LDR      r0,|L11.228|
000086  f7fffffe          BL       GPIO_Init
;;;93     	gpio_init_structure.GPIO_Pin = GPIO_Pin_11;				
00008a  f44f6000          MOV      r0,#0x800
00008e  f8ad0000          STRH     r0,[sp,#0]
;;;94       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000092  2004              MOVS     r0,#4
000094  f88d0003          STRB     r0,[sp,#3]
;;;95       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
000098  2003              MOVS     r0,#3
00009a  f88d0002          STRB     r0,[sp,#2]
;;;96       	GPIO_Init(GPIOB, &gpio_init_structure);
00009e  4669              MOV      r1,sp
0000a0  4810              LDR      r0,|L11.228|
0000a2  f7fffffe          BL       GPIO_Init
;;;97     	
;;;98     	
;;;99     	// UART4
;;;100    	gpio_init_structure.GPIO_Pin = GPIO_Pin_10;				// UART3 TX				    
0000a6  f44f6080          MOV      r0,#0x400
0000aa  f8ad0000          STRH     r0,[sp,#0]
;;;101      	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
0000ae  2018              MOVS     r0,#0x18
0000b0  f88d0003          STRB     r0,[sp,#3]
;;;102      	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
0000b4  2003              MOVS     r0,#3
0000b6  f88d0002          STRB     r0,[sp,#2]
;;;103      	GPIO_Init(GPIOC, &gpio_init_structure);
0000ba  4669              MOV      r1,sp
0000bc  480a              LDR      r0,|L11.232|
0000be  f7fffffe          BL       GPIO_Init
;;;104    	gpio_init_structure.GPIO_Pin = GPIO_Pin_11;				
0000c2  f44f6000          MOV      r0,#0x800
0000c6  f8ad0000          STRH     r0,[sp,#0]
;;;105      	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0000ca  2004              MOVS     r0,#4
0000cc  f88d0003          STRB     r0,[sp,#3]
;;;106      	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
0000d0  2003              MOVS     r0,#3
0000d2  f88d0002          STRB     r0,[sp,#2]
;;;107      	GPIO_Init(GPIOC, &gpio_init_structure);
0000d6  4669              MOV      r1,sp
0000d8  4803              LDR      r0,|L11.232|
0000da  f7fffffe          BL       GPIO_Init
;;;108    	
;;;109    
;;;110    }
0000de  bd08              POP      {r3,pc}
;;;111    
                          ENDP

                  |L11.224|
                          DCD      0x40010800
                  |L11.228|
                          DCD      0x40010c00
                  |L11.232|
                          DCD      0x40011000

                          AREA ||i.usart_send||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  usart_send PROC
;;;517    
;;;518    void usart_send(USART_TypeDef* USARTx, uint8_t *data, uint16_t data_size,...)
000000  b40f              PUSH     {r0-r3}
;;;519    { 
000002  b5f0              PUSH     {r4-r7,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4607              MOV      r7,r0
000008  4615              MOV      r5,r2
;;;520    	const char *s;
;;;521        int d;  
;;;522        char buf[32];
;;;523        
;;;524    	va_list ap;
;;;525        __va_start(ap, data);
00000a  a810              ADD      r0,sp,#0x40
00000c  9000              STR      r0,[sp,#0]
;;;526    	
;;;527    	
;;;528    	USART_GetFlagStatus(USARTx, USART_FLAG_TC);	//
00000e  2140              MOVS     r1,#0x40
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       USART_GetFlagStatus
;;;529    	while(data_size--)
000016  e073              B        |L12.256|
                  |L12.24|
;;;530    	{				                         
;;;531    		if(*data==0x5c)
000018  980f              LDR      r0,[sp,#0x3c]
00001a  7800              LDRB     r0,[r0,#0]
00001c  285c              CMP      r0,#0x5c
00001e  d11c              BNE      |L12.90|
;;;532    		{									
;;;533    			switch (*++data)
000020  980f              LDR      r0,[sp,#0x3c]
000022  1c40              ADDS     r0,r0,#1
000024  900f              STR      r0,[sp,#0x3c]
000026  7800              LDRB     r0,[r0,#0]
000028  286e              CMP      r0,#0x6e
00002a  d009              BEQ      |L12.64|
00002c  2872              CMP      r0,#0x72
00002e  d10f              BNE      |L12.80|
;;;534    			{
;;;535    				case 'r':							          
;;;536    					USART_SendData(USARTx, 0x0d);	   
000030  210d              MOVS     r1,#0xd
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       USART_SendData
;;;537    					data++;
000038  980f              LDR      r0,[sp,#0x3c]
00003a  1c40              ADDS     r0,r0,#1
00003c  900f              STR      r0,[sp,#0x3c]
;;;538    				break;
00003e  e00b              B        |L12.88|
                  |L12.64|
;;;539    				case 'n':							          
;;;540    					USART_SendData(USARTx, 0x0a);	
000040  210a              MOVS     r1,#0xa
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       USART_SendData
;;;541    					data++;
000048  980f              LDR      r0,[sp,#0x3c]
00004a  1c40              ADDS     r0,r0,#1
00004c  900f              STR      r0,[sp,#0x3c]
;;;542    				break;
00004e  e003              B        |L12.88|
                  |L12.80|
;;;543    				
;;;544    				default:
;;;545    					data++;
000050  980f              LDR      r0,[sp,#0x3c]
000052  1c40              ADDS     r0,r0,#1
000054  900f              STR      r0,[sp,#0x3c]
;;;546    			    break;
000056  bf00              NOP      
                  |L12.88|
000058  e04b              B        |L12.242|
                  |L12.90|
;;;547    			}						 
;;;548    		}
;;;549    		else if(*data=='%')
00005a  980f              LDR      r0,[sp,#0x3c]
00005c  7800              LDRB     r0,[r0,#0]
00005e  2825              CMP      r0,#0x25
000060  d140              BNE      |L12.228|
;;;550    		{									  //
;;;551    			switch (*++data){				
000062  980f              LDR      r0,[sp,#0x3c]
000064  1c40              ADDS     r0,r0,#1
000066  900f              STR      r0,[sp,#0x3c]
000068  7800              LDRB     r0,[r0,#0]
00006a  2864              CMP      r0,#0x64
00006c  d018              BEQ      |L12.160|
00006e  2873              CMP      r0,#0x73
000070  d133              BNE      |L12.218|
;;;552    				case 's':										  
;;;553                    	s = __va_arg(ap, const char *);
000072  9800              LDR      r0,[sp,#0]
000074  c810              LDM      r0!,{r4}
000076  9000              STR      r0,[sp,#0]
;;;554                    	for ( ; *s; s++) 
000078  e00b              B        |L12.146|
                  |L12.122|
;;;555    					{
;;;556                        	USART_SendData(USARTx,*s);
00007a  7821              LDRB     r1,[r4,#0]
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       USART_SendData
;;;557    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000082  bf00              NOP      
                  |L12.132|
000084  2140              MOVS     r1,#0x40
000086  4638              MOV      r0,r7
000088  f7fffffe          BL       USART_GetFlagStatus
00008c  2800              CMP      r0,#0
00008e  d0f9              BEQ      |L12.132|
000090  1c64              ADDS     r4,r4,#1              ;554
                  |L12.146|
000092  7820              LDRB     r0,[r4,#0]            ;554
000094  2800              CMP      r0,#0                 ;554
000096  d1f0              BNE      |L12.122|
;;;558                    	}
;;;559    					data++;
000098  980f              LDR      r0,[sp,#0x3c]
00009a  1c40              ADDS     r0,r0,#1
00009c  900f              STR      r0,[sp,#0x3c]
;;;560                    	break;
00009e  e020              B        |L12.226|
                  |L12.160|
;;;561                	case 'd':										 
;;;562                    	d = __va_arg(ap, int);
0000a0  9800              LDR      r0,[sp,#0]
0000a2  c840              LDM      r0!,{r6}
0000a4  9000              STR      r0,[sp,#0]
;;;563    
;;;564    					sprintf(buf, "%d", d);
0000a6  4632              MOV      r2,r6
0000a8  a11a              ADR      r1,|L12.276|
0000aa  a801              ADD      r0,sp,#4
0000ac  f7fffffe          BL       __2sprintf
;;;565                    	for (s = buf; *s; s++) 
0000b0  ac01              ADD      r4,sp,#4
0000b2  e00b              B        |L12.204|
                  |L12.180|
;;;566    					{
;;;567                        	USART_SendData(USARTx,*s);
0000b4  7821              LDRB     r1,[r4,#0]
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       USART_SendData
;;;568    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000bc  bf00              NOP      
                  |L12.190|
0000be  2140              MOVS     r1,#0x40
0000c0  4638              MOV      r0,r7
0000c2  f7fffffe          BL       USART_GetFlagStatus
0000c6  2800              CMP      r0,#0
0000c8  d0f9              BEQ      |L12.190|
0000ca  1c64              ADDS     r4,r4,#1              ;565
                  |L12.204|
0000cc  7820              LDRB     r0,[r4,#0]            ;565
0000ce  2800              CMP      r0,#0                 ;565
0000d0  d1f0              BNE      |L12.180|
;;;569                    	}
;;;570    					data++;
0000d2  980f              LDR      r0,[sp,#0x3c]
0000d4  1c40              ADDS     r0,r0,#1
0000d6  900f              STR      r0,[sp,#0x3c]
;;;571                    	break;
0000d8  e003              B        |L12.226|
                  |L12.218|
;;;572    				default:
;;;573    					data++;
0000da  980f              LDR      r0,[sp,#0x3c]
0000dc  1c40              ADDS     r0,r0,#1
0000de  900f              STR      r0,[sp,#0x3c]
;;;574    				    break;
0000e0  bf00              NOP      
                  |L12.226|
0000e2  e006              B        |L12.242|
                  |L12.228|
;;;575    			}		 
;;;576    		}
;;;577    		else 
;;;578    			USART_SendData(USARTx, *data++);
0000e4  980f              LDR      r0,[sp,#0x3c]
0000e6  f8101b01          LDRB     r1,[r0],#1
0000ea  900f              STR      r0,[sp,#0x3c]
0000ec  4638              MOV      r0,r7
0000ee  f7fffffe          BL       USART_SendData
                  |L12.242|
;;;579    		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000f2  bf00              NOP      
                  |L12.244|
0000f4  2140              MOVS     r1,#0x40
0000f6  4638              MOV      r0,r7
0000f8  f7fffffe          BL       USART_GetFlagStatus
0000fc  2800              CMP      r0,#0
0000fe  d0f9              BEQ      |L12.244|
                  |L12.256|
000100  1e28              SUBS     r0,r5,#0              ;529
000102  f1a50101          SUB      r1,r5,#1              ;529
000106  b28d              UXTH     r5,r1                 ;529
000108  d186              BNE      |L12.24|
;;;580    	}
;;;581    	
;;;582    }
00010a  b009              ADD      sp,sp,#0x24
00010c  bcf0              POP      {r4-r7}
00010e  f85dfb14          LDR      pc,[sp],#0x14
;;;583    
                          ENDP

000112  0000              DCW      0x0000
                  |L12.276|
000114  256400            DCB      "%d",0
000117  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ||sb||
                          %        514
                  usart1_rx_buff
                          %        514
                  usart2_rx_buff
                          %        514
                  usart3_rx_buff
                          %        514
                  mqtt_buff
                          %        514

                          AREA ||.data||, DATA, ALIGN=0

                  usart1_rx_status
000000  00                DCB      0x00
                  usart2_rx_status
000001  00                DCB      0x00
                  usart3_rx_status
000002  00                DCB      0x00
                  usart4_rx_status
000003  00                DCB      0x00
