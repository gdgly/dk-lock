; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usart.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\usart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\usart.crf ..\driver\usart.c]
                          THUMB

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;227    */
;;;228    void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;229    {
;;;230    
;;;231    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;232    	
;;;233       	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  481e              LDR      r0,|L1.132|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b358              CBZ      r0,|L1.104|
;;;234        {   
;;;235    	    USART_ClearITPendingBit(USART1, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  481b              LDR      r0,|L1.132|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;236    				
;;;237            ch = USART_ReceiveData(USART1);	 
00001a  481a              LDR      r0,|L1.132|
00001c  f7fffffe          BL       USART_ReceiveData
000020  b2c4              UXTB     r4,r0
;;;238    		
;;;239    		timer_is_timeout_1ms(timer_uart1, 0);
000022  2100              MOVS     r1,#0
000024  200a              MOVS     r0,#0xa
000026  f7fffffe          BL       timer_is_timeout_1ms
;;;240    		
;;;241    //		if(usart1_rx_status == 0)
;;;242    		{
;;;243    			
;;;244    			if (usart1_cnt < USART_BUFF_LENGHT)
00002a  4817              LDR      r0,|L1.136|
00002c  8800              LDRH     r0,[r0,#0]  ; usart1_cnt
00002e  f5b07f00          CMP      r0,#0x200
000032  da0b              BGE      |L1.76|
;;;245    			{
;;;246    				
;;;247    				usart1_buff[usart1_cnt++] = ch;
000034  4814              LDR      r0,|L1.136|
000036  8801              LDRH     r1,[r0,#0]  ; usart1_cnt
000038  8800              LDRH     r0,[r0,#0]  ; usart1_cnt
00003a  1c40              ADDS     r0,r0,#1
00003c  4a12              LDR      r2,|L1.136|
00003e  8010              STRH     r0,[r2,#0]
000040  4812              LDR      r0,|L1.140|
000042  5444              STRB     r4,[r0,r1]
;;;248    //				USART_SendData(USART1, ch);	 
;;;249    				usart1_rx_status = 1;
000044  2001              MOVS     r0,#1
000046  4912              LDR      r1,|L1.144|
000048  7008              STRB     r0,[r1,#0]
00004a  e00d              B        |L1.104|
                  |L1.76|
;;;250    			}
;;;251    			else
;;;252    			{
;;;253    				memset(usart1_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区
00004c  f2402102          MOV      r1,#0x202
000050  4810              LDR      r0,|L1.148|
000052  6800              LDR      r0,[r0,#0]  ; usart1_rx_buff
000054  f7fffffe          BL       __aeabi_memclr
;;;254    				memset(usart1_buff, 0, 512);	
000058  f44f7100          MOV      r1,#0x200
00005c  480b              LDR      r0,|L1.140|
00005e  f7fffffe          BL       __aeabi_memclr
;;;255    				usart1_cnt = 0;			
000062  2000              MOVS     r0,#0
000064  4908              LDR      r1,|L1.136|
000066  8008              STRH     r0,[r1,#0]
                  |L1.104|
;;;256    			}
;;;257    		}
;;;258    	}
;;;259    	
;;;260    	if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET)                  
000068  f2407127          MOV      r1,#0x727
00006c  4805              LDR      r0,|L1.132|
00006e  f7fffffe          BL       USART_GetITStatus
000072  b128              CBZ      r0,|L1.128|
;;;261      	{ 
;;;262         	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);					   
000074  2200              MOVS     r2,#0
000076  f2407127          MOV      r1,#0x727
00007a  4802              LDR      r0,|L1.132|
00007c  f7fffffe          BL       USART_ITConfig
                  |L1.128|
;;;263      	}	
;;;264    	
;;;265    
;;;266    }
000080  bd10              POP      {r4,pc}
;;;267    
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      0x40013800
                  |L1.136|
                          DCD      usart1_cnt
                  |L1.140|
                          DCD      usart1_buff
                  |L1.144|
                          DCD      usart1_rx_status
                  |L1.148|
                          DCD      usart1_rx_buff

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;297    */
;;;298    void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;299    {
;;;300    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;301    
;;;302       	if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  481b              LDR      r0,|L2.120|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b328              CBZ      r0,|L2.92|
;;;303        {   
;;;304    	    USART_ClearITPendingBit(USART2, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  4818              LDR      r0,|L2.120|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;305    		
;;;306    		timer_is_timeout_1ms(timer_uart2, 0);		//定时器清零
00001a  2100              MOVS     r1,#0
00001c  200b              MOVS     r0,#0xb
00001e  f7fffffe          BL       timer_is_timeout_1ms
;;;307    		
;;;308    		if(usart2_rx_status == 0)
000022  4816              LDR      r0,|L2.124|
000024  7800              LDRB     r0,[r0,#0]  ; usart2_rx_status
000026  b9c8              CBNZ     r0,|L2.92|
;;;309    		{
;;;310    			ch = USART_ReceiveData(USART2);	 
000028  4813              LDR      r0,|L2.120|
00002a  f7fffffe          BL       USART_ReceiveData
00002e  b2c4              UXTB     r4,r0
;;;311    			
;;;312    			if (usart2_cnt < USART_BUFF_LENGHT)
000030  4813              LDR      r0,|L2.128|
000032  8800              LDRH     r0,[r0,#0]  ; usart2_cnt
000034  f5b07f00          CMP      r0,#0x200
000038  da08              BGE      |L2.76|
;;;313    			{			
;;;314    				usart2_buff[usart2_cnt++] = ch;
00003a  4811              LDR      r0,|L2.128|
00003c  8801              LDRH     r1,[r0,#0]  ; usart2_cnt
00003e  8800              LDRH     r0,[r0,#0]  ; usart2_cnt
000040  1c40              ADDS     r0,r0,#1
000042  4a0f              LDR      r2,|L2.128|
000044  8010              STRH     r0,[r2,#0]
000046  480f              LDR      r0,|L2.132|
000048  5444              STRB     r4,[r0,r1]
00004a  e007              B        |L2.92|
                  |L2.76|
;;;315    
;;;316    			}
;;;317    			else
;;;318    			{
;;;319    //				memset(usart2_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区
;;;320    				memset(usart2_buff, 0, 512);	
00004c  f44f7100          MOV      r1,#0x200
000050  480c              LDR      r0,|L2.132|
000052  f7fffffe          BL       __aeabi_memclr
;;;321    				usart2_cnt = 0;			
000056  2000              MOVS     r0,#0
000058  4909              LDR      r1,|L2.128|
00005a  8008              STRH     r0,[r1,#0]
                  |L2.92|
;;;322    			}
;;;323    		}
;;;324    
;;;325    	}
;;;326    	
;;;327    	if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)                  
00005c  f2407127          MOV      r1,#0x727
000060  4805              LDR      r0,|L2.120|
000062  f7fffffe          BL       USART_GetITStatus
000066  b128              CBZ      r0,|L2.116|
;;;328      	{ 
;;;329         	USART_ITConfig(USART2, USART_IT_TXE, DISABLE);					   
000068  2200              MOVS     r2,#0
00006a  f2407127          MOV      r1,#0x727
00006e  4802              LDR      r0,|L2.120|
000070  f7fffffe          BL       USART_ITConfig
                  |L2.116|
;;;330      	}	
;;;331    	 	
;;;332    }
000074  bd10              POP      {r4,pc}
;;;333    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      0x40004400
                  |L2.124|
                          DCD      usart2_rx_status
                  |L2.128|
                          DCD      usart2_cnt
                  |L2.132|
                          DCD      usart2_buff

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;365    */
;;;366    void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;367    {
;;;368    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;369    
;;;370       	if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  481b              LDR      r0,|L3.120|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b328              CBZ      r0,|L3.92|
;;;371        {   
;;;372    	    USART_ClearITPendingBit(USART3, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  4818              LDR      r0,|L3.120|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;373    		timer_is_timeout_1ms(timer_uart3, 0);
00001a  2100              MOVS     r1,#0
00001c  200c              MOVS     r0,#0xc
00001e  f7fffffe          BL       timer_is_timeout_1ms
;;;374    		
;;;375    //		if(usart3_rx_status == 0)
;;;376    		{	
;;;377    			ch = USART_ReceiveData(USART3);	 
000022  4815              LDR      r0,|L3.120|
000024  f7fffffe          BL       USART_ReceiveData
000028  b2c4              UXTB     r4,r0
;;;378    
;;;379    			if (usart3_cnt < USART_BUFF_LENGHT)
00002a  4814              LDR      r0,|L3.124|
00002c  8800              LDRH     r0,[r0,#0]  ; usart3_cnt
00002e  f5b07f00          CMP      r0,#0x200
000032  da0b              BGE      |L3.76|
;;;380    			{
;;;381    				usart3_buff[usart3_cnt++] = ch;	
000034  4811              LDR      r0,|L3.124|
000036  8801              LDRH     r1,[r0,#0]  ; usart3_cnt
000038  8800              LDRH     r0,[r0,#0]  ; usart3_cnt
00003a  1c40              ADDS     r0,r0,#1
00003c  4a0f              LDR      r2,|L3.124|
00003e  8010              STRH     r0,[r2,#0]
000040  480f              LDR      r0,|L3.128|
000042  5444              STRB     r4,[r0,r1]
;;;382    				usart3_rx_status = 1;				
000044  2001              MOVS     r0,#1
000046  490f              LDR      r1,|L3.132|
000048  7008              STRB     r0,[r1,#0]
00004a  e007              B        |L3.92|
                  |L3.76|
;;;383    			}
;;;384    			else
;;;385    			{
;;;386    				memset(usart3_buff, 0, USART_BUFF_LENGHT);
00004c  f44f7100          MOV      r1,#0x200
000050  480b              LDR      r0,|L3.128|
000052  f7fffffe          BL       __aeabi_memclr
;;;387    				usart3_cnt = 0;
000056  2000              MOVS     r0,#0
000058  4908              LDR      r1,|L3.124|
00005a  8008              STRH     r0,[r1,#0]
                  |L3.92|
;;;388    			}
;;;389    		}	
;;;390    	}
;;;391    	
;;;392    	if(USART_GetITStatus(USART3, USART_IT_TXE) != RESET)                  
00005c  f2407127          MOV      r1,#0x727
000060  4805              LDR      r0,|L3.120|
000062  f7fffffe          BL       USART_GetITStatus
000066  b128              CBZ      r0,|L3.116|
;;;393      	{ 
;;;394         	USART_ITConfig(USART3, USART_IT_TXE, DISABLE);					   
000068  2200              MOVS     r2,#0
00006a  f2407127          MOV      r1,#0x727
00006e  4802              LDR      r0,|L3.120|
000070  f7fffffe          BL       USART_ITConfig
                  |L3.116|
;;;395      	}	
;;;396    	
;;;397    }
000074  bd10              POP      {r4,pc}
;;;398    
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      0x40004800
                  |L3.124|
                          DCD      usart3_cnt
                  |L3.128|
                          DCD      usart3_buff
                  |L3.132|
                          DCD      usart3_rx_status

                          AREA ||i.USART_OUT||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  USART_OUT PROC
;;;449    */
;;;450    void USART_OUT(USART_TypeDef* USARTx, uint8_t *Data,...)
000000  b40f              PUSH     {r0-r3}
;;;451    { 
000002  b570              PUSH     {r4-r6,lr}
000004  b08a              SUB      sp,sp,#0x28
000006  4606              MOV      r6,r0
;;;452    	const char *s;
;;;453        int d;  
;;;454        char buf[32];
;;;455        
;;;456    	va_list ap;
;;;457        __va_start(ap, Data);
000008  a810              ADD      r0,sp,#0x40
00000a  9001              STR      r0,[sp,#4]
;;;458    	
;;;459    	
;;;460    	USART_GetFlagStatus(USARTx, USART_FLAG_TC);	//
00000c  2140              MOVS     r1,#0x40
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       USART_GetFlagStatus
;;;461    	while(*Data != '\0')
000014  e073              B        |L4.254|
                  |L4.22|
;;;462    	{				                         
;;;463    		if(*Data==0x5c)
000016  980f              LDR      r0,[sp,#0x3c]
000018  7800              LDRB     r0,[r0,#0]
00001a  285c              CMP      r0,#0x5c
00001c  d11c              BNE      |L4.88|
;;;464    		{									
;;;465    			switch (*++Data)
00001e  980f              LDR      r0,[sp,#0x3c]
000020  1c40              ADDS     r0,r0,#1
000022  900f              STR      r0,[sp,#0x3c]
000024  7800              LDRB     r0,[r0,#0]
000026  286e              CMP      r0,#0x6e
000028  d009              BEQ      |L4.62|
00002a  2872              CMP      r0,#0x72
00002c  d10f              BNE      |L4.78|
;;;466    			{
;;;467    				case 'r':							          
;;;468    					USART_SendData(USARTx, 0x0d);	   
00002e  210d              MOVS     r1,#0xd
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       USART_SendData
;;;469    					Data++;
000036  980f              LDR      r0,[sp,#0x3c]
000038  1c40              ADDS     r0,r0,#1
00003a  900f              STR      r0,[sp,#0x3c]
;;;470    				break;
00003c  e00b              B        |L4.86|
                  |L4.62|
;;;471    				case 'n':							          
;;;472    					USART_SendData(USARTx, 0x0a);	
00003e  210a              MOVS     r1,#0xa
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       USART_SendData
;;;473    					Data++;
000046  980f              LDR      r0,[sp,#0x3c]
000048  1c40              ADDS     r0,r0,#1
00004a  900f              STR      r0,[sp,#0x3c]
;;;474    				break;
00004c  e003              B        |L4.86|
                  |L4.78|
;;;475    				
;;;476    				default:
;;;477    					Data++;
00004e  980f              LDR      r0,[sp,#0x3c]
000050  1c40              ADDS     r0,r0,#1
000052  900f              STR      r0,[sp,#0x3c]
;;;478    			    break;
000054  bf00              NOP      
                  |L4.86|
000056  e04b              B        |L4.240|
                  |L4.88|
;;;479    			}						 
;;;480    		}
;;;481    		else if(*Data=='%')
000058  980f              LDR      r0,[sp,#0x3c]
00005a  7800              LDRB     r0,[r0,#0]
00005c  2825              CMP      r0,#0x25
00005e  d140              BNE      |L4.226|
;;;482    		{									  //
;;;483    			switch (*++Data){				
000060  980f              LDR      r0,[sp,#0x3c]
000062  1c40              ADDS     r0,r0,#1
000064  900f              STR      r0,[sp,#0x3c]
000066  7800              LDRB     r0,[r0,#0]
000068  2864              CMP      r0,#0x64
00006a  d018              BEQ      |L4.158|
00006c  2873              CMP      r0,#0x73
00006e  d133              BNE      |L4.216|
;;;484    				case 's':										  
;;;485                    	s = __va_arg(ap, const char *);
000070  9801              LDR      r0,[sp,#4]
000072  c810              LDM      r0!,{r4}
000074  9001              STR      r0,[sp,#4]
;;;486                    	for ( ; *s; s++) 
000076  e00b              B        |L4.144|
                  |L4.120|
;;;487    					{
;;;488                        	USART_SendData(USARTx,*s);
000078  7821              LDRB     r1,[r4,#0]
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       USART_SendData
;;;489    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000080  bf00              NOP      
                  |L4.130|
000082  2140              MOVS     r1,#0x40
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       USART_GetFlagStatus
00008a  2800              CMP      r0,#0
00008c  d0f9              BEQ      |L4.130|
00008e  1c64              ADDS     r4,r4,#1              ;486
                  |L4.144|
000090  7820              LDRB     r0,[r4,#0]            ;486
000092  2800              CMP      r0,#0                 ;486
000094  d1f0              BNE      |L4.120|
;;;490                    	}
;;;491    					Data++;
000096  980f              LDR      r0,[sp,#0x3c]
000098  1c40              ADDS     r0,r0,#1
00009a  900f              STR      r0,[sp,#0x3c]
;;;492                    	break;
00009c  e020              B        |L4.224|
                  |L4.158|
;;;493                	case 'd':										 
;;;494                    	d = __va_arg(ap, int);
00009e  9801              LDR      r0,[sp,#4]
0000a0  c820              LDM      r0!,{r5}
0000a2  9001              STR      r0,[sp,#4]
;;;495    					
;;;496    					sprintf(buf, "%d", d);
0000a4  462a              MOV      r2,r5
0000a6  a11a              ADR      r1,|L4.272|
0000a8  a802              ADD      r0,sp,#8
0000aa  f7fffffe          BL       __2sprintf
;;;497                    	for (s = buf; *s; s++) 
0000ae  ac02              ADD      r4,sp,#8
0000b0  e00b              B        |L4.202|
                  |L4.178|
;;;498    					{
;;;499                        	USART_SendData(USARTx,*s);
0000b2  7821              LDRB     r1,[r4,#0]
0000b4  4630              MOV      r0,r6
0000b6  f7fffffe          BL       USART_SendData
;;;500    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000ba  bf00              NOP      
                  |L4.188|
0000bc  2140              MOVS     r1,#0x40
0000be  4630              MOV      r0,r6
0000c0  f7fffffe          BL       USART_GetFlagStatus
0000c4  2800              CMP      r0,#0
0000c6  d0f9              BEQ      |L4.188|
0000c8  1c64              ADDS     r4,r4,#1              ;497
                  |L4.202|
0000ca  7820              LDRB     r0,[r4,#0]            ;497
0000cc  2800              CMP      r0,#0                 ;497
0000ce  d1f0              BNE      |L4.178|
;;;501                    	}
;;;502    					Data++;
0000d0  980f              LDR      r0,[sp,#0x3c]
0000d2  1c40              ADDS     r0,r0,#1
0000d4  900f              STR      r0,[sp,#0x3c]
;;;503                    	break;
0000d6  e003              B        |L4.224|
                  |L4.216|
;;;504    				default:
;;;505    					Data++;
0000d8  980f              LDR      r0,[sp,#0x3c]
0000da  1c40              ADDS     r0,r0,#1
0000dc  900f              STR      r0,[sp,#0x3c]
;;;506    				    break;
0000de  bf00              NOP      
                  |L4.224|
0000e0  e006              B        |L4.240|
                  |L4.226|
;;;507    			}		 
;;;508    		}
;;;509    		else 
;;;510    			USART_SendData(USARTx, *Data++);
0000e2  980f              LDR      r0,[sp,#0x3c]
0000e4  f8101b01          LDRB     r1,[r0],#1
0000e8  900f              STR      r0,[sp,#0x3c]
0000ea  4630              MOV      r0,r6
0000ec  f7fffffe          BL       USART_SendData
                  |L4.240|
;;;511    		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000f0  bf00              NOP      
                  |L4.242|
0000f2  2140              MOVS     r1,#0x40
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       USART_GetFlagStatus
0000fa  2800              CMP      r0,#0
0000fc  d0f9              BEQ      |L4.242|
                  |L4.254|
0000fe  980f              LDR      r0,[sp,#0x3c]         ;461
000100  7800              LDRB     r0,[r0,#0]            ;461
000102  2800              CMP      r0,#0                 ;461
000104  d187              BNE      |L4.22|
;;;512    	}
;;;513    }
000106  b00a              ADD      sp,sp,#0x28
000108  bc70              POP      {r4-r6}
00010a  f85dfb14          LDR      pc,[sp],#0x14
;;;514    
                          ENDP

00010e  0000              DCW      0x0000
                  |L4.272|
000110  256400            DCB      "%d",0
000113  00                DCB      0

                          AREA ||i.usart1_init||, CODE, READONLY, ALIGN=2

                  usart1_init PROC
;;;116    */
;;;117    void usart1_init(u32 band_rate, u8 word_length, u8 parity, u8 stop_bit)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;118    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;119    	
;;;120    	USART_InitTypeDef usart_init_structre;
;;;121    	
;;;122    	usart_init_structre.USART_BaudRate = band_rate;
00000c  9700              STR      r7,[sp,#0]
;;;123    	usart_init_structre.USART_WordLength = word_length;
00000e  f8ad4004          STRH     r4,[sp,#4]
;;;124    	usart_init_structre.USART_StopBits = stop_bit;
000012  f8ad6006          STRH     r6,[sp,#6]
;;;125    	usart_init_structre.USART_Parity = parity;
000016  f8ad5008          STRH     r5,[sp,#8]
;;;126    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00001a  2000              MOVS     r0,#0
00001c  f8ad000c          STRH     r0,[sp,#0xc]
;;;127    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000020  200c              MOVS     r0,#0xc
000022  f8ad000a          STRH     r0,[sp,#0xa]
;;;128    	USART_Init(USART1, &usart_init_structre);
000026  4669              MOV      r1,sp
000028  4807              LDR      r0,|L5.72|
00002a  f7fffffe          BL       USART_Init
;;;129    		
;;;130    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
00002e  2201              MOVS     r2,#1
000030  f2405125          MOV      r1,#0x525
000034  4804              LDR      r0,|L5.72|
000036  f7fffffe          BL       USART_ITConfig
;;;131    	
;;;132    	USART_Cmd(USART1, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  4802              LDR      r0,|L5.72|
00003e  f7fffffe          BL       USART_Cmd
;;;133    	
;;;134    }
000042  e8bd81ff          POP      {r0-r8,pc}
;;;135    
                          ENDP

000046  0000              DCW      0x0000
                  |L5.72|
                          DCD      0x40013800

                          AREA ||i.usart1_recv_data||, CODE, READONLY, ALIGN=2

                  usart1_recv_data PROC
;;;267    
;;;268    void usart1_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;269    {
;;;270    
;;;271    	if(timer_is_timeout_1ms(timer_uart1, 40) == 0)	//40ms没接收到数据认为接收数据完成		
000002  2128              MOVS     r1,#0x28
000004  200a              MOVS     r0,#0xa
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b978              CBNZ     r0,|L6.44|
;;;272    	{
;;;273    
;;;274    		USART_OUT(USART2, usart1_buff);
00000c  4908              LDR      r1,|L6.48|
00000e  4809              LDR      r0,|L6.52|
000010  f7fffffe          BL       USART_OUT
;;;275    		USART_OUT(USART1, usart1_buff);
000014  4906              LDR      r1,|L6.48|
000016  4808              LDR      r0,|L6.56|
000018  f7fffffe          BL       USART_OUT
;;;276    		
;;;277    		memset(usart1_buff, 0, 512);	
00001c  f44f7100          MOV      r1,#0x200
000020  4803              LDR      r0,|L6.48|
000022  f7fffffe          BL       __aeabi_memclr
;;;278    		usart1_cnt = 0;	
000026  2000              MOVS     r0,#0
000028  4904              LDR      r1,|L6.60|
00002a  8008              STRH     r0,[r1,#0]
                  |L6.44|
;;;279    	}
;;;280    
;;;281    }
00002c  bd10              POP      {r4,pc}
;;;282    
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      usart1_buff
                  |L6.52|
                          DCD      0x40004400
                  |L6.56|
                          DCD      0x40013800
                  |L6.60|
                          DCD      usart1_cnt

                          AREA ||i.usart2_init||, CODE, READONLY, ALIGN=2

                  usart2_init PROC
;;;154    */
;;;155    void usart2_init(u32 band_rate)
000000  b51f              PUSH     {r0-r4,lr}
;;;156    {
000002  4604              MOV      r4,r0
;;;157    	USART_InitTypeDef usart_init_structre;
;;;158    	
;;;159    	usart_init_structre.USART_BaudRate = band_rate;
000004  9400              STR      r4,[sp,#0]
;;;160    	usart_init_structre.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;161    	usart_init_structre.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;162    	usart_init_structre.USART_Parity = USART_Parity_No;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;163    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;164    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;165    	USART_Init(USART2, &usart_init_structre);
00001e  4669              MOV      r1,sp
000020  4806              LDR      r0,|L7.60|
000022  f7fffffe          BL       USART_Init
;;;166    		
;;;167    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000026  2201              MOVS     r2,#1
000028  f2405125          MOV      r1,#0x525
00002c  4803              LDR      r0,|L7.60|
00002e  f7fffffe          BL       USART_ITConfig
;;;168    	
;;;169    	USART_Cmd(USART2, ENABLE);
000032  2101              MOVS     r1,#1
000034  4801              LDR      r0,|L7.60|
000036  f7fffffe          BL       USART_Cmd
;;;170    	
;;;171    }
00003a  bd1f              POP      {r0-r4,pc}
;;;172    
                          ENDP

                  |L7.60|
                          DCD      0x40004400

                          AREA ||i.usart2_recv_data||, CODE, READONLY, ALIGN=2

                  usart2_recv_data PROC
;;;334    
;;;335    void usart2_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;336    {		
;;;337    	if(timer_is_timeout_1ms(timer_uart2, 40) == 0)	//40ms没接收到数据认为接收数据完成		
000002  2128              MOVS     r1,#0x28
000004  200b              MOVS     r0,#0xb
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b988              CBNZ     r0,|L8.48|
;;;338    	{
;;;339    		
;;;340    		USART_OUT(USART1, usart2_buff);
00000c  4909              LDR      r1,|L8.52|
00000e  480a              LDR      r0,|L8.56|
000010  f7fffffe          BL       USART_OUT
;;;341    		memcpy(protocol_buff, usart2_buff, 512);
000014  f44f7200          MOV      r2,#0x200
000018  4906              LDR      r1,|L8.52|
00001a  4808              LDR      r0,|L8.60|
00001c  f7fffffe          BL       __aeabi_memcpy
;;;342    		
;;;343    		memset(usart2_buff, 0, 512);	
000020  f44f7100          MOV      r1,#0x200
000024  4803              LDR      r0,|L8.52|
000026  f7fffffe          BL       __aeabi_memclr
;;;344    		usart2_cnt = 0;	
00002a  2000              MOVS     r0,#0
00002c  4904              LDR      r1,|L8.64|
00002e  8008              STRH     r0,[r1,#0]
                  |L8.48|
;;;345    		
;;;346    	}	
;;;347    }
000030  bd10              POP      {r4,pc}
;;;348    
                          ENDP

000032  0000              DCW      0x0000
                  |L8.52|
                          DCD      usart2_buff
                  |L8.56|
                          DCD      0x40013800
                  |L8.60|
                          DCD      protocol_buff
                  |L8.64|
                          DCD      usart2_cnt

                          AREA ||i.usart3_init||, CODE, READONLY, ALIGN=2

                  usart3_init PROC
;;;190    */
;;;191    void usart3_init(u32 band_rate)
000000  b51f              PUSH     {r0-r4,lr}
;;;192    {
000002  4604              MOV      r4,r0
;;;193    	USART_InitTypeDef usart_init_structre;
;;;194    	
;;;195    	usart_init_structre.USART_BaudRate = band_rate;
000004  9400              STR      r4,[sp,#0]
;;;196    	usart_init_structre.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;197    	usart_init_structre.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;198    	usart_init_structre.USART_Parity = USART_Parity_No;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;199    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;200    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;201    	USART_Init(USART3, &usart_init_structre);
00001e  4669              MOV      r1,sp
000020  4806              LDR      r0,|L9.60|
000022  f7fffffe          BL       USART_Init
;;;202    		
;;;203    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
000026  2201              MOVS     r2,#1
000028  f2405125          MOV      r1,#0x525
00002c  4803              LDR      r0,|L9.60|
00002e  f7fffffe          BL       USART_ITConfig
;;;204    	
;;;205    	USART_Cmd(USART3, ENABLE);
000032  2101              MOVS     r1,#1
000034  4801              LDR      r0,|L9.60|
000036  f7fffffe          BL       USART_Cmd
;;;206    	
;;;207    	
;;;208    
;;;209    }
00003a  bd1f              POP      {r0-r4,pc}
;;;210    
                          ENDP

                  |L9.60|
                          DCD      0x40004800

                          AREA ||i.usart3_recv_data||, CODE, READONLY, ALIGN=2

                  usart3_recv_data PROC
;;;413    */
;;;414    void usart3_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;415    {
;;;416    	
;;;417    	if(timer_is_timeout_1ms(timer_uart3, 50)==0)	//40ms没接收到数据认为接收数据完成		
000002  2132              MOVS     r1,#0x32
000004  200c              MOVS     r0,#0xc
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b988              CBNZ     r0,|L10.48|
;;;418    	{
;;;419    
;;;420    		USART_OUT(USART1, usart3_buff);
00000c  4909              LDR      r1,|L10.52|
00000e  480a              LDR      r0,|L10.56|
000010  f7fffffe          BL       USART_OUT
;;;421    		memcpy(gps_buff, usart3_buff, 512);
000014  f44f7200          MOV      r2,#0x200
000018  4906              LDR      r1,|L10.52|
00001a  4808              LDR      r0,|L10.60|
00001c  f7fffffe          BL       __aeabi_memcpy
;;;422    		
;;;423    		memset(usart3_buff, 0, 512);	
000020  f44f7100          MOV      r1,#0x200
000024  4803              LDR      r0,|L10.52|
000026  f7fffffe          BL       __aeabi_memclr
;;;424    		usart3_cnt = 0;	
00002a  2000              MOVS     r0,#0
00002c  4904              LDR      r1,|L10.64|
00002e  8008              STRH     r0,[r1,#0]
                  |L10.48|
;;;425    	}	
;;;426    }
000030  bd10              POP      {r4,pc}
;;;427    
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      usart3_buff
                  |L10.56|
                          DCD      0x40013800
                  |L10.60|
                          DCD      gps_buff
                  |L10.64|
                          DCD      usart3_cnt

                          AREA ||i.usart_gpio_init||, CODE, READONLY, ALIGN=2

                  usart_gpio_init PROC
;;;58     
;;;59     void usart_gpio_init(void)
000000  b508              PUSH     {r3,lr}
;;;60     {
;;;61     	GPIO_InitTypeDef gpio_init_structure;
;;;62     	
;;;63     		// UART1
;;;64     	gpio_init_structure.GPIO_Pin = GPIO_Pin_9;				// UART1 TX				    
000002  f44f7000          MOV      r0,#0x200
000006  f8ad0000          STRH     r0,[sp,#0]
;;;65       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
00000a  2018              MOVS     r0,#0x18
00000c  f88d0003          STRB     r0,[sp,#3]
;;;66       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;67       	GPIO_Init(GPIOA, &gpio_init_structure);
000016  4669              MOV      r1,sp
000018  4823              LDR      r0,|L11.168|
00001a  f7fffffe          BL       GPIO_Init
;;;68     	gpio_init_structure.GPIO_Pin = GPIO_Pin_10;				
00001e  f44f6080          MOV      r0,#0x400
000022  f8ad0000          STRH     r0,[sp,#0]
;;;69       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000026  2004              MOVS     r0,#4
000028  f88d0003          STRB     r0,[sp,#3]
;;;70       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
00002c  2003              MOVS     r0,#3
00002e  f88d0002          STRB     r0,[sp,#2]
;;;71       	GPIO_Init(GPIOA, &gpio_init_structure);
000032  4669              MOV      r1,sp
000034  481c              LDR      r0,|L11.168|
000036  f7fffffe          BL       GPIO_Init
;;;72     	
;;;73     	// UART2
;;;74     	gpio_init_structure.GPIO_Pin = GPIO_Pin_2;				// UART2 TX				    
00003a  2004              MOVS     r0,#4
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;75       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
000040  2018              MOVS     r0,#0x18
000042  f88d0003          STRB     r0,[sp,#3]
;;;76       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
000046  2003              MOVS     r0,#3
000048  f88d0002          STRB     r0,[sp,#2]
;;;77       	GPIO_Init(GPIOA, &gpio_init_structure);
00004c  4669              MOV      r1,sp
00004e  4816              LDR      r0,|L11.168|
000050  f7fffffe          BL       GPIO_Init
;;;78     	gpio_init_structure.GPIO_Pin = GPIO_Pin_3;				
000054  2008              MOVS     r0,#8
000056  f8ad0000          STRH     r0,[sp,#0]
;;;79       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00005a  2004              MOVS     r0,#4
00005c  f88d0003          STRB     r0,[sp,#3]
;;;80       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
000060  2003              MOVS     r0,#3
000062  f88d0002          STRB     r0,[sp,#2]
;;;81       	GPIO_Init(GPIOA, &gpio_init_structure);
000066  4669              MOV      r1,sp
000068  480f              LDR      r0,|L11.168|
00006a  f7fffffe          BL       GPIO_Init
;;;82     
;;;83     
;;;84     	// UART3
;;;85     	gpio_init_structure.GPIO_Pin = GPIO_Pin_10;				// UART3 TX				    
00006e  f44f6080          MOV      r0,#0x400
000072  f8ad0000          STRH     r0,[sp,#0]
;;;86       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
000076  2018              MOVS     r0,#0x18
000078  f88d0003          STRB     r0,[sp,#3]
;;;87       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
00007c  2003              MOVS     r0,#3
00007e  f88d0002          STRB     r0,[sp,#2]
;;;88       	GPIO_Init(GPIOB, &gpio_init_structure);
000082  4669              MOV      r1,sp
000084  4809              LDR      r0,|L11.172|
000086  f7fffffe          BL       GPIO_Init
;;;89     	gpio_init_structure.GPIO_Pin = GPIO_Pin_11;				
00008a  f44f6000          MOV      r0,#0x800
00008e  f8ad0000          STRH     r0,[sp,#0]
;;;90       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000092  2004              MOVS     r0,#4
000094  f88d0003          STRB     r0,[sp,#3]
;;;91       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
000098  2003              MOVS     r0,#3
00009a  f88d0002          STRB     r0,[sp,#2]
;;;92       	GPIO_Init(GPIOB, &gpio_init_structure);
00009e  4669              MOV      r1,sp
0000a0  4802              LDR      r0,|L11.172|
0000a2  f7fffffe          BL       GPIO_Init
;;;93     	
;;;94     
;;;95     }
0000a6  bd08              POP      {r3,pc}
;;;96     
                          ENDP

                  |L11.168|
                          DCD      0x40010800
                  |L11.172|
                          DCD      0x40010c00

                          AREA ||i.usart_printf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  usart_printf PROC
;;;517    
;;;518    void usart_printf(USART_TypeDef* USARTx, uint16_t data_size, uint8_t *data,...)
000000  b40f              PUSH     {r0-r3}
;;;519    { 
000002  b5f0              PUSH     {r4-r7,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4607              MOV      r7,r0
000008  460d              MOV      r5,r1
;;;520    	const char *s;
;;;521        int d;  
;;;522        char buf[32];
;;;523        
;;;524    	va_list ap;
;;;525        __va_start(ap, data);
00000a  a811              ADD      r0,sp,#0x44
00000c  9000              STR      r0,[sp,#0]
;;;526    	
;;;527    	
;;;528    	USART_GetFlagStatus(USARTx, USART_FLAG_TC);	//
00000e  2140              MOVS     r1,#0x40
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       USART_GetFlagStatus
;;;529    	while(data_size--)
000016  e073              B        |L12.256|
                  |L12.24|
;;;530    	{				                         
;;;531    		if(*data==0x5c)
000018  9810              LDR      r0,[sp,#0x40]
00001a  7800              LDRB     r0,[r0,#0]
00001c  285c              CMP      r0,#0x5c
00001e  d11c              BNE      |L12.90|
;;;532    		{									
;;;533    			switch (*++data)
000020  9810              LDR      r0,[sp,#0x40]
000022  1c40              ADDS     r0,r0,#1
000024  9010              STR      r0,[sp,#0x40]
000026  7800              LDRB     r0,[r0,#0]
000028  286e              CMP      r0,#0x6e
00002a  d009              BEQ      |L12.64|
00002c  2872              CMP      r0,#0x72
00002e  d10f              BNE      |L12.80|
;;;534    			{
;;;535    				case 'r':							          
;;;536    					USART_SendData(USARTx, 0x0d);	   
000030  210d              MOVS     r1,#0xd
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       USART_SendData
;;;537    					data++;
000038  9810              LDR      r0,[sp,#0x40]
00003a  1c40              ADDS     r0,r0,#1
00003c  9010              STR      r0,[sp,#0x40]
;;;538    				break;
00003e  e00b              B        |L12.88|
                  |L12.64|
;;;539    				case 'n':							          
;;;540    					USART_SendData(USARTx, 0x0a);	
000040  210a              MOVS     r1,#0xa
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       USART_SendData
;;;541    					data++;
000048  9810              LDR      r0,[sp,#0x40]
00004a  1c40              ADDS     r0,r0,#1
00004c  9010              STR      r0,[sp,#0x40]
;;;542    				break;
00004e  e003              B        |L12.88|
                  |L12.80|
;;;543    				
;;;544    				default:
;;;545    					data++;
000050  9810              LDR      r0,[sp,#0x40]
000052  1c40              ADDS     r0,r0,#1
000054  9010              STR      r0,[sp,#0x40]
;;;546    			    break;
000056  bf00              NOP      
                  |L12.88|
000058  e04b              B        |L12.242|
                  |L12.90|
;;;547    			}						 
;;;548    		}
;;;549    		else if(*data=='%')
00005a  9810              LDR      r0,[sp,#0x40]
00005c  7800              LDRB     r0,[r0,#0]
00005e  2825              CMP      r0,#0x25
000060  d140              BNE      |L12.228|
;;;550    		{									  //
;;;551    			switch (*++data){				
000062  9810              LDR      r0,[sp,#0x40]
000064  1c40              ADDS     r0,r0,#1
000066  9010              STR      r0,[sp,#0x40]
000068  7800              LDRB     r0,[r0,#0]
00006a  2864              CMP      r0,#0x64
00006c  d018              BEQ      |L12.160|
00006e  2873              CMP      r0,#0x73
000070  d133              BNE      |L12.218|
;;;552    				case 's':										  
;;;553                    	s = __va_arg(ap, const char *);
000072  9800              LDR      r0,[sp,#0]
000074  c810              LDM      r0!,{r4}
000076  9000              STR      r0,[sp,#0]
;;;554                    	for ( ; *s; s++) 
000078  e00b              B        |L12.146|
                  |L12.122|
;;;555    					{
;;;556                        	USART_SendData(USARTx,*s);
00007a  7821              LDRB     r1,[r4,#0]
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       USART_SendData
;;;557    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000082  bf00              NOP      
                  |L12.132|
000084  2140              MOVS     r1,#0x40
000086  4638              MOV      r0,r7
000088  f7fffffe          BL       USART_GetFlagStatus
00008c  2800              CMP      r0,#0
00008e  d0f9              BEQ      |L12.132|
000090  1c64              ADDS     r4,r4,#1              ;554
                  |L12.146|
000092  7820              LDRB     r0,[r4,#0]            ;554
000094  2800              CMP      r0,#0                 ;554
000096  d1f0              BNE      |L12.122|
;;;558                    	}
;;;559    					data++;
000098  9810              LDR      r0,[sp,#0x40]
00009a  1c40              ADDS     r0,r0,#1
00009c  9010              STR      r0,[sp,#0x40]
;;;560                    	break;
00009e  e020              B        |L12.226|
                  |L12.160|
;;;561                	case 'd':										 
;;;562                    	d = __va_arg(ap, int);
0000a0  9800              LDR      r0,[sp,#0]
0000a2  c840              LDM      r0!,{r6}
0000a4  9000              STR      r0,[sp,#0]
;;;563    					
;;;564    					sprintf(buf, "%d", d);
0000a6  4632              MOV      r2,r6
0000a8  a11a              ADR      r1,|L12.276|
0000aa  a801              ADD      r0,sp,#4
0000ac  f7fffffe          BL       __2sprintf
;;;565                    	for (s = buf; *s; s++) 
0000b0  ac01              ADD      r4,sp,#4
0000b2  e00b              B        |L12.204|
                  |L12.180|
;;;566    					{
;;;567                        	USART_SendData(USARTx,*s);
0000b4  7821              LDRB     r1,[r4,#0]
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       USART_SendData
;;;568    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000bc  bf00              NOP      
                  |L12.190|
0000be  2140              MOVS     r1,#0x40
0000c0  4638              MOV      r0,r7
0000c2  f7fffffe          BL       USART_GetFlagStatus
0000c6  2800              CMP      r0,#0
0000c8  d0f9              BEQ      |L12.190|
0000ca  1c64              ADDS     r4,r4,#1              ;565
                  |L12.204|
0000cc  7820              LDRB     r0,[r4,#0]            ;565
0000ce  2800              CMP      r0,#0                 ;565
0000d0  d1f0              BNE      |L12.180|
;;;569                    	}
;;;570    					data++;
0000d2  9810              LDR      r0,[sp,#0x40]
0000d4  1c40              ADDS     r0,r0,#1
0000d6  9010              STR      r0,[sp,#0x40]
;;;571                    	break;
0000d8  e003              B        |L12.226|
                  |L12.218|
;;;572    				default:
;;;573    					data++;
0000da  9810              LDR      r0,[sp,#0x40]
0000dc  1c40              ADDS     r0,r0,#1
0000de  9010              STR      r0,[sp,#0x40]
;;;574    				    break;
0000e0  bf00              NOP      
                  |L12.226|
0000e2  e006              B        |L12.242|
                  |L12.228|
;;;575    			}		 
;;;576    		}
;;;577    		else 
;;;578    			USART_SendData(USARTx, *data++);
0000e4  9810              LDR      r0,[sp,#0x40]
0000e6  f8101b01          LDRB     r1,[r0],#1
0000ea  9010              STR      r0,[sp,#0x40]
0000ec  4638              MOV      r0,r7
0000ee  f7fffffe          BL       USART_SendData
                  |L12.242|
;;;579    		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000f2  bf00              NOP      
                  |L12.244|
0000f4  2140              MOVS     r1,#0x40
0000f6  4638              MOV      r0,r7
0000f8  f7fffffe          BL       USART_GetFlagStatus
0000fc  2800              CMP      r0,#0
0000fe  d0f9              BEQ      |L12.244|
                  |L12.256|
000100  1e28              SUBS     r0,r5,#0              ;529
000102  f1a50101          SUB      r1,r5,#1              ;529
000106  b28d              UXTH     r5,r1                 ;529
000108  d186              BNE      |L12.24|
;;;580    	}
;;;581    }
00010a  b009              ADD      sp,sp,#0x24
00010c  bcf0              POP      {r4-r7}
00010e  f85dfb14          LDR      pc,[sp],#0x14
;;;582    
                          ENDP

000112  0000              DCW      0x0000
                  |L12.276|
000114  256400            DCB      "%d",0
000117  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ||sb||
                          %        514
                  usart1_buff
                          %        512
                  usart2_buff
                          %        512
                  usart3_buff
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  usart1_rx_buff
                          DCD      ||sb||
                  usart2_rx_buff
                          DCD      ||sb||
                  usart3_rx_buff
                          DCD      ||sb||
                  usart1_cnt
00000c  0000              DCW      0x0000
                  usart2_cnt
00000e  0000              DCW      0x0000
                  usart3_cnt
000010  0000              DCW      0x0000
                  usart1_rx_status
000012  00                DCB      0x00
                  usart2_rx_status
000013  00                DCB      0x00
                  usart3_rx_status
000014  00                DCB      0x00
                  usart4_rx_status
000015  00                DCB      0x00
                  usart5_rx_status
000016  00                DCB      0x00
