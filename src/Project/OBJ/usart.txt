; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usart.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\usart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -I..\MQTT -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\usart.crf ..\driver\usart.c]
                          THUMB

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;231    */
;;;232    void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;233    {
;;;234    
;;;235    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;236    	
;;;237       	if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  481d              LDR      r0,|L1.128|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b318              CBZ      r0,|L1.88|
;;;238        {   
;;;239    	    USART_ClearITPendingBit(USART1, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  481a              LDR      r0,|L1.128|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;240    				
;;;241            ch = USART_ReceiveData(USART1);	 
00001a  4819              LDR      r0,|L1.128|
00001c  f7fffffe          BL       USART_ReceiveData
000020  b2c4              UXTB     r4,r0
;;;242    		
;;;243    		timer_is_timeout_1ms(timer_uart1, 0);
000022  2100              MOVS     r1,#0
000024  200d              MOVS     r0,#0xd
000026  f7fffffe          BL       timer_is_timeout_1ms
;;;244    		
;;;245    		if(usart1_rx_status == 0)
00002a  4816              LDR      r0,|L1.132|
00002c  7800              LDRB     r0,[r0,#0]  ; usart1_rx_status
00002e  b998              CBNZ     r0,|L1.88|
;;;246    		{
;;;247    			if (usart1_rx_buff->index < USART_BUFF_LENGHT)
000030  4815              LDR      r0,|L1.136|
000032  6800              LDR      r0,[r0,#0]  ; usart1_rx_buff
000034  8800              LDRH     r0,[r0,#0]
000036  f5b07f00          CMP      r0,#0x200
00003a  da0e              BGE      |L1.90|
;;;248    			{	
;;;249    				usart1_rx_buff->pdata[usart1_rx_buff->index++] = ch;
00003c  4812              LDR      r0,|L1.136|
00003e  6800              LDR      r0,[r0,#0]  ; usart1_rx_buff
000040  8801              LDRH     r1,[r0,#0]
000042  4811              LDR      r0,|L1.136|
000044  6800              LDR      r0,[r0,#0]  ; usart1_rx_buff
000046  8800              LDRH     r0,[r0,#0]
000048  1c40              ADDS     r0,r0,#1
00004a  4a0f              LDR      r2,|L1.136|
00004c  6812              LDR      r2,[r2,#0]  ; usart1_rx_buff
00004e  8010              STRH     r0,[r2,#0]
000050  480d              LDR      r0,|L1.136|
000052  6800              LDR      r0,[r0,#0]  ; usart1_rx_buff
000054  1c80              ADDS     r0,r0,#2
000056  5444              STRB     r4,[r0,r1]
                  |L1.88|
000058  e005              B        |L1.102|
                  |L1.90|
;;;250    //				usart1_rx_status = 1;
;;;251    			}
;;;252    			else
;;;253    			{
;;;254    				memset(usart1_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区		
00005a  f2402102          MOV      r1,#0x202
00005e  480a              LDR      r0,|L1.136|
000060  6800              LDR      r0,[r0,#0]  ; usart1_rx_buff
000062  f7fffffe          BL       __aeabi_memclr
                  |L1.102|
;;;255    			}
;;;256    		}
;;;257    	}
;;;258    	
;;;259    	if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET)                  
000066  f2407127          MOV      r1,#0x727
00006a  4805              LDR      r0,|L1.128|
00006c  f7fffffe          BL       USART_GetITStatus
000070  b128              CBZ      r0,|L1.126|
;;;260      	{ 
;;;261         	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);					   
000072  2200              MOVS     r2,#0
000074  f2407127          MOV      r1,#0x727
000078  4801              LDR      r0,|L1.128|
00007a  f7fffffe          BL       USART_ITConfig
                  |L1.126|
;;;262      	}		
;;;263    
;;;264    }
00007e  bd10              POP      {r4,pc}
;;;265    
                          ENDP

                  |L1.128|
                          DCD      0x40013800
                  |L1.132|
                          DCD      usart1_rx_status
                  |L1.136|
                          DCD      usart1_rx_buff

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;295    */
;;;296    void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;297    {
;;;298    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;299    
;;;300       	if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  481c              LDR      r0,|L2.124|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b300              CBZ      r0,|L2.82|
;;;301        {   
;;;302    	    USART_ClearITPendingBit(USART2, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  4819              LDR      r0,|L2.124|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;303    		
;;;304    		timer_is_timeout_1ms(timer_uart2, 0);		//定时器清零
00001a  2100              MOVS     r1,#0
00001c  200e              MOVS     r0,#0xe
00001e  f7fffffe          BL       timer_is_timeout_1ms
;;;305    		
;;;306    //		if(usart2_rx_status == 0)
;;;307    		{
;;;308    			ch = USART_ReceiveData(USART2);	 
000022  4816              LDR      r0,|L2.124|
000024  f7fffffe          BL       USART_ReceiveData
000028  b2c4              UXTB     r4,r0
;;;309    			
;;;310    			if (usart2_rx_buff->index < USART_BUFF_LENGHT)
00002a  4815              LDR      r0,|L2.128|
00002c  6800              LDR      r0,[r0,#0]  ; usart2_rx_buff
00002e  8800              LDRH     r0,[r0,#0]
000030  f5b07f00          CMP      r0,#0x200
000034  da0e              BGE      |L2.84|
;;;311    			{			
;;;312    				usart2_rx_buff->pdata[usart2_rx_buff->index++] = ch;
000036  4812              LDR      r0,|L2.128|
000038  6800              LDR      r0,[r0,#0]  ; usart2_rx_buff
00003a  8801              LDRH     r1,[r0,#0]
00003c  4810              LDR      r0,|L2.128|
00003e  6800              LDR      r0,[r0,#0]  ; usart2_rx_buff
000040  8800              LDRH     r0,[r0,#0]
000042  1c40              ADDS     r0,r0,#1
000044  4a0e              LDR      r2,|L2.128|
000046  6812              LDR      r2,[r2,#0]  ; usart2_rx_buff
000048  8010              STRH     r0,[r2,#0]
00004a  480d              LDR      r0,|L2.128|
00004c  6800              LDR      r0,[r0,#0]  ; usart2_rx_buff
00004e  1c80              ADDS     r0,r0,#2
000050  5444              STRB     r4,[r0,r1]
                  |L2.82|
000052  e005              B        |L2.96|
                  |L2.84|
;;;313    //				USART_OUT(USART1, &ch);
;;;314    			}
;;;315    			else
;;;316    			{
;;;317    				memset(usart2_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区
000054  f2402102          MOV      r1,#0x202
000058  4809              LDR      r0,|L2.128|
00005a  6800              LDR      r0,[r0,#0]  ; usart2_rx_buff
00005c  f7fffffe          BL       __aeabi_memclr
                  |L2.96|
;;;318    			}
;;;319    		}
;;;320    	}
;;;321    	
;;;322    	if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)                  
000060  f2407127          MOV      r1,#0x727
000064  4805              LDR      r0,|L2.124|
000066  f7fffffe          BL       USART_GetITStatus
00006a  b128              CBZ      r0,|L2.120|
;;;323      	{ 
;;;324         	USART_ITConfig(USART2, USART_IT_TXE, DISABLE);					   
00006c  2200              MOVS     r2,#0
00006e  f2407127          MOV      r1,#0x727
000072  4802              LDR      r0,|L2.124|
000074  f7fffffe          BL       USART_ITConfig
                  |L2.120|
;;;325      	}	
;;;326     	
;;;327    }
000078  bd10              POP      {r4,pc}
;;;328    
                          ENDP

00007a  0000              DCW      0x0000
                  |L2.124|
                          DCD      0x40004400
                  |L2.128|
                          DCD      usart2_rx_buff

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;357    */
;;;358    void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;359    {
;;;360    	u8 ch = 0;	
000002  2400              MOVS     r4,#0
;;;361    
;;;362       	if (USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  481b              LDR      r0,|L3.120|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b328              CBZ      r0,|L3.92|
;;;363        {   
;;;364    	    USART_ClearITPendingBit(USART3, USART_IT_RXNE);	
000010  f2405125          MOV      r1,#0x525
000014  4818              LDR      r0,|L3.120|
000016  f7fffffe          BL       USART_ClearITPendingBit
;;;365    		timer_is_timeout_1ms(timer_uart3, 0);
00001a  2100              MOVS     r1,#0
00001c  200f              MOVS     r0,#0xf
00001e  f7fffffe          BL       timer_is_timeout_1ms
;;;366    		
;;;367    //		if(usart3_rx_status == 0)
;;;368    		{	
;;;369    			ch = USART_ReceiveData(USART3);	 
000022  4815              LDR      r0,|L3.120|
000024  f7fffffe          BL       USART_ReceiveData
000028  b2c4              UXTB     r4,r0
;;;370    
;;;371    			if (usart3_cnt < USART_BUFF_LENGHT)
00002a  4814              LDR      r0,|L3.124|
00002c  8800              LDRH     r0,[r0,#0]  ; usart3_cnt
00002e  f5b07f00          CMP      r0,#0x200
000032  da0b              BGE      |L3.76|
;;;372    			{
;;;373    				usart3_buff[usart3_cnt++] = ch;	
000034  4811              LDR      r0,|L3.124|
000036  8801              LDRH     r1,[r0,#0]  ; usart3_cnt
000038  8800              LDRH     r0,[r0,#0]  ; usart3_cnt
00003a  1c40              ADDS     r0,r0,#1
00003c  4a0f              LDR      r2,|L3.124|
00003e  8010              STRH     r0,[r2,#0]
000040  480f              LDR      r0,|L3.128|
000042  5444              STRB     r4,[r0,r1]
;;;374    				usart3_rx_status = 1;				
000044  2001              MOVS     r0,#1
000046  490f              LDR      r1,|L3.132|
000048  7008              STRB     r0,[r1,#0]
00004a  e007              B        |L3.92|
                  |L3.76|
;;;375    			}
;;;376    			else
;;;377    			{
;;;378    				memset(usart3_buff, 0, USART_BUFF_LENGHT);
00004c  f44f7100          MOV      r1,#0x200
000050  480b              LDR      r0,|L3.128|
000052  f7fffffe          BL       __aeabi_memclr
;;;379    				usart3_cnt = 0;
000056  2000              MOVS     r0,#0
000058  4908              LDR      r1,|L3.124|
00005a  8008              STRH     r0,[r1,#0]
                  |L3.92|
;;;380    			}
;;;381    		}	
;;;382    	}
;;;383    	
;;;384    	if(USART_GetITStatus(USART3, USART_IT_TXE) != RESET)                  
00005c  f2407127          MOV      r1,#0x727
000060  4805              LDR      r0,|L3.120|
000062  f7fffffe          BL       USART_GetITStatus
000066  b128              CBZ      r0,|L3.116|
;;;385      	{ 
;;;386         	USART_ITConfig(USART3, USART_IT_TXE, DISABLE);					   
000068  2200              MOVS     r2,#0
00006a  f2407127          MOV      r1,#0x727
00006e  4802              LDR      r0,|L3.120|
000070  f7fffffe          BL       USART_ITConfig
                  |L3.116|
;;;387      	}	
;;;388    	
;;;389    }
000074  bd10              POP      {r4,pc}
;;;390    
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      0x40004800
                  |L3.124|
                          DCD      usart3_cnt
                  |L3.128|
                          DCD      usart3_buff
                  |L3.132|
                          DCD      usart3_rx_status

                          AREA ||i.USART_OUT||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  USART_OUT PROC
;;;441    */
;;;442    void USART_OUT(USART_TypeDef* USARTx, uint8_t *Data,...)
000000  b40f              PUSH     {r0-r3}
;;;443    { 
000002  b570              PUSH     {r4-r6,lr}
000004  b08a              SUB      sp,sp,#0x28
000006  4606              MOV      r6,r0
;;;444    	const char *s;
;;;445        int d;  
;;;446        char buf[32];
;;;447        
;;;448    	va_list ap;
;;;449        __va_start(ap, Data);
000008  a810              ADD      r0,sp,#0x40
00000a  9001              STR      r0,[sp,#4]
;;;450    	
;;;451    	
;;;452    	USART_GetFlagStatus(USARTx, USART_FLAG_TC);	//
00000c  2140              MOVS     r1,#0x40
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       USART_GetFlagStatus
;;;453    	while(*Data != '\0')
000014  e073              B        |L4.254|
                  |L4.22|
;;;454    	{				                         
;;;455    		if(*Data==0x5c)
000016  980f              LDR      r0,[sp,#0x3c]
000018  7800              LDRB     r0,[r0,#0]
00001a  285c              CMP      r0,#0x5c
00001c  d11c              BNE      |L4.88|
;;;456    		{									
;;;457    			switch (*++Data)
00001e  980f              LDR      r0,[sp,#0x3c]
000020  1c40              ADDS     r0,r0,#1
000022  900f              STR      r0,[sp,#0x3c]
000024  7800              LDRB     r0,[r0,#0]
000026  286e              CMP      r0,#0x6e
000028  d009              BEQ      |L4.62|
00002a  2872              CMP      r0,#0x72
00002c  d10f              BNE      |L4.78|
;;;458    			{
;;;459    				case 'r':							          
;;;460    					USART_SendData(USARTx, 0x0d);	   
00002e  210d              MOVS     r1,#0xd
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       USART_SendData
;;;461    					Data++;
000036  980f              LDR      r0,[sp,#0x3c]
000038  1c40              ADDS     r0,r0,#1
00003a  900f              STR      r0,[sp,#0x3c]
;;;462    				break;
00003c  e00b              B        |L4.86|
                  |L4.62|
;;;463    				case 'n':							          
;;;464    					USART_SendData(USARTx, 0x0a);	
00003e  210a              MOVS     r1,#0xa
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       USART_SendData
;;;465    					Data++;
000046  980f              LDR      r0,[sp,#0x3c]
000048  1c40              ADDS     r0,r0,#1
00004a  900f              STR      r0,[sp,#0x3c]
;;;466    				break;
00004c  e003              B        |L4.86|
                  |L4.78|
;;;467    				
;;;468    				default:
;;;469    					Data++;
00004e  980f              LDR      r0,[sp,#0x3c]
000050  1c40              ADDS     r0,r0,#1
000052  900f              STR      r0,[sp,#0x3c]
;;;470    			    break;
000054  bf00              NOP      
                  |L4.86|
000056  e04b              B        |L4.240|
                  |L4.88|
;;;471    			}						 
;;;472    		}
;;;473    		else if(*Data=='%')
000058  980f              LDR      r0,[sp,#0x3c]
00005a  7800              LDRB     r0,[r0,#0]
00005c  2825              CMP      r0,#0x25
00005e  d140              BNE      |L4.226|
;;;474    		{									  //
;;;475    			switch (*++Data){				
000060  980f              LDR      r0,[sp,#0x3c]
000062  1c40              ADDS     r0,r0,#1
000064  900f              STR      r0,[sp,#0x3c]
000066  7800              LDRB     r0,[r0,#0]
000068  2864              CMP      r0,#0x64
00006a  d018              BEQ      |L4.158|
00006c  2873              CMP      r0,#0x73
00006e  d133              BNE      |L4.216|
;;;476    				case 's':										  
;;;477                    	s = __va_arg(ap, const char *);
000070  9801              LDR      r0,[sp,#4]
000072  c810              LDM      r0!,{r4}
000074  9001              STR      r0,[sp,#4]
;;;478                    	for ( ; *s; s++) 
000076  e00b              B        |L4.144|
                  |L4.120|
;;;479    					{
;;;480                        	USART_SendData(USARTx,*s);
000078  7821              LDRB     r1,[r4,#0]
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       USART_SendData
;;;481    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000080  bf00              NOP      
                  |L4.130|
000082  2140              MOVS     r1,#0x40
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       USART_GetFlagStatus
00008a  2800              CMP      r0,#0
00008c  d0f9              BEQ      |L4.130|
00008e  1c64              ADDS     r4,r4,#1              ;478
                  |L4.144|
000090  7820              LDRB     r0,[r4,#0]            ;478
000092  2800              CMP      r0,#0                 ;478
000094  d1f0              BNE      |L4.120|
;;;482                    	}
;;;483    					Data++;
000096  980f              LDR      r0,[sp,#0x3c]
000098  1c40              ADDS     r0,r0,#1
00009a  900f              STR      r0,[sp,#0x3c]
;;;484                    	break;
00009c  e020              B        |L4.224|
                  |L4.158|
;;;485                	case 'd':										 
;;;486                    	d = __va_arg(ap, int);
00009e  9801              LDR      r0,[sp,#4]
0000a0  c820              LDM      r0!,{r5}
0000a2  9001              STR      r0,[sp,#4]
;;;487    					
;;;488    					sprintf(buf, "%d", d);
0000a4  462a              MOV      r2,r5
0000a6  a11a              ADR      r1,|L4.272|
0000a8  a802              ADD      r0,sp,#8
0000aa  f7fffffe          BL       __2sprintf
;;;489                    	for (s = buf; *s; s++) 
0000ae  ac02              ADD      r4,sp,#8
0000b0  e00b              B        |L4.202|
                  |L4.178|
;;;490    					{
;;;491                        	USART_SendData(USARTx,*s);
0000b2  7821              LDRB     r1,[r4,#0]
0000b4  4630              MOV      r0,r6
0000b6  f7fffffe          BL       USART_SendData
;;;492    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000ba  bf00              NOP      
                  |L4.188|
0000bc  2140              MOVS     r1,#0x40
0000be  4630              MOV      r0,r6
0000c0  f7fffffe          BL       USART_GetFlagStatus
0000c4  2800              CMP      r0,#0
0000c6  d0f9              BEQ      |L4.188|
0000c8  1c64              ADDS     r4,r4,#1              ;489
                  |L4.202|
0000ca  7820              LDRB     r0,[r4,#0]            ;489
0000cc  2800              CMP      r0,#0                 ;489
0000ce  d1f0              BNE      |L4.178|
;;;493                    	}
;;;494    					Data++;
0000d0  980f              LDR      r0,[sp,#0x3c]
0000d2  1c40              ADDS     r0,r0,#1
0000d4  900f              STR      r0,[sp,#0x3c]
;;;495                    	break;
0000d6  e003              B        |L4.224|
                  |L4.216|
;;;496    				default:
;;;497    					Data++;
0000d8  980f              LDR      r0,[sp,#0x3c]
0000da  1c40              ADDS     r0,r0,#1
0000dc  900f              STR      r0,[sp,#0x3c]
;;;498    				    break;
0000de  bf00              NOP      
                  |L4.224|
0000e0  e006              B        |L4.240|
                  |L4.226|
;;;499    			}		 
;;;500    		}
;;;501    		else 
;;;502    			USART_SendData(USARTx, *Data++);
0000e2  980f              LDR      r0,[sp,#0x3c]
0000e4  f8101b01          LDRB     r1,[r0],#1
0000e8  900f              STR      r0,[sp,#0x3c]
0000ea  4630              MOV      r0,r6
0000ec  f7fffffe          BL       USART_SendData
                  |L4.240|
;;;503    		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000f0  bf00              NOP      
                  |L4.242|
0000f2  2140              MOVS     r1,#0x40
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       USART_GetFlagStatus
0000fa  2800              CMP      r0,#0
0000fc  d0f9              BEQ      |L4.242|
                  |L4.254|
0000fe  980f              LDR      r0,[sp,#0x3c]         ;453
000100  7800              LDRB     r0,[r0,#0]            ;453
000102  2800              CMP      r0,#0                 ;453
000104  d187              BNE      |L4.22|
;;;504    	}
;;;505    }
000106  b00a              ADD      sp,sp,#0x28
000108  bc70              POP      {r4-r6}
00010a  f85dfb14          LDR      pc,[sp],#0x14
;;;506    
                          ENDP

00010e  0000              DCW      0x0000
                  |L4.272|
000110  256400            DCB      "%d",0
000113  00                DCB      0

                          AREA ||i.usart1_init||, CODE, READONLY, ALIGN=2

                  usart1_init PROC
;;;120    */
;;;121    void usart1_init(u32 band_rate, u8 word_length, u8 parity, u8 stop_bit)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;122    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;123    	
;;;124    	USART_InitTypeDef usart_init_structre;
;;;125    	
;;;126    	usart_init_structre.USART_BaudRate = band_rate;
00000c  9700              STR      r7,[sp,#0]
;;;127    	usart_init_structre.USART_WordLength = word_length;
00000e  f8ad4004          STRH     r4,[sp,#4]
;;;128    	usart_init_structre.USART_StopBits = stop_bit;
000012  f8ad6006          STRH     r6,[sp,#6]
;;;129    	usart_init_structre.USART_Parity = parity;
000016  f8ad5008          STRH     r5,[sp,#8]
;;;130    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00001a  2000              MOVS     r0,#0
00001c  f8ad000c          STRH     r0,[sp,#0xc]
;;;131    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000020  200c              MOVS     r0,#0xc
000022  f8ad000a          STRH     r0,[sp,#0xa]
;;;132    	USART_Init(USART1, &usart_init_structre);
000026  4669              MOV      r1,sp
000028  4807              LDR      r0,|L5.72|
00002a  f7fffffe          BL       USART_Init
;;;133    		
;;;134    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
00002e  2201              MOVS     r2,#1
000030  f2405125          MOV      r1,#0x525
000034  4804              LDR      r0,|L5.72|
000036  f7fffffe          BL       USART_ITConfig
;;;135    	
;;;136    	USART_Cmd(USART1, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  4802              LDR      r0,|L5.72|
00003e  f7fffffe          BL       USART_Cmd
;;;137    	
;;;138    }
000042  e8bd81ff          POP      {r0-r8,pc}
;;;139    
                          ENDP

000046  0000              DCW      0x0000
                  |L5.72|
                          DCD      0x40013800

                          AREA ||i.usart1_recv_data||, CODE, READONLY, ALIGN=2

                  usart1_recv_data PROC
;;;265    
;;;266    void usart1_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;267    {
;;;268    
;;;269    	if(timer_is_timeout_1ms(timer_uart1, 20) == 0)	//40ms没接收到数据认为接收数据完成		
000002  2114              MOVS     r1,#0x14
000004  200d              MOVS     r0,#0xd
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b958              CBNZ     r0,|L6.36|
;;;270    	{
;;;271    		
;;;272    //		memcpy(gprs_buff, usart1_rx_buff, sizeof(usart_buff_t));
;;;273    		
;;;274    		USART_OUT(USART1, usart1_rx_buff->pdata);
00000c  4806              LDR      r0,|L6.40|
00000e  6801              LDR      r1,[r0,#0]  ; usart1_rx_buff
000010  1c89              ADDS     r1,r1,#2
000012  4806              LDR      r0,|L6.44|
000014  f7fffffe          BL       USART_OUT
;;;275    		
;;;276    		memset(usart1_rx_buff, 0, sizeof(usart_buff_t));
000018  f2402102          MOV      r1,#0x202
00001c  4802              LDR      r0,|L6.40|
00001e  6800              LDR      r0,[r0,#0]  ; usart1_rx_buff
000020  f7fffffe          BL       __aeabi_memclr
                  |L6.36|
;;;277    	}
;;;278    
;;;279    }
000024  bd10              POP      {r4,pc}
;;;280    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      usart1_rx_buff
                  |L6.44|
                          DCD      0x40013800

                          AREA ||i.usart2_init||, CODE, READONLY, ALIGN=2

                  usart2_init PROC
;;;158    */
;;;159    void usart2_init(u32 band_rate)
000000  b51f              PUSH     {r0-r4,lr}
;;;160    {
000002  4604              MOV      r4,r0
;;;161    	USART_InitTypeDef usart_init_structre;
;;;162    	
;;;163    	usart_init_structre.USART_BaudRate = band_rate;
000004  9400              STR      r4,[sp,#0]
;;;164    	usart_init_structre.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;165    	usart_init_structre.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;166    	usart_init_structre.USART_Parity = USART_Parity_No;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;167    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;168    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;169    	USART_Init(USART2, &usart_init_structre);
00001e  4669              MOV      r1,sp
000020  4806              LDR      r0,|L7.60|
000022  f7fffffe          BL       USART_Init
;;;170    		
;;;171    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000026  2201              MOVS     r2,#1
000028  f2405125          MOV      r1,#0x525
00002c  4803              LDR      r0,|L7.60|
00002e  f7fffffe          BL       USART_ITConfig
;;;172    	
;;;173    	USART_Cmd(USART2, ENABLE);
000032  2101              MOVS     r1,#1
000034  4801              LDR      r0,|L7.60|
000036  f7fffffe          BL       USART_Cmd
;;;174    	
;;;175    }
00003a  bd1f              POP      {r0-r4,pc}
;;;176    
                          ENDP

                  |L7.60|
                          DCD      0x40004400

                          AREA ||i.usart2_recv_data||, CODE, READONLY, ALIGN=2

                  usart2_recv_data PROC
;;;329    
;;;330    void usart2_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;331    {		
;;;332    	if(timer_is_timeout_1ms(timer_uart2, 20) == 0)	//20ms没接收到数据认为接收数据完成		
000002  2114              MOVS     r1,#0x14
000004  200e              MOVS     r0,#0xe
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b9b0              CBNZ     r0,|L8.58|
;;;333    	{
;;;334    //		USART_OUT(USART1, usart2_rx_buff->pdata);
;;;335    		memcpy(mqtt_buff, usart2_rx_buff, sizeof(usart_buff_t));
00000c  f2402202          MOV      r2,#0x202
000010  480a              LDR      r0,|L8.60|
000012  6801              LDR      r1,[r0,#0]  ; usart2_rx_buff
000014  480a              LDR      r0,|L8.64|
000016  6800              LDR      r0,[r0,#0]  ; mqtt_buff
000018  f7fffffe          BL       __aeabi_memcpy
;;;336    		usart_send(USART1, mqtt_buff->pdata, mqtt_buff->index);
00001c  4808              LDR      r0,|L8.64|
00001e  6800              LDR      r0,[r0,#0]  ; mqtt_buff
000020  8802              LDRH     r2,[r0,#0]
000022  4807              LDR      r0,|L8.64|
000024  6801              LDR      r1,[r0,#0]  ; mqtt_buff
000026  1c89              ADDS     r1,r1,#2
000028  4806              LDR      r0,|L8.68|
00002a  f7fffffe          BL       usart_send
;;;337    		memset(usart2_rx_buff, 0, sizeof(usart_buff_t));	//清理缓冲区
00002e  f2402102          MOV      r1,#0x202
000032  4802              LDR      r0,|L8.60|
000034  6800              LDR      r0,[r0,#0]  ; usart2_rx_buff
000036  f7fffffe          BL       __aeabi_memclr
                  |L8.58|
;;;338    	}	
;;;339    }
00003a  bd10              POP      {r4,pc}
;;;340    
                          ENDP

                  |L8.60|
                          DCD      usart2_rx_buff
                  |L8.64|
                          DCD      mqtt_buff
                  |L8.68|
                          DCD      0x40013800

                          AREA ||i.usart3_init||, CODE, READONLY, ALIGN=2

                  usart3_init PROC
;;;194    */
;;;195    void usart3_init(u32 band_rate)
000000  b51f              PUSH     {r0-r4,lr}
;;;196    {
000002  4604              MOV      r4,r0
;;;197    	USART_InitTypeDef usart_init_structre;
;;;198    	
;;;199    	usart_init_structre.USART_BaudRate = band_rate;
000004  9400              STR      r4,[sp,#0]
;;;200    	usart_init_structre.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;201    	usart_init_structre.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;202    	usart_init_structre.USART_Parity = USART_Parity_No;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;203    	usart_init_structre.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;204    	usart_init_structre.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;205    	USART_Init(USART3, &usart_init_structre);
00001e  4669              MOV      r1,sp
000020  4806              LDR      r0,|L9.60|
000022  f7fffffe          BL       USART_Init
;;;206    		
;;;207    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
000026  2201              MOVS     r2,#1
000028  f2405125          MOV      r1,#0x525
00002c  4803              LDR      r0,|L9.60|
00002e  f7fffffe          BL       USART_ITConfig
;;;208    	
;;;209    	USART_Cmd(USART3, ENABLE);
000032  2101              MOVS     r1,#1
000034  4801              LDR      r0,|L9.60|
000036  f7fffffe          BL       USART_Cmd
;;;210    	
;;;211    	
;;;212    
;;;213    }
00003a  bd1f              POP      {r0-r4,pc}
;;;214    
                          ENDP

                  |L9.60|
                          DCD      0x40004800

                          AREA ||i.usart3_recv_data||, CODE, READONLY, ALIGN=2

                  usart3_recv_data PROC
;;;405    */
;;;406    void usart3_recv_data(void)
000000  b510              PUSH     {r4,lr}
;;;407    {
;;;408    	
;;;409    	if(timer_is_timeout_1ms(timer_uart3, 50)==0)	//40ms没接收到数据认为接收数据完成		
000002  2132              MOVS     r1,#0x32
000004  200f              MOVS     r0,#0xf
000006  f7fffffe          BL       timer_is_timeout_1ms
00000a  b988              CBNZ     r0,|L10.48|
;;;410    	{
;;;411    
;;;412    		USART_OUT(USART1, usart3_buff);
00000c  4909              LDR      r1,|L10.52|
00000e  480a              LDR      r0,|L10.56|
000010  f7fffffe          BL       USART_OUT
;;;413    		memcpy(gps_buff, usart3_buff, 512);
000014  f44f7200          MOV      r2,#0x200
000018  4906              LDR      r1,|L10.52|
00001a  4808              LDR      r0,|L10.60|
00001c  f7fffffe          BL       __aeabi_memcpy
;;;414    		
;;;415    		memset(usart3_buff, 0, 512);	
000020  f44f7100          MOV      r1,#0x200
000024  4803              LDR      r0,|L10.52|
000026  f7fffffe          BL       __aeabi_memclr
;;;416    		usart3_cnt = 0;	
00002a  2000              MOVS     r0,#0
00002c  4904              LDR      r1,|L10.64|
00002e  8008              STRH     r0,[r1,#0]
                  |L10.48|
;;;417    	}	
;;;418    }
000030  bd10              POP      {r4,pc}
;;;419    
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      usart3_buff
                  |L10.56|
                          DCD      0x40013800
                  |L10.60|
                          DCD      gps_buff
                  |L10.64|
                          DCD      usart3_cnt

                          AREA ||i.usart_gpio_init||, CODE, READONLY, ALIGN=2

                  usart_gpio_init PROC
;;;62     
;;;63     void usart_gpio_init(void)
000000  b508              PUSH     {r3,lr}
;;;64     {
;;;65     	GPIO_InitTypeDef gpio_init_structure;
;;;66     	
;;;67     		// UART1
;;;68     	gpio_init_structure.GPIO_Pin = GPIO_Pin_9;				// UART1 TX				    
000002  f44f7000          MOV      r0,#0x200
000006  f8ad0000          STRH     r0,[sp,#0]
;;;69       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
00000a  2018              MOVS     r0,#0x18
00000c  f88d0003          STRB     r0,[sp,#3]
;;;70       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;71       	GPIO_Init(GPIOA, &gpio_init_structure);
000016  4669              MOV      r1,sp
000018  4823              LDR      r0,|L11.168|
00001a  f7fffffe          BL       GPIO_Init
;;;72     	gpio_init_structure.GPIO_Pin = GPIO_Pin_10;				
00001e  f44f6080          MOV      r0,#0x400
000022  f8ad0000          STRH     r0,[sp,#0]
;;;73       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000026  2004              MOVS     r0,#4
000028  f88d0003          STRB     r0,[sp,#3]
;;;74       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
00002c  2003              MOVS     r0,#3
00002e  f88d0002          STRB     r0,[sp,#2]
;;;75       	GPIO_Init(GPIOA, &gpio_init_structure);
000032  4669              MOV      r1,sp
000034  481c              LDR      r0,|L11.168|
000036  f7fffffe          BL       GPIO_Init
;;;76     	
;;;77     	// UART2
;;;78     	gpio_init_structure.GPIO_Pin = GPIO_Pin_2;				// UART2 TX				    
00003a  2004              MOVS     r0,#4
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;79       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
000040  2018              MOVS     r0,#0x18
000042  f88d0003          STRB     r0,[sp,#3]
;;;80       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
000046  2003              MOVS     r0,#3
000048  f88d0002          STRB     r0,[sp,#2]
;;;81       	GPIO_Init(GPIOA, &gpio_init_structure);
00004c  4669              MOV      r1,sp
00004e  4816              LDR      r0,|L11.168|
000050  f7fffffe          BL       GPIO_Init
;;;82     	gpio_init_structure.GPIO_Pin = GPIO_Pin_3;				
000054  2008              MOVS     r0,#8
000056  f8ad0000          STRH     r0,[sp,#0]
;;;83       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00005a  2004              MOVS     r0,#4
00005c  f88d0003          STRB     r0,[sp,#3]
;;;84       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
000060  2003              MOVS     r0,#3
000062  f88d0002          STRB     r0,[sp,#2]
;;;85       	GPIO_Init(GPIOA, &gpio_init_structure);
000066  4669              MOV      r1,sp
000068  480f              LDR      r0,|L11.168|
00006a  f7fffffe          BL       GPIO_Init
;;;86     
;;;87     
;;;88     	// UART3
;;;89     	gpio_init_structure.GPIO_Pin = GPIO_Pin_10;				// UART3 TX				    
00006e  f44f6080          MOV      r0,#0x400
000072  f8ad0000          STRH     r0,[sp,#0]
;;;90       	gpio_init_structure.GPIO_Mode = GPIO_Mode_AF_PP;
000076  2018              MOVS     r0,#0x18
000078  f88d0003          STRB     r0,[sp,#3]
;;;91       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			
00007c  2003              MOVS     r0,#3
00007e  f88d0002          STRB     r0,[sp,#2]
;;;92       	GPIO_Init(GPIOB, &gpio_init_structure);
000082  4669              MOV      r1,sp
000084  4809              LDR      r0,|L11.172|
000086  f7fffffe          BL       GPIO_Init
;;;93     	gpio_init_structure.GPIO_Pin = GPIO_Pin_11;				
00008a  f44f6000          MOV      r0,#0x800
00008e  f8ad0000          STRH     r0,[sp,#0]
;;;94       	gpio_init_structure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000092  2004              MOVS     r0,#4
000094  f88d0003          STRB     r0,[sp,#3]
;;;95       	gpio_init_structure.GPIO_Speed = GPIO_Speed_50MHz;			 
000098  2003              MOVS     r0,#3
00009a  f88d0002          STRB     r0,[sp,#2]
;;;96       	GPIO_Init(GPIOB, &gpio_init_structure);
00009e  4669              MOV      r1,sp
0000a0  4802              LDR      r0,|L11.172|
0000a2  f7fffffe          BL       GPIO_Init
;;;97     	
;;;98     
;;;99     }
0000a6  bd08              POP      {r3,pc}
;;;100    
                          ENDP

                  |L11.168|
                          DCD      0x40010800
                  |L11.172|
                          DCD      0x40010c00

                          AREA ||i.usart_send||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  usart_send PROC
;;;509    
;;;510    void usart_send(USART_TypeDef* USARTx, uint8_t *data, uint16_t data_size,...)
000000  b40f              PUSH     {r0-r3}
;;;511    { 
000002  b5f0              PUSH     {r4-r7,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4607              MOV      r7,r0
000008  4615              MOV      r5,r2
;;;512    	const char *s;
;;;513        int d;  
;;;514        char buf[32];
;;;515        
;;;516    	va_list ap;
;;;517        __va_start(ap, data);
00000a  a810              ADD      r0,sp,#0x40
00000c  9000              STR      r0,[sp,#0]
;;;518    	
;;;519    	
;;;520    	USART_GetFlagStatus(USARTx, USART_FLAG_TC);	//
00000e  2140              MOVS     r1,#0x40
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       USART_GetFlagStatus
;;;521    	while(data_size--)
000016  e073              B        |L12.256|
                  |L12.24|
;;;522    	{				                         
;;;523    		if(*data==0x5c)
000018  980f              LDR      r0,[sp,#0x3c]
00001a  7800              LDRB     r0,[r0,#0]
00001c  285c              CMP      r0,#0x5c
00001e  d11c              BNE      |L12.90|
;;;524    		{									
;;;525    			switch (*++data)
000020  980f              LDR      r0,[sp,#0x3c]
000022  1c40              ADDS     r0,r0,#1
000024  900f              STR      r0,[sp,#0x3c]
000026  7800              LDRB     r0,[r0,#0]
000028  286e              CMP      r0,#0x6e
00002a  d009              BEQ      |L12.64|
00002c  2872              CMP      r0,#0x72
00002e  d10f              BNE      |L12.80|
;;;526    			{
;;;527    				case 'r':							          
;;;528    					USART_SendData(USARTx, 0x0d);	   
000030  210d              MOVS     r1,#0xd
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       USART_SendData
;;;529    					data++;
000038  980f              LDR      r0,[sp,#0x3c]
00003a  1c40              ADDS     r0,r0,#1
00003c  900f              STR      r0,[sp,#0x3c]
;;;530    				break;
00003e  e00b              B        |L12.88|
                  |L12.64|
;;;531    				case 'n':							          
;;;532    					USART_SendData(USARTx, 0x0a);	
000040  210a              MOVS     r1,#0xa
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       USART_SendData
;;;533    					data++;
000048  980f              LDR      r0,[sp,#0x3c]
00004a  1c40              ADDS     r0,r0,#1
00004c  900f              STR      r0,[sp,#0x3c]
;;;534    				break;
00004e  e003              B        |L12.88|
                  |L12.80|
;;;535    				
;;;536    				default:
;;;537    					data++;
000050  980f              LDR      r0,[sp,#0x3c]
000052  1c40              ADDS     r0,r0,#1
000054  900f              STR      r0,[sp,#0x3c]
;;;538    			    break;
000056  bf00              NOP      
                  |L12.88|
000058  e04b              B        |L12.242|
                  |L12.90|
;;;539    			}						 
;;;540    		}
;;;541    		else if(*data=='%')
00005a  980f              LDR      r0,[sp,#0x3c]
00005c  7800              LDRB     r0,[r0,#0]
00005e  2825              CMP      r0,#0x25
000060  d140              BNE      |L12.228|
;;;542    		{									  //
;;;543    			switch (*++data){				
000062  980f              LDR      r0,[sp,#0x3c]
000064  1c40              ADDS     r0,r0,#1
000066  900f              STR      r0,[sp,#0x3c]
000068  7800              LDRB     r0,[r0,#0]
00006a  2864              CMP      r0,#0x64
00006c  d018              BEQ      |L12.160|
00006e  2873              CMP      r0,#0x73
000070  d133              BNE      |L12.218|
;;;544    				case 's':										  
;;;545                    	s = __va_arg(ap, const char *);
000072  9800              LDR      r0,[sp,#0]
000074  c810              LDM      r0!,{r4}
000076  9000              STR      r0,[sp,#0]
;;;546                    	for ( ; *s; s++) 
000078  e00b              B        |L12.146|
                  |L12.122|
;;;547    					{
;;;548                        	USART_SendData(USARTx,*s);
00007a  7821              LDRB     r1,[r4,#0]
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       USART_SendData
;;;549    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000082  bf00              NOP      
                  |L12.132|
000084  2140              MOVS     r1,#0x40
000086  4638              MOV      r0,r7
000088  f7fffffe          BL       USART_GetFlagStatus
00008c  2800              CMP      r0,#0
00008e  d0f9              BEQ      |L12.132|
000090  1c64              ADDS     r4,r4,#1              ;546
                  |L12.146|
000092  7820              LDRB     r0,[r4,#0]            ;546
000094  2800              CMP      r0,#0                 ;546
000096  d1f0              BNE      |L12.122|
;;;550                    	}
;;;551    					data++;
000098  980f              LDR      r0,[sp,#0x3c]
00009a  1c40              ADDS     r0,r0,#1
00009c  900f              STR      r0,[sp,#0x3c]
;;;552                    	break;
00009e  e020              B        |L12.226|
                  |L12.160|
;;;553                	case 'd':										 
;;;554                    	d = __va_arg(ap, int);
0000a0  9800              LDR      r0,[sp,#0]
0000a2  c840              LDM      r0!,{r6}
0000a4  9000              STR      r0,[sp,#0]
;;;555    
;;;556    					sprintf(buf, "%d", d);
0000a6  4632              MOV      r2,r6
0000a8  a11a              ADR      r1,|L12.276|
0000aa  a801              ADD      r0,sp,#4
0000ac  f7fffffe          BL       __2sprintf
;;;557                    	for (s = buf; *s; s++) 
0000b0  ac01              ADD      r4,sp,#4
0000b2  e00b              B        |L12.204|
                  |L12.180|
;;;558    					{
;;;559                        	USART_SendData(USARTx,*s);
0000b4  7821              LDRB     r1,[r4,#0]
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       USART_SendData
;;;560    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000bc  bf00              NOP      
                  |L12.190|
0000be  2140              MOVS     r1,#0x40
0000c0  4638              MOV      r0,r7
0000c2  f7fffffe          BL       USART_GetFlagStatus
0000c6  2800              CMP      r0,#0
0000c8  d0f9              BEQ      |L12.190|
0000ca  1c64              ADDS     r4,r4,#1              ;557
                  |L12.204|
0000cc  7820              LDRB     r0,[r4,#0]            ;557
0000ce  2800              CMP      r0,#0                 ;557
0000d0  d1f0              BNE      |L12.180|
;;;561                    	}
;;;562    					data++;
0000d2  980f              LDR      r0,[sp,#0x3c]
0000d4  1c40              ADDS     r0,r0,#1
0000d6  900f              STR      r0,[sp,#0x3c]
;;;563                    	break;
0000d8  e003              B        |L12.226|
                  |L12.218|
;;;564    				default:
;;;565    					data++;
0000da  980f              LDR      r0,[sp,#0x3c]
0000dc  1c40              ADDS     r0,r0,#1
0000de  900f              STR      r0,[sp,#0x3c]
;;;566    				    break;
0000e0  bf00              NOP      
                  |L12.226|
0000e2  e006              B        |L12.242|
                  |L12.228|
;;;567    			}		 
;;;568    		}
;;;569    		else 
;;;570    			USART_SendData(USARTx, *data++);
0000e4  980f              LDR      r0,[sp,#0x3c]
0000e6  f8101b01          LDRB     r1,[r0],#1
0000ea  900f              STR      r0,[sp,#0x3c]
0000ec  4638              MOV      r0,r7
0000ee  f7fffffe          BL       USART_SendData
                  |L12.242|
;;;571    		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
0000f2  bf00              NOP      
                  |L12.244|
0000f4  2140              MOVS     r1,#0x40
0000f6  4638              MOV      r0,r7
0000f8  f7fffffe          BL       USART_GetFlagStatus
0000fc  2800              CMP      r0,#0
0000fe  d0f9              BEQ      |L12.244|
                  |L12.256|
000100  1e28              SUBS     r0,r5,#0              ;521
000102  f1a50101          SUB      r1,r5,#1              ;521
000106  b28d              UXTH     r5,r1                 ;521
000108  d186              BNE      |L12.24|
;;;572    	}
;;;573    	
;;;574    }
00010a  b009              ADD      sp,sp,#0x24
00010c  bcf0              POP      {r4-r7}
00010e  f85dfb14          LDR      pc,[sp],#0x14
;;;575    
                          ENDP

000112  0000              DCW      0x0000
                  |L12.276|
000114  256400            DCB      "%d",0
000117  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ||sb||
                          %        514
                  usart1_buff
                          %        512
                  usart2_buff
                          %        512
                  usart3_buff
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  usart1_rx_buff
                          DCD      ||sb||
                  usart2_rx_buff
                          DCD      ||sb||
                  usart3_rx_buff
                          DCD      ||sb||
                  mqtt_buff
                          DCD      ||sb||
                  usart1_cnt
000010  0000              DCW      0x0000
                  usart2_cnt
000012  0000              DCW      0x0000
                  usart3_cnt
000014  0000              DCW      0x0000
                  usart1_rx_status
000016  00                DCB      0x00
                  usart2_rx_status
000017  00                DCB      0x00
                  usart3_rx_status
000018  00                DCB      0x00
                  usart4_rx_status
000019  00                DCB      0x00
                  usart5_rx_status
00001a  00                DCB      0x00
