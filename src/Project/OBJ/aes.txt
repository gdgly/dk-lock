; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\aes.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\aes.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -I..\MQTT -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\aes.crf ..\tplib\aes.c]
                          THUMB

                          AREA ||i.AES_Decrypt||, CODE, READONLY, ALIGN=1

                  AES_Decrypt PROC
;;;621    */
;;;622    void AES_Decrypt(char* pExpressText , char* pCipherText , char* pAeskey)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;623    {
000004  4682              MOV      r10,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;624    	char* str2;
;;;625    	uint8_t buIndex , i;
;;;626    	uint16_t aesDataLen;  //待解密的数据长度	
;;;627    	char *newstr;
;;;628    	
;;;629    	aesDataLen = strlen(pCipherText);
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       strlen
000010  b284              UXTH     r4,r0
;;;630    	newstr = (char *)malloc(aesDataLen);	
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       malloc
000018  4683              MOV      r11,r0
;;;631    	memset(newstr , 0 , aesDataLen);
00001a  4621              MOV      r1,r4
00001c  4658              MOV      r0,r11
00001e  f7fffffe          BL       __aeabi_memclr
;;;632    	aesDataLen = Base64Decode(newstr , pCipherText, aesDataLen, true);
000022  2301              MOVS     r3,#1
000024  4622              MOV      r2,r4
000026  4639              MOV      r1,r7
000028  4658              MOV      r0,r11
00002a  f7fffffe          BL       Base64Decode
00002e  b284              UXTH     r4,r0
;;;633    
;;;634    	
;;;635    	
;;;636    	//send_buff：待解密的数据  ，pkey：密钥   str2：解密后的数据
;;;637      str2 = decrypt(newstr, pAeskey , aesDataLen);
000030  4622              MOV      r2,r4
000032  4641              MOV      r1,r8
000034  4658              MOV      r0,r11
000036  f7fffffe          BL       decrypt
00003a  4605              MOV      r5,r0
;;;638    	free(newstr);
00003c  4658              MOV      r0,r11
00003e  f7fffffe          BL       free
;;;639    	//去除末尾补码
;;;640    	buIndex = str2[aesDataLen-1];
000042  1e60              SUBS     r0,r4,#1
000044  f8159000          LDRB     r9,[r5,r0]
;;;641    
;;;642    	for(i=0; i<buIndex; i++)
000048  2600              MOVS     r6,#0
00004a  e00f              B        |L1.108|
                  |L1.76|
;;;643    	{
;;;644    		if(str2[aesDataLen-i-1] != buIndex)
00004c  1ba0              SUBS     r0,r4,r6
00004e  1e40              SUBS     r0,r0,#1
000050  5c28              LDRB     r0,[r5,r0]
000052  4548              CMP      r0,r9
000054  d004              BEQ      |L1.96|
;;;645    		{
;;;646    			free(str2);
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       free
                  |L1.92|
;;;647    			return;
;;;648    		}
;;;649    		else
;;;650    			str2[aesDataLen-i-1] = '\0';
;;;651    	}
;;;652    	strcpy(pExpressText , str2);
;;;653    	free(str2);
;;;654    	
;;;655    
;;;656    }
00005c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.96|
000060  2100              MOVS     r1,#0                 ;650
000062  1ba0              SUBS     r0,r4,r6              ;650
000064  1e40              SUBS     r0,r0,#1              ;650
000066  5429              STRB     r1,[r5,r0]            ;650
000068  1c70              ADDS     r0,r6,#1              ;642
00006a  b2c6              UXTB     r6,r0                 ;642
                  |L1.108|
00006c  454e              CMP      r6,r9                 ;642
00006e  dbed              BLT      |L1.76|
000070  4629              MOV      r1,r5                 ;652
000072  4650              MOV      r0,r10                ;652
000074  f7fffffe          BL       strcpy
000078  4628              MOV      r0,r5                 ;653
00007a  f7fffffe          BL       free
00007e  bf00              NOP      
000080  e7ec              B        |L1.92|
                          ENDP


                          AREA ||i.AES_Encrypt||, CODE, READONLY, ALIGN=1

                  AES_Encrypt PROC
;;;595    */
;;;596    void AES_Encrypt(char* pExpressText , char* pCipherText  , char* pAeskey)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;597    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;598    	char* str;
;;;599    	uint8_t buWei;
;;;600    	uint16_t aesDataLen;  //待加密的数据长度	
;;;601    
;;;602    	aesDataLen = strlen(pExpressText);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       strlen
000010  b284              UXTH     r4,r0
;;;603    	buWei = 16-aesDataLen%16;
000012  4620              MOV      r0,r4
000014  17e1              ASRS     r1,r4,#31
000016  eb047111          ADD      r1,r4,r1,LSR #28
00001a  1109              ASRS     r1,r1,#4
00001c  eba41101          SUB      r1,r4,r1,LSL #4
000020  f1c10110          RSB      r1,r1,#0x10
000024  b2cf              UXTB     r7,r1
;;;604    	memset(pExpressText+aesDataLen , buWei, buWei);
000026  1928              ADDS     r0,r5,r4
000028  463a              MOV      r2,r7
00002a  4639              MOV      r1,r7
00002c  f7fffffe          BL       __aeabi_memset
;;;605    	
;;;606    	aesDataLen = strlen(pExpressText);
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       strlen
000036  b284              UXTH     r4,r0
;;;607    	//pExpressText:待加密的明文数据，pkey：加密密钥  str：加密后的数据
;;;608    	str = encrypt(pExpressText, pAeskey);  //aesTempBuff[AES_TEMP_BUFF_LEN]
000038  4631              MOV      r1,r6
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       encrypt
000040  4681              MOV      r9,r0
;;;609    
;;;610    	//str:待编码的数据  pCipherText：编码后的数据  aesDataLen：待编码的长度
;;;611    	Base64Encode(str, pCipherText,aesDataLen);
000042  4622              MOV      r2,r4
000044  4641              MOV      r1,r8
000046  4648              MOV      r0,r9
000048  f7fffffe          BL       Base64Encode
;;;612    	free(str);
00004c  4648              MOV      r0,r9
00004e  f7fffffe          BL       free
;;;613    
;;;614    }
000052  e8bd87f0          POP      {r4-r10,pc}
;;;615    
                          ENDP


                          AREA ||i.AddRoundKey||, CODE, READONLY, ALIGN=2

                  AddRoundKey PROC
;;;170    // The round key is added to the state by an XOR function.
;;;171    void AddRoundKey(int round) 
000000  b510              PUSH     {r4,lr}
;;;172    {
000002  4602              MOV      r2,r0
;;;173        int i,j;
;;;174        for(i=0;i<4;i++)
000004  2000              MOVS     r0,#0
000006  e014              B        |L3.50|
                  |L3.8|
;;;175        {
;;;176            for(j=0;j<4;j++)
000008  2100              MOVS     r1,#0
00000a  e00f              B        |L3.44|
                  |L3.12|
;;;177            {
;;;178                state[j][i] ^= RoundKey[round * Nb * 4 + i * Nb + j];
00000c  0113              LSLS     r3,r2,#4
00000e  eb030380          ADD      r3,r3,r0,LSL #2
000012  440b              ADD      r3,r3,r1
000014  4c08              LDR      r4,|L3.56|
000016  5ce3              LDRB     r3,[r4,r3]
000018  4c08              LDR      r4,|L3.60|
00001a  eb040481          ADD      r4,r4,r1,LSL #2
00001e  5c24              LDRB     r4,[r4,r0]
000020  4063              EORS     r3,r3,r4
000022  4c06              LDR      r4,|L3.60|
000024  eb040481          ADD      r4,r4,r1,LSL #2
000028  5423              STRB     r3,[r4,r0]
00002a  1c49              ADDS     r1,r1,#1              ;176
                  |L3.44|
00002c  2904              CMP      r1,#4                 ;176
00002e  dbed              BLT      |L3.12|
000030  1c40              ADDS     r0,r0,#1              ;174
                  |L3.50|
000032  2804              CMP      r0,#4                 ;174
000034  dbe8              BLT      |L3.8|
;;;179            }
;;;180        }
;;;181    }
000036  bd10              POP      {r4,pc}
;;;182    
                          ENDP

                  |L3.56|
                          DCD      RoundKey
                  |L3.60|
                          DCD      state

                          AREA ||i.Base64Decode||, CODE, READONLY, ALIGN=1

                  Base64Decode PROC
;;;544    // ????
;;;545    int Base64Decode( char *OrgString, char *Base64String, int Base64StringLen, bool bForceDecode )  //????
000000  e92d41f8          PUSH     {r3-r8,lr}
;;;546    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  461e              MOV      r6,r3
;;;547    	// OrgString ???????????
;;;548    	// Base64String ????????
;;;549    	// Base64StringLen ????????
;;;550    	// bForceDecode ????????????,??????
;;;551    	//     true  ????
;;;552    	//     false ?????
;;;553    	unsigned char Base64Encode[4];
;;;554    	unsigned char denghaoNum = 0;
00000a  2700              MOVS     r7,#0
;;;555    	unsigned char i;
;;;556    	int OrgStringLen=0;
00000c  46b8              MOV      r8,r7
;;;557    	if( Base64StringLen % 4 && !bForceDecode )   //???? 4 ???,? Base64 ?????
00000e  17d1              ASRS     r1,r2,#31
000010  eb027191          ADD      r1,r2,r1,LSR #30
000014  1089              ASRS     r1,r1,#2
000016  eba20181          SUB      r1,r2,r1,LSL #2
00001a  b129              CBZ      r1,|L4.40|
00001c  b926              CBNZ     r6,|L4.40|
;;;558    	{
;;;559    		OrgString[0] = '\0';
00001e  2000              MOVS     r0,#0
000020  7020              STRB     r0,[r4,#0]
;;;560    		return -1;
000022  1e40              SUBS     r0,r0,#1
                  |L4.36|
;;;561    	}
;;;562    	for (i=Base64StringLen-1; i>0; i--)
;;;563    	{
;;;564    		if (Base64String[i] == '=')
;;;565    			denghaoNum++;
;;;566    		else
;;;567    			break;
;;;568    	}
;;;569    
;;;570    
;;;571    	while( Base64StringLen > 2 )  
;;;572    	{
;;;573    		Base64Encode[0] = GetBase64Value(Base64String[0]);
;;;574    		Base64Encode[1] = GetBase64Value(Base64String[1]);
;;;575    		Base64Encode[2] = GetBase64Value(Base64String[2]);
;;;576    		Base64Encode[3] = GetBase64Value(Base64String[3]);
;;;577    		
;;;578    		*OrgString ++ = (Base64Encode[0] << 2) | (Base64Encode[1] >> 4);
;;;579    		*OrgString ++ = (Base64Encode[1] << 4) | (Base64Encode[2] >> 2);
;;;580    		*OrgString ++ = (Base64Encode[2] << 6) | (Base64Encode[3]);
;;;581    		
;;;582    		Base64String += 4;
;;;583    		Base64StringLen -= 4;
;;;584    		OrgStringLen += 3;
;;;585    	}
;;;586    	
;;;587    	return OrgStringLen-denghaoNum;
;;;588    }
000024  e8bd81f8          POP      {r3-r8,pc}
                  |L4.40|
000028  1e50              SUBS     r0,r2,#1              ;562
00002a  b2c3              UXTB     r3,r0                 ;562
00002c  e008              B        |L4.64|
                  |L4.46|
00002e  5ce8              LDRB     r0,[r5,r3]            ;564
000030  283d              CMP      r0,#0x3d              ;564
000032  d102              BNE      |L4.58|
000034  1c78              ADDS     r0,r7,#1              ;565
000036  b2c7              UXTB     r7,r0                 ;565
000038  e000              B        |L4.60|
                  |L4.58|
00003a  e003              B        |L4.68|
                  |L4.60|
00003c  1e58              SUBS     r0,r3,#1              ;562
00003e  b2c3              UXTB     r3,r0                 ;562
                  |L4.64|
000040  2b00              CMP      r3,#0                 ;562
000042  dcf4              BGT      |L4.46|
                  |L4.68|
000044  bf00              NOP                            ;567
000046  e031              B        |L4.172|
                  |L4.72|
000048  7828              LDRB     r0,[r5,#0]            ;573
00004a  f7fffffe          BL       GetBase64Value
00004e  f88d0000          STRB     r0,[sp,#0]            ;573
000052  7868              LDRB     r0,[r5,#1]            ;574
000054  f7fffffe          BL       GetBase64Value
000058  f88d0001          STRB     r0,[sp,#1]            ;574
00005c  78a8              LDRB     r0,[r5,#2]            ;575
00005e  f7fffffe          BL       GetBase64Value
000062  f88d0002          STRB     r0,[sp,#2]            ;575
000066  78e8              LDRB     r0,[r5,#3]            ;576
000068  f7fffffe          BL       GetBase64Value
00006c  f88d0003          STRB     r0,[sp,#3]            ;576
000070  f89d0000          LDRB     r0,[sp,#0]            ;578
000074  0080              LSLS     r0,r0,#2              ;578
000076  f89d1001          LDRB     r1,[sp,#1]            ;578
00007a  ea401021          ORR      r0,r0,r1,ASR #4       ;578
00007e  f8040b01          STRB     r0,[r4],#1            ;578
000082  f89d0001          LDRB     r0,[sp,#1]            ;579
000086  0100              LSLS     r0,r0,#4              ;579
000088  f89d1002          LDRB     r1,[sp,#2]            ;579
00008c  ea4000a1          ORR      r0,r0,r1,ASR #2       ;579
000090  f8040b01          STRB     r0,[r4],#1            ;579
000094  f89d0003          LDRB     r0,[sp,#3]            ;580
000098  f89d1002          LDRB     r1,[sp,#2]            ;580
00009c  ea401081          ORR      r0,r0,r1,LSL #6       ;580
0000a0  f8040b01          STRB     r0,[r4],#1            ;580
0000a4  1d2d              ADDS     r5,r5,#4              ;582
0000a6  1f12              SUBS     r2,r2,#4              ;583
0000a8  f1080803          ADD      r8,r8,#3              ;584
                  |L4.172|
0000ac  2a02              CMP      r2,#2                 ;571
0000ae  dccb              BGT      |L4.72|
0000b0  eba80007          SUB      r0,r8,r7              ;587
0000b4  e7b6              B        |L4.36|
;;;589    
                          ENDP


                          AREA ||i.Base64Encode||, CODE, READONLY, ALIGN=2

                  Base64Encode PROC
;;;479    
;;;480    int Base64Encode( char *OrgString, char *Base64String, int OrgStringLen ) 
000000  b530              PUSH     {r4,r5,lr}
;;;481    {
000002  4603              MOV      r3,r0
;;;482    	// OrgString ????????
;;;483    	// Base64String ???????????
;;;484    	// OrgStringLen ????????
;;;485    	static char Base64Encode[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
;;;486    	int Base64StringLen = 0;
000004  2000              MOVS     r0,#0
;;;487    
;;;488    	while( OrgStringLen > 0 )
000006  e053              B        |L5.176|
                  |L5.8|
;;;489    	{
;;;490    		*Base64String ++ = Base64Encode[(OrgString[0] >> 2 ) & 0x3f];
000008  781c              LDRB     r4,[r3,#0]
00000a  4d2c              LDR      r5,|L5.188|
00000c  eb050494          ADD      r4,r5,r4,LSR #2
000010  7824              LDRB     r4,[r4,#0]
000012  f8014b01          STRB     r4,[r1],#1
;;;491    		if( OrgStringLen > 2 )
000016  2a02              CMP      r2,#2
000018  dd1a              BLE      |L5.80|
;;;492    		{
;;;493    		 *Base64String ++ = Base64Encode[((OrgString[0] & 3) << 4) | (OrgString[1] >> 4)];
00001a  781c              LDRB     r4,[r3,#0]
00001c  07a4              LSLS     r4,r4,#30
00001e  0ea4              LSRS     r4,r4,#26
000020  785d              LDRB     r5,[r3,#1]
000022  ea441425          ORR      r4,r4,r5,ASR #4
000026  4d25              LDR      r5,|L5.188|
000028  5d2c              LDRB     r4,[r5,r4]
00002a  f8014b01          STRB     r4,[r1],#1
;;;494    		 *Base64String ++ = Base64Encode[((OrgString[1] & 0xF) << 2) | (OrgString[2] >> 6)];
00002e  785c              LDRB     r4,[r3,#1]
000030  0724              LSLS     r4,r4,#28
000032  0ea4              LSRS     r4,r4,#26
000034  789d              LDRB     r5,[r3,#2]
000036  ea4414a5          ORR      r4,r4,r5,ASR #6
00003a  4d20              LDR      r5,|L5.188|
00003c  5d2c              LDRB     r4,[r5,r4]
00003e  f8014b01          STRB     r4,[r1],#1
;;;495    		 *Base64String ++ = Base64Encode[OrgString[2] & 0x3F];
000042  789c              LDRB     r4,[r3,#2]
000044  f004043f          AND      r4,r4,#0x3f
000048  5d2c              LDRB     r4,[r5,r4]
00004a  f8014b01          STRB     r4,[r1],#1
00004e  e02c              B        |L5.170|
                  |L5.80|
;;;496    		}
;;;497    		else
;;;498    		{
;;;499    		 switch( OrgStringLen )
000050  2a01              CMP      r2,#1
000052  d002              BEQ      |L5.90|
000054  2a02              CMP      r2,#2
000056  d127              BNE      |L5.168|
000058  e00e              B        |L5.120|
                  |L5.90|
;;;500    		 {
;;;501    		 case 1:
;;;502    			*Base64String ++ = Base64Encode[(OrgString[0] & 3) << 4 ];
00005a  781c              LDRB     r4,[r3,#0]
00005c  f0040403          AND      r4,r4,#3
000060  4d16              LDR      r5,|L5.188|
000062  eb051404          ADD      r4,r5,r4,LSL #4
000066  7824              LDRB     r4,[r4,#0]
000068  f8014b01          STRB     r4,[r1],#1
;;;503    			*Base64String ++ = '=';
00006c  243d              MOVS     r4,#0x3d
00006e  f8014b01          STRB     r4,[r1],#1
;;;504    			*Base64String ++ = '=';
000072  f8014b01          STRB     r4,[r1],#1
;;;505    			break;
000076  e017              B        |L5.168|
                  |L5.120|
;;;506    		 case 2:
;;;507    			*Base64String ++ = Base64Encode[((OrgString[0] & 3) << 4) | (OrgString[1] >> 4)];
000078  781c              LDRB     r4,[r3,#0]
00007a  07a4              LSLS     r4,r4,#30
00007c  0ea4              LSRS     r4,r4,#26
00007e  785d              LDRB     r5,[r3,#1]
000080  ea441425          ORR      r4,r4,r5,ASR #4
000084  4d0d              LDR      r5,|L5.188|
000086  5d2c              LDRB     r4,[r5,r4]
000088  f8014b01          STRB     r4,[r1],#1
;;;508    			*Base64String ++ = Base64Encode[((OrgString[1] & 0x0F) << 2) | (OrgString[2] >> 6)];
00008c  785c              LDRB     r4,[r3,#1]
00008e  0724              LSLS     r4,r4,#28
000090  0ea4              LSRS     r4,r4,#26
000092  789d              LDRB     r5,[r3,#2]
000094  ea4414a5          ORR      r4,r4,r5,ASR #6
000098  4d08              LDR      r5,|L5.188|
00009a  5d2c              LDRB     r4,[r5,r4]
00009c  f8014b01          STRB     r4,[r1],#1
;;;509    			*Base64String ++ = '=';
0000a0  243d              MOVS     r4,#0x3d
0000a2  f8014b01          STRB     r4,[r1],#1
;;;510    			break;
0000a6  bf00              NOP      
                  |L5.168|
0000a8  bf00              NOP                            ;505
                  |L5.170|
;;;511    		 }
;;;512    		}
;;;513    		
;;;514    		OrgString +=3;
0000aa  1cdb              ADDS     r3,r3,#3
;;;515    		OrgStringLen -=3;
0000ac  1ed2              SUBS     r2,r2,#3
;;;516    		Base64StringLen +=4;
0000ae  1d00              ADDS     r0,r0,#4
                  |L5.176|
0000b0  2a00              CMP      r2,#0                 ;488
0000b2  dca9              BGT      |L5.8|
;;;517    	}
;;;518    
;;;519    	*Base64String = 0;
0000b4  2400              MOVS     r4,#0
0000b6  700c              STRB     r4,[r1,#0]
;;;520    	return Base64StringLen;
;;;521    }
0000b8  bd30              POP      {r4,r5,pc}
;;;522    //////////////////////////////////////////////////////////////////////////////////////////
                          ENDP

0000ba  0000              DCW      0x0000
                  |L5.188|
                          DCD      |symbol_number.63|

                          AREA ||i.Cipher||, CODE, READONLY, ALIGN=2

                  Cipher PROC
;;;368    // Cipher is the main function that encrypts the PlainText.
;;;369    void Cipher()
000000  b570              PUSH     {r4-r6,lr}
;;;370    {
;;;371        int i,j,round=0;
000002  2600              MOVS     r6,#0
;;;372    
;;;373        //Copy the input PlainText to state array.
;;;374        for(i=0;i<4;i++)
000004  2400              MOVS     r4,#0
000006  e00d              B        |L6.36|
                  |L6.8|
;;;375        {
;;;376            for(j=0;j<4;j++)
000008  2500              MOVS     r5,#0
00000a  e008              B        |L6.30|
                  |L6.12|
;;;377            {
;;;378                state[j][i] = in[i*4 + j];
00000c  eb050084          ADD      r0,r5,r4,LSL #2
000010  491c              LDR      r1,|L6.132|
000012  5c08              LDRB     r0,[r1,r0]
000014  491c              LDR      r1,|L6.136|
000016  eb010185          ADD      r1,r1,r5,LSL #2
00001a  5508              STRB     r0,[r1,r4]
00001c  1c6d              ADDS     r5,r5,#1              ;376
                  |L6.30|
00001e  2d04              CMP      r5,#4                 ;376
000020  dbf4              BLT      |L6.12|
000022  1c64              ADDS     r4,r4,#1              ;374
                  |L6.36|
000024  2c04              CMP      r4,#4                 ;374
000026  dbef              BLT      |L6.8|
;;;379            }
;;;380        }
;;;381    
;;;382        // Add the First round key to the state before starting the rounds.
;;;383        AddRoundKey(0); 
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       AddRoundKey
;;;384        
;;;385        // There will be Nr rounds.
;;;386        // The first Nr-1 rounds are identical.
;;;387        // These Nr-1 rounds are executed in the loop below.
;;;388        for(round=1;round<Nr;round++)
00002e  2601              MOVS     r6,#1
000030  e009              B        |L6.70|
                  |L6.50|
;;;389        {
;;;390            SubBytes();
000032  f7fffffe          BL       SubBytes
;;;391            ShiftRows();
000036  f7fffffe          BL       ShiftRows
;;;392            MixColumns();
00003a  f7fffffe          BL       MixColumns
;;;393            AddRoundKey(round);
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       AddRoundKey
000044  1c76              ADDS     r6,r6,#1              ;388
                  |L6.70|
000046  4811              LDR      r0,|L6.140|
000048  6800              LDR      r0,[r0,#0]            ;388  ; Nr
00004a  4286              CMP      r6,r0                 ;388
00004c  dbf1              BLT      |L6.50|
;;;394        }
;;;395        
;;;396        // The last round is given below.
;;;397        // The MixColumns function is not here in the last round.
;;;398        SubBytes();
00004e  f7fffffe          BL       SubBytes
;;;399        ShiftRows();
000052  f7fffffe          BL       ShiftRows
;;;400        AddRoundKey(Nr);
000056  480d              LDR      r0,|L6.140|
000058  6800              LDR      r0,[r0,#0]  ; Nr
00005a  f7fffffe          BL       AddRoundKey
;;;401    
;;;402        // The encryption process is over.
;;;403        // Copy the state array to output array.
;;;404        for(i=0;i<4;i++)
00005e  2400              MOVS     r4,#0
000060  e00d              B        |L6.126|
                  |L6.98|
;;;405        {
;;;406            for(j=0;j<4;j++)
000062  2500              MOVS     r5,#0
000064  e008              B        |L6.120|
                  |L6.102|
;;;407            {
;;;408                out[i*4+j]=state[j][i];
000066  4808              LDR      r0,|L6.136|
000068  eb000085          ADD      r0,r0,r5,LSL #2
00006c  5d00              LDRB     r0,[r0,r4]
00006e  eb050184          ADD      r1,r5,r4,LSL #2
000072  4a07              LDR      r2,|L6.144|
000074  5450              STRB     r0,[r2,r1]
000076  1c6d              ADDS     r5,r5,#1              ;406
                  |L6.120|
000078  2d04              CMP      r5,#4                 ;406
00007a  dbf4              BLT      |L6.102|
00007c  1c64              ADDS     r4,r4,#1              ;404
                  |L6.126|
00007e  2c04              CMP      r4,#4                 ;404
000080  dbef              BLT      |L6.98|
;;;409            }
;;;410        }
;;;411    }
000082  bd70              POP      {r4-r6,pc}
;;;412    
                          ENDP

                  |L6.132|
                          DCD      ||in||
                  |L6.136|
                          DCD      state
                  |L6.140|
                          DCD      ||Nr||
                  |L6.144|
                          DCD      out

                          AREA ||i.GetBase64Value||, CODE, READONLY, ALIGN=1

                  GetBase64Value PROC
;;;523    //Base64 ??
;;;524    char GetBase64Value(char ch) //?????
000000  4601              MOV      r1,r0
;;;525    {
;;;526    	if ((ch >= 'A') && (ch <= 'Z'))  // A ~ Z
000002  2941              CMP      r1,#0x41
000004  db05              BLT      |L7.18|
000006  295a              CMP      r1,#0x5a
000008  dc03              BGT      |L7.18|
;;;527    		return ch - 'A';
00000a  f1a10041          SUB      r0,r1,#0x41
00000e  b2c0              UXTB     r0,r0
                  |L7.16|
;;;528    	if ((ch >= 'a') && (ch <= 'z'))  // a ~ z
;;;529    		return ch - 'a' + 26;
;;;530    	if ((ch >= '0') && (ch <= '9'))  // 0 ~ 9
;;;531    		return ch - '0' + 52;
;;;532    	switch (ch)       // ????
;;;533    	{
;;;534    	case '+':
;;;535    		return 62;
;;;536    	case '/':
;;;537    		return 63;
;;;538    	case '=':  //Base64 ????
;;;539    		return 0;
;;;540    	default:
;;;541    		return 0;
;;;542    	}
;;;543    }
000010  4770              BX       lr
                  |L7.18|
000012  2961              CMP      r1,#0x61              ;528
000014  db05              BLT      |L7.34|
000016  297a              CMP      r1,#0x7a              ;528
000018  dc03              BGT      |L7.34|
00001a  f1a10047          SUB      r0,r1,#0x47           ;529
00001e  b2c0              UXTB     r0,r0                 ;529
000020  e7f6              B        |L7.16|
                  |L7.34|
000022  2930              CMP      r1,#0x30              ;530
000024  db04              BLT      |L7.48|
000026  2939              CMP      r1,#0x39              ;530
000028  dc02              BGT      |L7.48|
00002a  1d08              ADDS     r0,r1,#4              ;531
00002c  b2c0              UXTB     r0,r0                 ;531
00002e  e7ef              B        |L7.16|
                  |L7.48|
000030  292b              CMP      r1,#0x2b              ;532
000032  d004              BEQ      |L7.62|
000034  292f              CMP      r1,#0x2f              ;532
000036  d004              BEQ      |L7.66|
000038  293d              CMP      r1,#0x3d              ;532
00003a  d106              BNE      |L7.74|
00003c  e003              B        |L7.70|
                  |L7.62|
00003e  203e              MOVS     r0,#0x3e              ;535
000040  e7e6              B        |L7.16|
                  |L7.66|
000042  203f              MOVS     r0,#0x3f              ;537
000044  e7e4              B        |L7.16|
                  |L7.70|
000046  2000              MOVS     r0,#0                 ;539
000048  e7e2              B        |L7.16|
                  |L7.74|
00004a  2000              MOVS     r0,#0                 ;541
00004c  e7e0              B        |L7.16|
;;;544    // ????
                          ENDP


                          AREA ||i.InvCipher||, CODE, READONLY, ALIGN=2

                  InvCipher PROC
;;;258    // InvCipher is the main function that decrypts the CipherText.
;;;259    void InvCipher()
000000  b570              PUSH     {r4-r6,lr}
;;;260    {
;;;261        int i,j,round=0;
000002  2600              MOVS     r6,#0
;;;262    
;;;263        //Copy the input CipherText to state array.
;;;264        for(i=0;i<4;i++)
000004  2400              MOVS     r4,#0
000006  e00d              B        |L8.36|
                  |L8.8|
;;;265        {
;;;266            for(j=0;j<4;j++)
000008  2500              MOVS     r5,#0
00000a  e008              B        |L8.30|
                  |L8.12|
;;;267            {
;;;268                state[j][i] = in[i*4 + j];
00000c  eb050084          ADD      r0,r5,r4,LSL #2
000010  491c              LDR      r1,|L8.132|
000012  5c08              LDRB     r0,[r1,r0]
000014  491c              LDR      r1,|L8.136|
000016  eb010185          ADD      r1,r1,r5,LSL #2
00001a  5508              STRB     r0,[r1,r4]
00001c  1c6d              ADDS     r5,r5,#1              ;266
                  |L8.30|
00001e  2d04              CMP      r5,#4                 ;266
000020  dbf4              BLT      |L8.12|
000022  1c64              ADDS     r4,r4,#1              ;264
                  |L8.36|
000024  2c04              CMP      r4,#4                 ;264
000026  dbef              BLT      |L8.8|
;;;269            }
;;;270        }
;;;271    
;;;272        // Add the First round key to the state before starting the rounds.
;;;273        AddRoundKey(Nr); 
000028  4818              LDR      r0,|L8.140|
00002a  6800              LDR      r0,[r0,#0]  ; Nr
00002c  f7fffffe          BL       AddRoundKey
;;;274    
;;;275        // There will be Nr rounds.
;;;276        // The first Nr-1 rounds are identical.
;;;277        // These Nr-1 rounds are executed in the loop below.
;;;278        for(round=Nr-1;round>0;round--)
000030  4816              LDR      r0,|L8.140|
000032  6800              LDR      r0,[r0,#0]  ; Nr
000034  1e46              SUBS     r6,r0,#1
000036  e009              B        |L8.76|
                  |L8.56|
;;;279        {
;;;280            InvShiftRows();
000038  f7fffffe          BL       InvShiftRows
;;;281            InvSubBytes();
00003c  f7fffffe          BL       InvSubBytes
;;;282            AddRoundKey(round);
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       AddRoundKey
;;;283            InvMixColumns();
000046  f7fffffe          BL       InvMixColumns
00004a  1e76              SUBS     r6,r6,#1              ;278
                  |L8.76|
00004c  2e00              CMP      r6,#0                 ;278
00004e  dcf3              BGT      |L8.56|
;;;284        }
;;;285        
;;;286        // The last round is given below.
;;;287        // The MixColumns function is not here in the last round.
;;;288        InvShiftRows();
000050  f7fffffe          BL       InvShiftRows
;;;289        InvSubBytes();
000054  f7fffffe          BL       InvSubBytes
;;;290        AddRoundKey(0);
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       AddRoundKey
;;;291    
;;;292        // The decryption process is over.
;;;293        // Copy the state array to output array.
;;;294        for(i=0;i<4;i++)
00005e  2400              MOVS     r4,#0
000060  e00d              B        |L8.126|
                  |L8.98|
;;;295        {
;;;296            for(j=0;j<4;j++)
000062  2500              MOVS     r5,#0
000064  e008              B        |L8.120|
                  |L8.102|
;;;297            {
;;;298                out[i*4+j]=state[j][i];
000066  4808              LDR      r0,|L8.136|
000068  eb000085          ADD      r0,r0,r5,LSL #2
00006c  5d00              LDRB     r0,[r0,r4]
00006e  eb050184          ADD      r1,r5,r4,LSL #2
000072  4a07              LDR      r2,|L8.144|
000074  5450              STRB     r0,[r2,r1]
000076  1c6d              ADDS     r5,r5,#1              ;296
                  |L8.120|
000078  2d04              CMP      r5,#4                 ;296
00007a  dbf4              BLT      |L8.102|
00007c  1c64              ADDS     r4,r4,#1              ;294
                  |L8.126|
00007e  2c04              CMP      r4,#4                 ;294
000080  dbef              BLT      |L8.98|
;;;299            }
;;;300        }
;;;301    }
000082  bd70              POP      {r4-r6,pc}
;;;302    
                          ENDP

                  |L8.132|
                          DCD      ||in||
                  |L8.136|
                          DCD      state
                  |L8.140|
                          DCD      ||Nr||
                  |L8.144|
                          DCD      out

                          AREA ||i.InvMixColumns||, CODE, READONLY, ALIGN=2

                  InvMixColumns PROC
;;;237    // Please use the references to gain more information.
;;;238    void InvMixColumns()
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;239    {
;;;240        int i;
;;;241        unsigned char a,b,c,d;
;;;242        for(i=0;i<4;i++)
000004  2400              MOVS     r4,#0
000006  e3fd              B        |L9.2052|
                  |L9.8|
;;;243        {    
;;;244        
;;;245            a = state[0][i];
000008  4dfe              LDR      r5,|L9.1028|
00000a  5d28              LDRB     r0,[r5,r4]
;;;246            b = state[1][i];
00000c  1d2d              ADDS     r5,r5,#4
00000e  5d29              LDRB     r1,[r5,r4]
;;;247            c = state[2][i];
000010  1d2d              ADDS     r5,r5,#4
000012  5d2a              LDRB     r2,[r5,r4]
;;;248            d = state[3][i];
000014  1d2d              ADDS     r5,r5,#4
000016  5d2b              LDRB     r3,[r5,r4]
;;;249    
;;;250            
;;;251            state[0][i] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
000018  f04f0c00          MOV      r12,#0
00001c  09c5              LSRS     r5,r0,#7
00001e  eb0505c5          ADD      r5,r5,r5,LSL #3
000022  eb050545          ADD      r5,r5,r5,LSL #1
000026  ea850540          EOR      r5,r5,r0,LSL #1
00002a  f3c515c0          UBFX     r5,r5,#7,#1
00002e  eb0505c5          ADD      r5,r5,r5,LSL #3
000032  eb050545          ADD      r5,r5,r5,LSL #1
000036  09c6              LSRS     r6,r0,#7
000038  eb0606c6          ADD      r6,r6,r6,LSL #3
00003c  eb060646          ADD      r6,r6,r6,LSL #1
000040  ea860640          EOR      r6,r6,r0,LSL #1
000044  ea850546          EOR      r5,r5,r6,LSL #1
000048  f3c515c0          UBFX     r5,r5,#7,#1
00004c  eb0505c5          ADD      r5,r5,r5,LSL #3
000050  eb050545          ADD      r5,r5,r5,LSL #1
000054  09c6              LSRS     r6,r0,#7
000056  eb0606c6          ADD      r6,r6,r6,LSL #3
00005a  eb060646          ADD      r6,r6,r6,LSL #1
00005e  ea860640          EOR      r6,r6,r0,LSL #1
000062  f3c616c0          UBFX     r6,r6,#7,#1
000066  eb0606c6          ADD      r6,r6,r6,LSL #3
00006a  eb060646          ADD      r6,r6,r6,LSL #1
00006e  09c7              LSRS     r7,r0,#7
000070  eb0707c7          ADD      r7,r7,r7,LSL #3
000074  eb070747          ADD      r7,r7,r7,LSL #1
000078  ea870740          EOR      r7,r7,r0,LSL #1
00007c  ea860647          EOR      r6,r6,r7,LSL #1
000080  ea850646          EOR      r6,r5,r6,LSL #1
000084  09c5              LSRS     r5,r0,#7
000086  eb0505c5          ADD      r5,r5,r5,LSL #3
00008a  eb050545          ADD      r5,r5,r5,LSL #1
00008e  ea850540          EOR      r5,r5,r0,LSL #1
000092  f3c515c0          UBFX     r5,r5,#7,#1
000096  eb0505c5          ADD      r5,r5,r5,LSL #3
00009a  eb050545          ADD      r5,r5,r5,LSL #1
00009e  09c7              LSRS     r7,r0,#7
0000a0  eb0707c7          ADD      r7,r7,r7,LSL #3
0000a4  eb070747          ADD      r7,r7,r7,LSL #1
0000a8  ea870740          EOR      r7,r7,r0,LSL #1
0000ac  ea850747          EOR      r7,r5,r7,LSL #1
0000b0  09c5              LSRS     r5,r0,#7
0000b2  eb0505c5          ADD      r5,r5,r5,LSL #3
0000b6  eb050545          ADD      r5,r5,r5,LSL #1
0000ba  ea850540          EOR      r5,r5,r0,LSL #1
0000be  406f              EORS     r7,r7,r5
0000c0  407e              EORS     r6,r6,r7
0000c2  ea8c0506          EOR      r5,r12,r6
0000c6  09ce              LSRS     r6,r1,#7
0000c8  eb0606c6          ADD      r6,r6,r6,LSL #3
0000cc  eb060646          ADD      r6,r6,r6,LSL #1
0000d0  ea860641          EOR      r6,r6,r1,LSL #1
0000d4  f3c616c0          UBFX     r6,r6,#7,#1
0000d8  eb0606c6          ADD      r6,r6,r6,LSL #3
0000dc  eb060646          ADD      r6,r6,r6,LSL #1
0000e0  09cf              LSRS     r7,r1,#7
0000e2  eb0707c7          ADD      r7,r7,r7,LSL #3
0000e6  eb070747          ADD      r7,r7,r7,LSL #1
0000ea  ea870741          EOR      r7,r7,r1,LSL #1
0000ee  ea860647          EOR      r6,r6,r7,LSL #1
0000f2  f3c616c0          UBFX     r6,r6,#7,#1
0000f6  eb0606c6          ADD      r6,r6,r6,LSL #3
0000fa  eb060646          ADD      r6,r6,r6,LSL #1
0000fe  09cf              LSRS     r7,r1,#7
000100  eb0707c7          ADD      r7,r7,r7,LSL #3
000104  eb070747          ADD      r7,r7,r7,LSL #1
000108  ea870741          EOR      r7,r7,r1,LSL #1
00010c  f3c717c0          UBFX     r7,r7,#7,#1
000110  eb0707c7          ADD      r7,r7,r7,LSL #3
000114  eb070747          ADD      r7,r7,r7,LSL #1
000118  ea4f18d1          LSR      r8,r1,#7
00011c  eb0808c8          ADD      r8,r8,r8,LSL #3
000120  eb080848          ADD      r8,r8,r8,LSL #1
000124  ea880841          EOR      r8,r8,r1,LSL #1
000128  ea870748          EOR      r7,r7,r8,LSL #1
00012c  ea860647          EOR      r6,r6,r7,LSL #1
000130  09cf              LSRS     r7,r1,#7
000132  eb0707c7          ADD      r7,r7,r7,LSL #3
000136  eb070747          ADD      r7,r7,r7,LSL #1
00013a  ea870741          EOR      r7,r7,r1,LSL #1
00013e  404f              EORS     r7,r7,r1
000140  407e              EORS     r6,r6,r7
000142  ea8c0c06          EOR      r12,r12,r6
000146  ea85050c          EOR      r5,r5,r12
00014a  f04f0c00          MOV      r12,#0
00014e  09d6              LSRS     r6,r2,#7
000150  eb0606c6          ADD      r6,r6,r6,LSL #3
000154  eb060646          ADD      r6,r6,r6,LSL #1
000158  ea860642          EOR      r6,r6,r2,LSL #1
00015c  f3c616c0          UBFX     r6,r6,#7,#1
000160  eb0606c6          ADD      r6,r6,r6,LSL #3
000164  eb060646          ADD      r6,r6,r6,LSL #1
000168  09d7              LSRS     r7,r2,#7
00016a  eb0707c7          ADD      r7,r7,r7,LSL #3
00016e  eb070747          ADD      r7,r7,r7,LSL #1
000172  ea870742          EOR      r7,r7,r2,LSL #1
000176  ea860647          EOR      r6,r6,r7,LSL #1
00017a  f3c616c0          UBFX     r6,r6,#7,#1
00017e  eb0606c6          ADD      r6,r6,r6,LSL #3
000182  eb060646          ADD      r6,r6,r6,LSL #1
000186  09d7              LSRS     r7,r2,#7
000188  eb0707c7          ADD      r7,r7,r7,LSL #3
00018c  eb070747          ADD      r7,r7,r7,LSL #1
000190  ea870742          EOR      r7,r7,r2,LSL #1
000194  f3c717c0          UBFX     r7,r7,#7,#1
000198  eb0707c7          ADD      r7,r7,r7,LSL #3
00019c  eb070747          ADD      r7,r7,r7,LSL #1
0001a0  ea4f18d2          LSR      r8,r2,#7
0001a4  eb0808c8          ADD      r8,r8,r8,LSL #3
0001a8  eb080848          ADD      r8,r8,r8,LSL #1
0001ac  ea880842          EOR      r8,r8,r2,LSL #1
0001b0  ea870748          EOR      r7,r7,r8,LSL #1
0001b4  ea860647          EOR      r6,r6,r7,LSL #1
0001b8  09d7              LSRS     r7,r2,#7
0001ba  eb0707c7          ADD      r7,r7,r7,LSL #3
0001be  eb070747          ADD      r7,r7,r7,LSL #1
0001c2  ea870742          EOR      r7,r7,r2,LSL #1
0001c6  f3c717c0          UBFX     r7,r7,#7,#1
0001ca  eb0707c7          ADD      r7,r7,r7,LSL #3
0001ce  eb070747          ADD      r7,r7,r7,LSL #1
0001d2  ea4f18d2          LSR      r8,r2,#7
0001d6  eb0808c8          ADD      r8,r8,r8,LSL #3
0001da  eb080848          ADD      r8,r8,r8,LSL #1
0001de  ea880842          EOR      r8,r8,r2,LSL #1
0001e2  ea870748          EOR      r7,r7,r8,LSL #1
0001e6  4057              EORS     r7,r7,r2
0001e8  407e              EORS     r6,r6,r7
0001ea  ea8c0c06          EOR      r12,r12,r6
0001ee  ea85050c          EOR      r5,r5,r12
0001f2  2700              MOVS     r7,#0
0001f4  09de              LSRS     r6,r3,#7
0001f6  eb0606c6          ADD      r6,r6,r6,LSL #3
0001fa  eb060646          ADD      r6,r6,r6,LSL #1
0001fe  ea860643          EOR      r6,r6,r3,LSL #1
000202  f3c616c0          UBFX     r6,r6,#7,#1
000206  eb0606c6          ADD      r6,r6,r6,LSL #3
00020a  eb060646          ADD      r6,r6,r6,LSL #1
00020e  ea4f1cd3          LSR      r12,r3,#7
000212  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000216  eb0c0c4c          ADD      r12,r12,r12,LSL #1
00021a  ea8c0c43          EOR      r12,r12,r3,LSL #1
00021e  ea86064c          EOR      r6,r6,r12,LSL #1
000222  f3c616c0          UBFX     r6,r6,#7,#1
000226  eb0606c6          ADD      r6,r6,r6,LSL #3
00022a  eb060646          ADD      r6,r6,r6,LSL #1
00022e  ea4f1cd3          LSR      r12,r3,#7
000232  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000236  eb0c0c4c          ADD      r12,r12,r12,LSL #1
00023a  ea8c0c43          EOR      r12,r12,r3,LSL #1
00023e  f3cc1cc0          UBFX     r12,r12,#7,#1
000242  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000246  eb0c0c4c          ADD      r12,r12,r12,LSL #1
00024a  ea4f18d3          LSR      r8,r3,#7
00024e  eb0808c8          ADD      r8,r8,r8,LSL #3
000252  eb080848          ADD      r8,r8,r8,LSL #1
000256  ea880843          EOR      r8,r8,r3,LSL #1
00025a  ea8c0c48          EOR      r12,r12,r8,LSL #1
00025e  ea86064c          EOR      r6,r6,r12,LSL #1
000262  46bc              MOV      r12,r7
000264  ea8c0803          EOR      r8,r12,r3
000268  ea8c0c08          EOR      r12,r12,r8
00026c  ea86060c          EOR      r6,r6,r12
000270  4077              EORS     r7,r7,r6
000272  407d              EORS     r5,r5,r7
000274  4e63              LDR      r6,|L9.1028|
000276  5535              STRB     r5,[r6,r4]
;;;252            state[1][i] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
000278  2600              MOVS     r6,#0
00027a  09c5              LSRS     r5,r0,#7
00027c  eb0505c5          ADD      r5,r5,r5,LSL #3
000280  eb050545          ADD      r5,r5,r5,LSL #1
000284  ea850540          EOR      r5,r5,r0,LSL #1
000288  f3c515c0          UBFX     r5,r5,#7,#1
00028c  eb0505c5          ADD      r5,r5,r5,LSL #3
000290  eb050545          ADD      r5,r5,r5,LSL #1
000294  09c7              LSRS     r7,r0,#7
000296  eb0707c7          ADD      r7,r7,r7,LSL #3
00029a  eb070747          ADD      r7,r7,r7,LSL #1
00029e  ea870740          EOR      r7,r7,r0,LSL #1
0002a2  ea850547          EOR      r5,r5,r7,LSL #1
0002a6  f3c515c0          UBFX     r5,r5,#7,#1
0002aa  eb0505c5          ADD      r5,r5,r5,LSL #3
0002ae  eb050545          ADD      r5,r5,r5,LSL #1
0002b2  09c7              LSRS     r7,r0,#7
0002b4  eb0707c7          ADD      r7,r7,r7,LSL #3
0002b8  eb070747          ADD      r7,r7,r7,LSL #1
0002bc  ea870740          EOR      r7,r7,r0,LSL #1
0002c0  f3c717c0          UBFX     r7,r7,#7,#1
0002c4  eb0707c7          ADD      r7,r7,r7,LSL #3
0002c8  eb070747          ADD      r7,r7,r7,LSL #1
0002cc  ea4f1cd0          LSR      r12,r0,#7
0002d0  eb0c0ccc          ADD      r12,r12,r12,LSL #3
0002d4  eb0c0c4c          ADD      r12,r12,r12,LSL #1
0002d8  ea8c0c40          EOR      r12,r12,r0,LSL #1
0002dc  ea87074c          EOR      r7,r7,r12,LSL #1
0002e0  ea850547          EOR      r5,r5,r7,LSL #1
0002e4  2700              MOVS     r7,#0
0002e6  ea870c00          EOR      r12,r7,r0
0002ea  ea87070c          EOR      r7,r7,r12
0002ee  407d              EORS     r5,r5,r7
0002f0  406e              EORS     r6,r6,r5
0002f2  f04f0800          MOV      r8,#0
0002f6  09cd              LSRS     r5,r1,#7
0002f8  eb0505c5          ADD      r5,r5,r5,LSL #3
0002fc  eb050545          ADD      r5,r5,r5,LSL #1
000300  ea850541          EOR      r5,r5,r1,LSL #1
000304  f3c515c0          UBFX     r5,r5,#7,#1
000308  eb0505c5          ADD      r5,r5,r5,LSL #3
00030c  eb050545          ADD      r5,r5,r5,LSL #1
000310  09cf              LSRS     r7,r1,#7
000312  eb0707c7          ADD      r7,r7,r7,LSL #3
000316  eb070747          ADD      r7,r7,r7,LSL #1
00031a  ea870741          EOR      r7,r7,r1,LSL #1
00031e  ea850547          EOR      r5,r5,r7,LSL #1
000322  f3c515c0          UBFX     r5,r5,#7,#1
000326  eb0505c5          ADD      r5,r5,r5,LSL #3
00032a  eb050545          ADD      r5,r5,r5,LSL #1
00032e  09cf              LSRS     r7,r1,#7
000330  eb0707c7          ADD      r7,r7,r7,LSL #3
000334  eb070747          ADD      r7,r7,r7,LSL #1
000338  ea870741          EOR      r7,r7,r1,LSL #1
00033c  f3c717c0          UBFX     r7,r7,#7,#1
000340  eb0707c7          ADD      r7,r7,r7,LSL #3
000344  eb070747          ADD      r7,r7,r7,LSL #1
000348  ea4f1cd1          LSR      r12,r1,#7
00034c  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000350  eb0c0c4c          ADD      r12,r12,r12,LSL #1
000354  ea8c0c41          EOR      r12,r12,r1,LSL #1
000358  ea87074c          EOR      r7,r7,r12,LSL #1
00035c  ea850547          EOR      r5,r5,r7,LSL #1
000360  09cf              LSRS     r7,r1,#7
000362  eb0707c7          ADD      r7,r7,r7,LSL #3
000366  eb070747          ADD      r7,r7,r7,LSL #1
00036a  ea870741          EOR      r7,r7,r1,LSL #1
00036e  f3c717c0          UBFX     r7,r7,#7,#1
000372  eb0707c7          ADD      r7,r7,r7,LSL #3
000376  eb070747          ADD      r7,r7,r7,LSL #1
00037a  ea4f1cd1          LSR      r12,r1,#7
00037e  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000382  eb0c0c4c          ADD      r12,r12,r12,LSL #1
000386  ea8c0c41          EOR      r12,r12,r1,LSL #1
00038a  ea87074c          EOR      r7,r7,r12,LSL #1
00038e  ea4f1cd1          LSR      r12,r1,#7
000392  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000396  eb0c0c4c          ADD      r12,r12,r12,LSL #1
00039a  ea8c0c41          EOR      r12,r12,r1,LSL #1
00039e  ea87070c          EOR      r7,r7,r12
0003a2  407d              EORS     r5,r5,r7
0003a4  ea880805          EOR      r8,r8,r5
0003a8  ea860508          EOR      r5,r6,r8
0003ac  f04f0c00          MOV      r12,#0
0003b0  09d6              LSRS     r6,r2,#7
0003b2  eb0606c6          ADD      r6,r6,r6,LSL #3
0003b6  eb060646          ADD      r6,r6,r6,LSL #1
0003ba  ea860642          EOR      r6,r6,r2,LSL #1
0003be  f3c616c0          UBFX     r6,r6,#7,#1
0003c2  eb0606c6          ADD      r6,r6,r6,LSL #3
0003c6  eb060646          ADD      r6,r6,r6,LSL #1
0003ca  09d7              LSRS     r7,r2,#7
0003cc  eb0707c7          ADD      r7,r7,r7,LSL #3
0003d0  eb070747          ADD      r7,r7,r7,LSL #1
0003d4  ea870742          EOR      r7,r7,r2,LSL #1
0003d8  ea860647          EOR      r6,r6,r7,LSL #1
0003dc  f3c616c0          UBFX     r6,r6,#7,#1
0003e0  eb0606c6          ADD      r6,r6,r6,LSL #3
0003e4  eb060646          ADD      r6,r6,r6,LSL #1
0003e8  09d7              LSRS     r7,r2,#7
0003ea  eb0707c7          ADD      r7,r7,r7,LSL #3
0003ee  eb070747          ADD      r7,r7,r7,LSL #1
0003f2  ea870742          EOR      r7,r7,r2,LSL #1
0003f6  f3c717c0          UBFX     r7,r7,#7,#1
0003fa  eb0707c7          ADD      r7,r7,r7,LSL #3
0003fe  eb070747          ADD      r7,r7,r7,LSL #1
000402  e001              B        |L9.1032|
                  |L9.1028|
                          DCD      state
                  |L9.1032|
000408  ea4f18d2          LSR      r8,r2,#7
00040c  eb0808c8          ADD      r8,r8,r8,LSL #3
000410  eb080848          ADD      r8,r8,r8,LSL #1
000414  ea880842          EOR      r8,r8,r2,LSL #1
000418  ea870748          EOR      r7,r7,r8,LSL #1
00041c  ea860647          EOR      r6,r6,r7,LSL #1
000420  09d7              LSRS     r7,r2,#7
000422  eb0707c7          ADD      r7,r7,r7,LSL #3
000426  eb070747          ADD      r7,r7,r7,LSL #1
00042a  ea870742          EOR      r7,r7,r2,LSL #1
00042e  4057              EORS     r7,r7,r2
000430  407e              EORS     r6,r6,r7
000432  ea8c0c06          EOR      r12,r12,r6
000436  ea85050c          EOR      r5,r5,r12
00043a  f04f0c00          MOV      r12,#0
00043e  09de              LSRS     r6,r3,#7
000440  eb0606c6          ADD      r6,r6,r6,LSL #3
000444  eb060646          ADD      r6,r6,r6,LSL #1
000448  ea860643          EOR      r6,r6,r3,LSL #1
00044c  f3c616c0          UBFX     r6,r6,#7,#1
000450  eb0606c6          ADD      r6,r6,r6,LSL #3
000454  eb060646          ADD      r6,r6,r6,LSL #1
000458  09df              LSRS     r7,r3,#7
00045a  eb0707c7          ADD      r7,r7,r7,LSL #3
00045e  eb070747          ADD      r7,r7,r7,LSL #1
000462  ea870743          EOR      r7,r7,r3,LSL #1
000466  ea860647          EOR      r6,r6,r7,LSL #1
00046a  f3c616c0          UBFX     r6,r6,#7,#1
00046e  eb0606c6          ADD      r6,r6,r6,LSL #3
000472  eb060646          ADD      r6,r6,r6,LSL #1
000476  09df              LSRS     r7,r3,#7
000478  eb0707c7          ADD      r7,r7,r7,LSL #3
00047c  eb070747          ADD      r7,r7,r7,LSL #1
000480  ea870743          EOR      r7,r7,r3,LSL #1
000484  f3c717c0          UBFX     r7,r7,#7,#1
000488  eb0707c7          ADD      r7,r7,r7,LSL #3
00048c  eb070747          ADD      r7,r7,r7,LSL #1
000490  ea4f18d3          LSR      r8,r3,#7
000494  eb0808c8          ADD      r8,r8,r8,LSL #3
000498  eb080848          ADD      r8,r8,r8,LSL #1
00049c  ea880843          EOR      r8,r8,r3,LSL #1
0004a0  ea870748          EOR      r7,r7,r8,LSL #1
0004a4  ea860647          EOR      r6,r6,r7,LSL #1
0004a8  09df              LSRS     r7,r3,#7
0004aa  eb0707c7          ADD      r7,r7,r7,LSL #3
0004ae  eb070747          ADD      r7,r7,r7,LSL #1
0004b2  ea870743          EOR      r7,r7,r3,LSL #1
0004b6  f3c717c0          UBFX     r7,r7,#7,#1
0004ba  eb0707c7          ADD      r7,r7,r7,LSL #3
0004be  eb070747          ADD      r7,r7,r7,LSL #1
0004c2  ea4f18d3          LSR      r8,r3,#7
0004c6  eb0808c8          ADD      r8,r8,r8,LSL #3
0004ca  eb080848          ADD      r8,r8,r8,LSL #1
0004ce  ea880843          EOR      r8,r8,r3,LSL #1
0004d2  ea870748          EOR      r7,r7,r8,LSL #1
0004d6  405f              EORS     r7,r7,r3
0004d8  407e              EORS     r6,r6,r7
0004da  ea8c0c06          EOR      r12,r12,r6
0004de  ea85050c          EOR      r5,r5,r12
0004e2  b2ee              UXTB     r6,r5
0004e4  4dfe              LDR      r5,|L9.2272|
0004e6  552e              STRB     r6,[r5,r4]
;;;253            state[2][i] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
0004e8  2700              MOVS     r7,#0
0004ea  09c5              LSRS     r5,r0,#7
0004ec  eb0505c5          ADD      r5,r5,r5,LSL #3
0004f0  eb050545          ADD      r5,r5,r5,LSL #1
0004f4  ea850540          EOR      r5,r5,r0,LSL #1
0004f8  f3c515c0          UBFX     r5,r5,#7,#1
0004fc  eb0505c5          ADD      r5,r5,r5,LSL #3
000500  eb050545          ADD      r5,r5,r5,LSL #1
000504  09c6              LSRS     r6,r0,#7
000506  eb0606c6          ADD      r6,r6,r6,LSL #3
00050a  eb060646          ADD      r6,r6,r6,LSL #1
00050e  ea860640          EOR      r6,r6,r0,LSL #1
000512  ea850546          EOR      r5,r5,r6,LSL #1
000516  f3c515c0          UBFX     r5,r5,#7,#1
00051a  eb0505c5          ADD      r5,r5,r5,LSL #3
00051e  eb050545          ADD      r5,r5,r5,LSL #1
000522  09c6              LSRS     r6,r0,#7
000524  eb0606c6          ADD      r6,r6,r6,LSL #3
000528  eb060646          ADD      r6,r6,r6,LSL #1
00052c  ea860640          EOR      r6,r6,r0,LSL #1
000530  f3c616c0          UBFX     r6,r6,#7,#1
000534  eb0606c6          ADD      r6,r6,r6,LSL #3
000538  eb060646          ADD      r6,r6,r6,LSL #1
00053c  ea4f1cd0          LSR      r12,r0,#7
000540  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000544  eb0c0c4c          ADD      r12,r12,r12,LSL #1
000548  ea8c0c40          EOR      r12,r12,r0,LSL #1
00054c  ea86064c          EOR      r6,r6,r12,LSL #1
000550  ea850646          EOR      r6,r5,r6,LSL #1
000554  09c5              LSRS     r5,r0,#7
000556  eb0505c5          ADD      r5,r5,r5,LSL #3
00055a  eb050545          ADD      r5,r5,r5,LSL #1
00055e  ea850540          EOR      r5,r5,r0,LSL #1
000562  f3c515c0          UBFX     r5,r5,#7,#1
000566  eb0505c5          ADD      r5,r5,r5,LSL #3
00056a  eb050545          ADD      r5,r5,r5,LSL #1
00056e  ea4f1cd0          LSR      r12,r0,#7
000572  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000576  eb0c0c4c          ADD      r12,r12,r12,LSL #1
00057a  ea8c0c40          EOR      r12,r12,r0,LSL #1
00057e  ea85054c          EOR      r5,r5,r12,LSL #1
000582  4045              EORS     r5,r5,r0
000584  406e              EORS     r6,r6,r5
000586  407e              EORS     r6,r6,r7
000588  46bc              MOV      r12,r7
00058a  09cd              LSRS     r5,r1,#7
00058c  eb0505c5          ADD      r5,r5,r5,LSL #3
000590  eb050545          ADD      r5,r5,r5,LSL #1
000594  ea850541          EOR      r5,r5,r1,LSL #1
000598  f3c515c0          UBFX     r5,r5,#7,#1
00059c  eb0505c5          ADD      r5,r5,r5,LSL #3
0005a0  eb050545          ADD      r5,r5,r5,LSL #1
0005a4  09cf              LSRS     r7,r1,#7
0005a6  eb0707c7          ADD      r7,r7,r7,LSL #3
0005aa  eb070747          ADD      r7,r7,r7,LSL #1
0005ae  ea870741          EOR      r7,r7,r1,LSL #1
0005b2  ea850547          EOR      r5,r5,r7,LSL #1
0005b6  f3c515c0          UBFX     r5,r5,#7,#1
0005ba  eb0505c5          ADD      r5,r5,r5,LSL #3
0005be  eb050545          ADD      r5,r5,r5,LSL #1
0005c2  09cf              LSRS     r7,r1,#7
0005c4  eb0707c7          ADD      r7,r7,r7,LSL #3
0005c8  eb070747          ADD      r7,r7,r7,LSL #1
0005cc  ea870741          EOR      r7,r7,r1,LSL #1
0005d0  f3c717c0          UBFX     r7,r7,#7,#1
0005d4  eb0707c7          ADD      r7,r7,r7,LSL #3
0005d8  eb070747          ADD      r7,r7,r7,LSL #1
0005dc  ea4f18d1          LSR      r8,r1,#7
0005e0  eb0808c8          ADD      r8,r8,r8,LSL #3
0005e4  eb080848          ADD      r8,r8,r8,LSL #1
0005e8  ea880841          EOR      r8,r8,r1,LSL #1
0005ec  ea870748          EOR      r7,r7,r8,LSL #1
0005f0  ea850547          EOR      r5,r5,r7,LSL #1
0005f4  2700              MOVS     r7,#0
0005f6  ea870801          EOR      r8,r7,r1
0005fa  ea870708          EOR      r7,r7,r8
0005fe  407d              EORS     r5,r5,r7
000600  ea8c0c05          EOR      r12,r12,r5
000604  ea86050c          EOR      r5,r6,r12
000608  f04f0800          MOV      r8,#0
00060c  09d6              LSRS     r6,r2,#7
00060e  eb0606c6          ADD      r6,r6,r6,LSL #3
000612  eb060646          ADD      r6,r6,r6,LSL #1
000616  ea860642          EOR      r6,r6,r2,LSL #1
00061a  f3c616c0          UBFX     r6,r6,#7,#1
00061e  eb0606c6          ADD      r6,r6,r6,LSL #3
000622  eb060646          ADD      r6,r6,r6,LSL #1
000626  09d7              LSRS     r7,r2,#7
000628  eb0707c7          ADD      r7,r7,r7,LSL #3
00062c  eb070747          ADD      r7,r7,r7,LSL #1
000630  ea870742          EOR      r7,r7,r2,LSL #1
000634  ea860647          EOR      r6,r6,r7,LSL #1
000638  f3c616c0          UBFX     r6,r6,#7,#1
00063c  eb0606c6          ADD      r6,r6,r6,LSL #3
000640  eb060646          ADD      r6,r6,r6,LSL #1
000644  09d7              LSRS     r7,r2,#7
000646  eb0707c7          ADD      r7,r7,r7,LSL #3
00064a  eb070747          ADD      r7,r7,r7,LSL #1
00064e  ea870742          EOR      r7,r7,r2,LSL #1
000652  f3c717c0          UBFX     r7,r7,#7,#1
000656  eb0707c7          ADD      r7,r7,r7,LSL #3
00065a  eb070747          ADD      r7,r7,r7,LSL #1
00065e  ea4f1cd2          LSR      r12,r2,#7
000662  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000666  eb0c0c4c          ADD      r12,r12,r12,LSL #1
00066a  ea8c0c42          EOR      r12,r12,r2,LSL #1
00066e  ea87074c          EOR      r7,r7,r12,LSL #1
000672  ea860647          EOR      r6,r6,r7,LSL #1
000676  09d7              LSRS     r7,r2,#7
000678  eb0707c7          ADD      r7,r7,r7,LSL #3
00067c  eb070747          ADD      r7,r7,r7,LSL #1
000680  ea870742          EOR      r7,r7,r2,LSL #1
000684  f3c717c0          UBFX     r7,r7,#7,#1
000688  eb0707c7          ADD      r7,r7,r7,LSL #3
00068c  eb070747          ADD      r7,r7,r7,LSL #1
000690  ea4f1cd2          LSR      r12,r2,#7
000694  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000698  eb0c0c4c          ADD      r12,r12,r12,LSL #1
00069c  ea8c0c42          EOR      r12,r12,r2,LSL #1
0006a0  ea87074c          EOR      r7,r7,r12,LSL #1
0006a4  ea4f1cd2          LSR      r12,r2,#7
0006a8  eb0c0ccc          ADD      r12,r12,r12,LSL #3
0006ac  eb0c0c4c          ADD      r12,r12,r12,LSL #1
0006b0  ea8c0c42          EOR      r12,r12,r2,LSL #1
0006b4  ea87070c          EOR      r7,r7,r12
0006b8  407e              EORS     r6,r6,r7
0006ba  ea880806          EOR      r8,r8,r6
0006be  ea850708          EOR      r7,r5,r8
0006c2  f04f0c00          MOV      r12,#0
0006c6  09dd              LSRS     r5,r3,#7
0006c8  eb0505c5          ADD      r5,r5,r5,LSL #3
0006cc  eb050545          ADD      r5,r5,r5,LSL #1
0006d0  ea850543          EOR      r5,r5,r3,LSL #1
0006d4  f3c515c0          UBFX     r5,r5,#7,#1
0006d8  eb0505c5          ADD      r5,r5,r5,LSL #3
0006dc  eb050545          ADD      r5,r5,r5,LSL #1
0006e0  09de              LSRS     r6,r3,#7
0006e2  eb0606c6          ADD      r6,r6,r6,LSL #3
0006e6  eb060646          ADD      r6,r6,r6,LSL #1
0006ea  ea860643          EOR      r6,r6,r3,LSL #1
0006ee  ea850546          EOR      r5,r5,r6,LSL #1
0006f2  f3c515c0          UBFX     r5,r5,#7,#1
0006f6  eb0505c5          ADD      r5,r5,r5,LSL #3
0006fa  eb050545          ADD      r5,r5,r5,LSL #1
0006fe  09de              LSRS     r6,r3,#7
000700  eb0606c6          ADD      r6,r6,r6,LSL #3
000704  eb060646          ADD      r6,r6,r6,LSL #1
000708  ea860643          EOR      r6,r6,r3,LSL #1
00070c  f3c616c0          UBFX     r6,r6,#7,#1
000710  eb0606c6          ADD      r6,r6,r6,LSL #3
000714  eb060646          ADD      r6,r6,r6,LSL #1
000718  ea4f18d3          LSR      r8,r3,#7
00071c  eb0808c8          ADD      r8,r8,r8,LSL #3
000720  eb080848          ADD      r8,r8,r8,LSL #1
000724  ea880843          EOR      r8,r8,r3,LSL #1
000728  ea860648          EOR      r6,r6,r8,LSL #1
00072c  ea850546          EOR      r5,r5,r6,LSL #1
000730  09de              LSRS     r6,r3,#7
000732  eb0606c6          ADD      r6,r6,r6,LSL #3
000736  eb060646          ADD      r6,r6,r6,LSL #1
00073a  ea860643          EOR      r6,r6,r3,LSL #1
00073e  405e              EORS     r6,r6,r3
000740  4075              EORS     r5,r5,r6
000742  ea8c0c05          EOR      r12,r12,r5
000746  ea87070c          EOR      r7,r7,r12
00074a  4d65              LDR      r5,|L9.2272|
00074c  1d2d              ADDS     r5,r5,#4
00074e  552f              STRB     r7,[r5,r4]
;;;254            state[3][i] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
000750  2700              MOVS     r7,#0
000752  09c5              LSRS     r5,r0,#7
000754  eb0505c5          ADD      r5,r5,r5,LSL #3
000758  eb050545          ADD      r5,r5,r5,LSL #1
00075c  ea850540          EOR      r5,r5,r0,LSL #1
000760  f3c515c0          UBFX     r5,r5,#7,#1
000764  eb0505c5          ADD      r5,r5,r5,LSL #3
000768  eb050545          ADD      r5,r5,r5,LSL #1
00076c  09c6              LSRS     r6,r0,#7
00076e  eb0606c6          ADD      r6,r6,r6,LSL #3
000772  eb060646          ADD      r6,r6,r6,LSL #1
000776  ea860640          EOR      r6,r6,r0,LSL #1
00077a  ea850546          EOR      r5,r5,r6,LSL #1
00077e  f3c515c0          UBFX     r5,r5,#7,#1
000782  eb0505c5          ADD      r5,r5,r5,LSL #3
000786  eb050545          ADD      r5,r5,r5,LSL #1
00078a  09c6              LSRS     r6,r0,#7
00078c  eb0606c6          ADD      r6,r6,r6,LSL #3
000790  eb060646          ADD      r6,r6,r6,LSL #1
000794  ea860640          EOR      r6,r6,r0,LSL #1
000798  f3c616c0          UBFX     r6,r6,#7,#1
00079c  eb0606c6          ADD      r6,r6,r6,LSL #3
0007a0  eb060646          ADD      r6,r6,r6,LSL #1
0007a4  ea4f1cd0          LSR      r12,r0,#7
0007a8  eb0c0ccc          ADD      r12,r12,r12,LSL #3
0007ac  eb0c0c4c          ADD      r12,r12,r12,LSL #1
0007b0  ea8c0c40          EOR      r12,r12,r0,LSL #1
0007b4  ea86064c          EOR      r6,r6,r12,LSL #1
0007b8  ea850546          EOR      r5,r5,r6,LSL #1
0007bc  09c6              LSRS     r6,r0,#7
0007be  eb0606c6          ADD      r6,r6,r6,LSL #3
0007c2  eb060646          ADD      r6,r6,r6,LSL #1
0007c6  ea860640          EOR      r6,r6,r0,LSL #1
0007ca  4046              EORS     r6,r6,r0
0007cc  4075              EORS     r5,r5,r6
0007ce  407d              EORS     r5,r5,r7
0007d0  46bc              MOV      r12,r7
0007d2  09ce              LSRS     r6,r1,#7
0007d4  eb0606c6          ADD      r6,r6,r6,LSL #3
0007d8  eb060646          ADD      r6,r6,r6,LSL #1
0007dc  ea860641          EOR      r6,r6,r1,LSL #1
0007e0  f3c616c0          UBFX     r6,r6,#7,#1
0007e4  eb0606c6          ADD      r6,r6,r6,LSL #3
0007e8  eb060646          ADD      r6,r6,r6,LSL #1
0007ec  09cf              LSRS     r7,r1,#7
0007ee  eb0707c7          ADD      r7,r7,r7,LSL #3
0007f2  eb070747          ADD      r7,r7,r7,LSL #1
0007f6  ea870741          EOR      r7,r7,r1,LSL #1
0007fa  ea860647          EOR      r6,r6,r7,LSL #1
0007fe  f3c616c0          UBFX     r6,r6,#7,#1
000802  e000              B        |L9.2054|
                  |L9.2052|
000804  e0df              B        |L9.2502|
                  |L9.2054|
000806  eb0606c6          ADD      r6,r6,r6,LSL #3
00080a  eb060646          ADD      r6,r6,r6,LSL #1
00080e  09cf              LSRS     r7,r1,#7
000810  eb0707c7          ADD      r7,r7,r7,LSL #3
000814  eb070747          ADD      r7,r7,r7,LSL #1
000818  ea870741          EOR      r7,r7,r1,LSL #1
00081c  f3c717c0          UBFX     r7,r7,#7,#1
000820  eb0707c7          ADD      r7,r7,r7,LSL #3
000824  eb070747          ADD      r7,r7,r7,LSL #1
000828  ea4f18d1          LSR      r8,r1,#7
00082c  eb0808c8          ADD      r8,r8,r8,LSL #3
000830  eb080848          ADD      r8,r8,r8,LSL #1
000834  ea880841          EOR      r8,r8,r1,LSL #1
000838  ea870748          EOR      r7,r7,r8,LSL #1
00083c  ea860647          EOR      r6,r6,r7,LSL #1
000840  09cf              LSRS     r7,r1,#7
000842  eb0707c7          ADD      r7,r7,r7,LSL #3
000846  eb070747          ADD      r7,r7,r7,LSL #1
00084a  ea870741          EOR      r7,r7,r1,LSL #1
00084e  f3c717c0          UBFX     r7,r7,#7,#1
000852  eb0707c7          ADD      r7,r7,r7,LSL #3
000856  eb070747          ADD      r7,r7,r7,LSL #1
00085a  ea4f18d1          LSR      r8,r1,#7
00085e  eb0808c8          ADD      r8,r8,r8,LSL #3
000862  eb080848          ADD      r8,r8,r8,LSL #1
000866  ea880841          EOR      r8,r8,r1,LSL #1
00086a  ea870748          EOR      r7,r7,r8,LSL #1
00086e  404f              EORS     r7,r7,r1
000870  407e              EORS     r6,r6,r7
000872  ea8c0c06          EOR      r12,r12,r6
000876  ea85060c          EOR      r6,r5,r12
00087a  f04f0c00          MOV      r12,#0
00087e  09d5              LSRS     r5,r2,#7
000880  eb0505c5          ADD      r5,r5,r5,LSL #3
000884  eb050545          ADD      r5,r5,r5,LSL #1
000888  ea850542          EOR      r5,r5,r2,LSL #1
00088c  f3c515c0          UBFX     r5,r5,#7,#1
000890  eb0505c5          ADD      r5,r5,r5,LSL #3
000894  eb050545          ADD      r5,r5,r5,LSL #1
000898  09d7              LSRS     r7,r2,#7
00089a  eb0707c7          ADD      r7,r7,r7,LSL #3
00089e  eb070747          ADD      r7,r7,r7,LSL #1
0008a2  ea870742          EOR      r7,r7,r2,LSL #1
0008a6  ea850547          EOR      r5,r5,r7,LSL #1
0008aa  f3c515c0          UBFX     r5,r5,#7,#1
0008ae  eb0505c5          ADD      r5,r5,r5,LSL #3
0008b2  eb050545          ADD      r5,r5,r5,LSL #1
0008b6  09d7              LSRS     r7,r2,#7
0008b8  eb0707c7          ADD      r7,r7,r7,LSL #3
0008bc  eb070747          ADD      r7,r7,r7,LSL #1
0008c0  ea870742          EOR      r7,r7,r2,LSL #1
0008c4  f3c717c0          UBFX     r7,r7,#7,#1
0008c8  eb0707c7          ADD      r7,r7,r7,LSL #3
0008cc  eb070747          ADD      r7,r7,r7,LSL #1
0008d0  ea4f18d2          LSR      r8,r2,#7
0008d4  eb0808c8          ADD      r8,r8,r8,LSL #3
0008d8  eb080848          ADD      r8,r8,r8,LSL #1
0008dc  e002              B        |L9.2276|
0008de  0000              DCW      0x0000
                  |L9.2272|
                          DCD      state+0x4
                  |L9.2276|
0008e4  ea880842          EOR      r8,r8,r2,LSL #1
0008e8  ea870748          EOR      r7,r7,r8,LSL #1
0008ec  ea850547          EOR      r5,r5,r7,LSL #1
0008f0  2700              MOVS     r7,#0
0008f2  ea870802          EOR      r8,r7,r2
0008f6  ea870708          EOR      r7,r7,r8
0008fa  407d              EORS     r5,r5,r7
0008fc  ea8c0c05          EOR      r12,r12,r5
000900  ea86050c          EOR      r5,r6,r12
000904  f04f0800          MOV      r8,#0
000908  09de              LSRS     r6,r3,#7
00090a  eb0606c6          ADD      r6,r6,r6,LSL #3
00090e  eb060646          ADD      r6,r6,r6,LSL #1
000912  ea860643          EOR      r6,r6,r3,LSL #1
000916  f3c616c0          UBFX     r6,r6,#7,#1
00091a  eb0606c6          ADD      r6,r6,r6,LSL #3
00091e  eb060646          ADD      r6,r6,r6,LSL #1
000922  09df              LSRS     r7,r3,#7
000924  eb0707c7          ADD      r7,r7,r7,LSL #3
000928  eb070747          ADD      r7,r7,r7,LSL #1
00092c  ea870743          EOR      r7,r7,r3,LSL #1
000930  ea860647          EOR      r6,r6,r7,LSL #1
000934  f3c616c0          UBFX     r6,r6,#7,#1
000938  eb0606c6          ADD      r6,r6,r6,LSL #3
00093c  eb060646          ADD      r6,r6,r6,LSL #1
000940  09df              LSRS     r7,r3,#7
000942  eb0707c7          ADD      r7,r7,r7,LSL #3
000946  eb070747          ADD      r7,r7,r7,LSL #1
00094a  ea870743          EOR      r7,r7,r3,LSL #1
00094e  f3c717c0          UBFX     r7,r7,#7,#1
000952  eb0707c7          ADD      r7,r7,r7,LSL #3
000956  eb070747          ADD      r7,r7,r7,LSL #1
00095a  ea4f1cd3          LSR      r12,r3,#7
00095e  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000962  eb0c0c4c          ADD      r12,r12,r12,LSL #1
000966  ea8c0c43          EOR      r12,r12,r3,LSL #1
00096a  ea87074c          EOR      r7,r7,r12,LSL #1
00096e  ea860647          EOR      r6,r6,r7,LSL #1
000972  09df              LSRS     r7,r3,#7
000974  eb0707c7          ADD      r7,r7,r7,LSL #3
000978  eb070747          ADD      r7,r7,r7,LSL #1
00097c  ea870743          EOR      r7,r7,r3,LSL #1
000980  f3c717c0          UBFX     r7,r7,#7,#1
000984  eb0707c7          ADD      r7,r7,r7,LSL #3
000988  eb070747          ADD      r7,r7,r7,LSL #1
00098c  ea4f1cd3          LSR      r12,r3,#7
000990  eb0c0ccc          ADD      r12,r12,r12,LSL #3
000994  eb0c0c4c          ADD      r12,r12,r12,LSL #1
000998  ea8c0c43          EOR      r12,r12,r3,LSL #1
00099c  ea87074c          EOR      r7,r7,r12,LSL #1
0009a0  ea4f1cd3          LSR      r12,r3,#7
0009a4  eb0c0ccc          ADD      r12,r12,r12,LSL #3
0009a8  eb0c0c4c          ADD      r12,r12,r12,LSL #1
0009ac  ea8c0c43          EOR      r12,r12,r3,LSL #1
0009b0  ea87070c          EOR      r7,r7,r12
0009b4  407e              EORS     r6,r6,r7
0009b6  ea880806          EOR      r8,r8,r6
0009ba  ea850508          EOR      r5,r5,r8
0009be  b2ee              UXTB     r6,r5
0009c0  4d03              LDR      r5,|L9.2512|
0009c2  552e              STRB     r6,[r5,r4]
0009c4  1c64              ADDS     r4,r4,#1              ;242
                  |L9.2502|
0009c6  2c04              CMP      r4,#4                 ;242
0009c8  f6ffab1e          BLT      |L9.8|
;;;255        }
;;;256    }
0009cc  e8bd83f0          POP      {r4-r9,pc}
;;;257    
                          ENDP

                  |L9.2512|
                          DCD      state+0xc

                          AREA ||i.InvShiftRows||, CODE, READONLY, ALIGN=2

                  InvShiftRows PROC
;;;200    // Offset = Row number. So the first row is not shifted.
;;;201    void InvShiftRows()
000000  490e              LDR      r1,|L10.60|
;;;202    {
;;;203        unsigned char temp;
;;;204    
;;;205        // Rotate first row 1 columns to right    
;;;206        temp=state[1][3];
000002  79c8              LDRB     r0,[r1,#7]
;;;207        state[1][3]=state[1][2];
000004  798a              LDRB     r2,[r1,#6]
000006  71ca              STRB     r2,[r1,#7]
;;;208        state[1][2]=state[1][1];
000008  794a              LDRB     r2,[r1,#5]
00000a  718a              STRB     r2,[r1,#6]
;;;209        state[1][1]=state[1][0];
00000c  790a              LDRB     r2,[r1,#4]  ; state
00000e  714a              STRB     r2,[r1,#5]
;;;210        state[1][0]=temp;
000010  7108              STRB     r0,[r1,#4]
;;;211    
;;;212        // Rotate second row 2 columns to right    
;;;213        temp=state[2][0];
000012  7a08              LDRB     r0,[r1,#8]  ; state
;;;214        state[2][0]=state[2][2];
000014  7a89              LDRB     r1,[r1,#0xa]
000016  4a09              LDR      r2,|L10.60|
000018  7211              STRB     r1,[r2,#8]
;;;215        state[2][2]=temp;
00001a  4611              MOV      r1,r2
00001c  7288              STRB     r0,[r1,#0xa]
;;;216    
;;;217        temp=state[2][1];
00001e  7a48              LDRB     r0,[r1,#9]
;;;218        state[2][1]=state[2][3];
000020  7aca              LDRB     r2,[r1,#0xb]
000022  724a              STRB     r2,[r1,#9]
;;;219        state[2][3]=temp;
000024  72c8              STRB     r0,[r1,#0xb]
;;;220    
;;;221        // Rotate third row 3 columns to right
;;;222        temp=state[3][0];
000026  7b08              LDRB     r0,[r1,#0xc]  ; state
;;;223        state[3][0]=state[3][1];
000028  7b49              LDRB     r1,[r1,#0xd]
00002a  4a04              LDR      r2,|L10.60|
00002c  7311              STRB     r1,[r2,#0xc]
;;;224        state[3][1]=state[3][2];
00002e  4611              MOV      r1,r2
000030  7b8a              LDRB     r2,[r1,#0xe]
000032  734a              STRB     r2,[r1,#0xd]
;;;225        state[3][2]=state[3][3];
000034  7bca              LDRB     r2,[r1,#0xf]
000036  738a              STRB     r2,[r1,#0xe]
;;;226        state[3][3]=temp;
000038  73c8              STRB     r0,[r1,#0xf]
;;;227    }
00003a  4770              BX       lr
;;;228    
                          ENDP

                  |L10.60|
                          DCD      state

                          AREA ||i.InvSubBytes||, CODE, READONLY, ALIGN=2

                  InvSubBytes PROC
;;;184    // state matrix with values in an S-box.
;;;185    void InvSubBytes()
000000  b500              PUSH     {lr}
;;;186    {
;;;187        int i,j;
;;;188        for(i=0;i<4;i++)
000002  2200              MOVS     r2,#0
000004  e00f              B        |L11.38|
                  |L11.6|
;;;189        {
;;;190            for(j=0;j<4;j++)
000006  2300              MOVS     r3,#0
000008  e00a              B        |L11.32|
                  |L11.10|
;;;191            {
;;;192                state[i][j] = getSBoxInvert(state[i][j]);
00000a  4908              LDR      r1,|L11.44|
00000c  eb010182          ADD      r1,r1,r2,LSL #2
000010  5cc8              LDRB     r0,[r1,r3]
000012  f7fffffe          BL       getSBoxInvert
000016  4905              LDR      r1,|L11.44|
000018  eb010182          ADD      r1,r1,r2,LSL #2
00001c  54c8              STRB     r0,[r1,r3]
00001e  1c5b              ADDS     r3,r3,#1              ;190
                  |L11.32|
000020  2b04              CMP      r3,#4                 ;190
000022  dbf2              BLT      |L11.10|
000024  1c52              ADDS     r2,r2,#1              ;188
                  |L11.38|
000026  2a04              CMP      r2,#4                 ;188
000028  dbed              BLT      |L11.6|
;;;193    
;;;194            }
;;;195        }
;;;196    }
00002a  bd00              POP      {pc}
;;;197    
                          ENDP

                  |L11.44|
                          DCD      state

                          AREA ||i.KeyExpansion||, CODE, READONLY, ALIGN=2

                  KeyExpansion PROC
;;;107    // This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
;;;108    void KeyExpansion()
000000  b538              PUSH     {r3-r5,lr}
;;;109    {
;;;110        int i,j;
;;;111        unsigned char temp[4],k;
;;;112        
;;;113        // The first round key is the key itself.
;;;114        for(i=0;i<Nk;i++)
000002  2200              MOVS     r2,#0
000004  e022              B        |L12.76|
                  |L12.6|
;;;115        {
;;;116            RoundKey[i*4]=Key[i*4];
000006  486d              LDR      r0,|L12.444|
000008  f8100022          LDRB     r0,[r0,r2,LSL #2]
00000c  496c              LDR      r1,|L12.448|
00000e  f8010022          STRB     r0,[r1,r2,LSL #2]
;;;117            RoundKey[i*4+1]=Key[i*4+1];
000012  2001              MOVS     r0,#1
000014  eb000082          ADD      r0,r0,r2,LSL #2
000018  4968              LDR      r1,|L12.444|
00001a  5c08              LDRB     r0,[r1,r0]
00001c  2101              MOVS     r1,#1
00001e  eb010182          ADD      r1,r1,r2,LSL #2
000022  4d67              LDR      r5,|L12.448|
000024  5468              STRB     r0,[r5,r1]
;;;118            RoundKey[i*4+2]=Key[i*4+2];
000026  2002              MOVS     r0,#2
000028  eb000082          ADD      r0,r0,r2,LSL #2
00002c  4963              LDR      r1,|L12.444|
00002e  5c08              LDRB     r0,[r1,r0]
000030  2102              MOVS     r1,#2
000032  eb010182          ADD      r1,r1,r2,LSL #2
000036  5468              STRB     r0,[r5,r1]
;;;119            RoundKey[i*4+3]=Key[i*4+3];
000038  2003              MOVS     r0,#3
00003a  eb000082          ADD      r0,r0,r2,LSL #2
00003e  495f              LDR      r1,|L12.444|
000040  5c08              LDRB     r0,[r1,r0]
000042  2103              MOVS     r1,#3
000044  eb010182          ADD      r1,r1,r2,LSL #2
000048  5468              STRB     r0,[r5,r1]
00004a  1c52              ADDS     r2,r2,#1              ;114
                  |L12.76|
00004c  485d              LDR      r0,|L12.452|
00004e  6800              LDR      r0,[r0,#0]            ;114  ; Nk
000050  4282              CMP      r2,r0                 ;114
000052  dbd8              BLT      |L12.6|
;;;120        }
;;;121    
;;;122        // All other round keys are found from the previous round keys.
;;;123        while (i < (Nb * (Nr+1)))
000054  e0a9              B        |L12.426|
                  |L12.86|
;;;124        {
;;;125            for(j=0;j<4;j++)
000056  2300              MOVS     r3,#0
000058  e007              B        |L12.106|
                  |L12.90|
;;;126            {
;;;127                temp[j]=RoundKey[(i-1) * 4 + j];
00005a  1e50              SUBS     r0,r2,#1
00005c  eb030080          ADD      r0,r3,r0,LSL #2
000060  4957              LDR      r1,|L12.448|
000062  5c08              LDRB     r0,[r1,r0]
000064  f80d0003          STRB     r0,[sp,r3]
000068  1c5b              ADDS     r3,r3,#1              ;125
                  |L12.106|
00006a  2b04              CMP      r3,#4                 ;125
00006c  dbf5              BLT      |L12.90|
;;;128            }
;;;129            if (i % Nk == 0)
00006e  4855              LDR      r0,|L12.452|
000070  6800              LDR      r0,[r0,#0]  ; Nk
000072  fb92f1f0          SDIV     r1,r2,r0
000076  fb002011          MLS      r0,r0,r1,r2
00007a  bb98              CBNZ     r0,|L12.228|
;;;130            {
;;;131                // This function rotates the 4 bytes in a word to the left once.
;;;132                // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]
;;;133                {
;;;134                    k = temp[0];
00007c  f89d4000          LDRB     r4,[sp,#0]
;;;135                    temp[0] = temp[1];
000080  f89d0001          LDRB     r0,[sp,#1]
000084  f88d0000          STRB     r0,[sp,#0]
;;;136                    temp[1] = temp[2];
000088  f89d0002          LDRB     r0,[sp,#2]
00008c  f88d0001          STRB     r0,[sp,#1]
;;;137                    temp[2] = temp[3];
000090  f89d0003          LDRB     r0,[sp,#3]
000094  f88d0002          STRB     r0,[sp,#2]
;;;138                    temp[3] = k;
000098  f88d4003          STRB     r4,[sp,#3]
;;;139                }
;;;140    
;;;141                // SubWord() is a function that takes a four-byte input word and 
;;;142                // applies the S-box to each of the four bytes to produce an output word.
;;;143                {
;;;144                    temp[0]=getSBoxValue(temp[0]);
00009c  f89d0000          LDRB     r0,[sp,#0]
0000a0  f7fffffe          BL       getSBoxValue
0000a4  f88d0000          STRB     r0,[sp,#0]
;;;145                    temp[1]=getSBoxValue(temp[1]);
0000a8  f89d0001          LDRB     r0,[sp,#1]
0000ac  f7fffffe          BL       getSBoxValue
0000b0  f88d0001          STRB     r0,[sp,#1]
;;;146                    temp[2]=getSBoxValue(temp[2]);
0000b4  f89d0002          LDRB     r0,[sp,#2]
0000b8  f7fffffe          BL       getSBoxValue
0000bc  f88d0002          STRB     r0,[sp,#2]
;;;147                    temp[3]=getSBoxValue(temp[3]);
0000c0  f89d0003          LDRB     r0,[sp,#3]
0000c4  f7fffffe          BL       getSBoxValue
0000c8  f88d0003          STRB     r0,[sp,#3]
;;;148                }
;;;149    
;;;150                temp[0] =  temp[0] ^ Rcon[i/Nk];
0000cc  483d              LDR      r0,|L12.452|
0000ce  6800              LDR      r0,[r0,#0]  ; Nk
0000d0  fb92f0f0          SDIV     r0,r2,r0
0000d4  493c              LDR      r1,|L12.456|
0000d6  5c08              LDRB     r0,[r1,r0]
0000d8  f89d1000          LDRB     r1,[sp,#0]
0000dc  4048              EORS     r0,r0,r1
0000de  f88d0000          STRB     r0,[sp,#0]
0000e2  e024              B        |L12.302|
                  |L12.228|
0000e4  e7ff              B        |L12.230|
                  |L12.230|
;;;151            }
;;;152            else if (Nk > 6 && i % Nk == 4)
0000e6  4837              LDR      r0,|L12.452|
0000e8  6800              LDR      r0,[r0,#0]  ; Nk
0000ea  2806              CMP      r0,#6
0000ec  dd1f              BLE      |L12.302|
0000ee  4835              LDR      r0,|L12.452|
0000f0  6800              LDR      r0,[r0,#0]  ; Nk
0000f2  fb92f1f0          SDIV     r1,r2,r0
0000f6  fb002011          MLS      r0,r0,r1,r2
0000fa  2804              CMP      r0,#4
0000fc  d117              BNE      |L12.302|
;;;153            {
;;;154                {
;;;155                    temp[0]=getSBoxValue(temp[0]);
0000fe  f89d0000          LDRB     r0,[sp,#0]
000102  f7fffffe          BL       getSBoxValue
000106  f88d0000          STRB     r0,[sp,#0]
;;;156                    temp[1]=getSBoxValue(temp[1]);
00010a  f89d0001          LDRB     r0,[sp,#1]
00010e  f7fffffe          BL       getSBoxValue
000112  f88d0001          STRB     r0,[sp,#1]
;;;157                    temp[2]=getSBoxValue(temp[2]);
000116  f89d0002          LDRB     r0,[sp,#2]
00011a  f7fffffe          BL       getSBoxValue
00011e  f88d0002          STRB     r0,[sp,#2]
;;;158                    temp[3]=getSBoxValue(temp[3]);
000122  f89d0003          LDRB     r0,[sp,#3]
000126  f7fffffe          BL       getSBoxValue
00012a  f88d0003          STRB     r0,[sp,#3]
                  |L12.302|
;;;159                }
;;;160            }
;;;161            RoundKey[i*4+0] = RoundKey[(i-Nk)*4+0] ^ temp[0];
00012e  4825              LDR      r0,|L12.452|
000130  6800              LDR      r0,[r0,#0]  ; Nk
000132  1a10              SUBS     r0,r2,r0
000134  2100              MOVS     r1,#0
000136  eb010080          ADD      r0,r1,r0,LSL #2
00013a  4921              LDR      r1,|L12.448|
00013c  5c08              LDRB     r0,[r1,r0]
00013e  f89d1000          LDRB     r1,[sp,#0]
000142  4048              EORS     r0,r0,r1
000144  2100              MOVS     r1,#0
000146  eb010182          ADD      r1,r1,r2,LSL #2
00014a  4d1d              LDR      r5,|L12.448|
00014c  5468              STRB     r0,[r5,r1]
;;;162            RoundKey[i*4+1] = RoundKey[(i-Nk)*4+1] ^ temp[1];
00014e  481d              LDR      r0,|L12.452|
000150  6800              LDR      r0,[r0,#0]  ; Nk
000152  1a10              SUBS     r0,r2,r0
000154  2101              MOVS     r1,#1
000156  eb010080          ADD      r0,r1,r0,LSL #2
00015a  4629              MOV      r1,r5
00015c  5c08              LDRB     r0,[r1,r0]
00015e  f89d1001          LDRB     r1,[sp,#1]
000162  4048              EORS     r0,r0,r1
000164  2101              MOVS     r1,#1
000166  eb010182          ADD      r1,r1,r2,LSL #2
00016a  5468              STRB     r0,[r5,r1]
;;;163            RoundKey[i*4+2] = RoundKey[(i-Nk)*4+2] ^ temp[2];
00016c  4815              LDR      r0,|L12.452|
00016e  6800              LDR      r0,[r0,#0]  ; Nk
000170  1a10              SUBS     r0,r2,r0
000172  2102              MOVS     r1,#2
000174  eb010080          ADD      r0,r1,r0,LSL #2
000178  4629              MOV      r1,r5
00017a  5c08              LDRB     r0,[r1,r0]
00017c  f89d1002          LDRB     r1,[sp,#2]
000180  4048              EORS     r0,r0,r1
000182  2102              MOVS     r1,#2
000184  eb010182          ADD      r1,r1,r2,LSL #2
000188  5468              STRB     r0,[r5,r1]
;;;164            RoundKey[i*4+3] = RoundKey[(i-Nk)*4+3] ^ temp[3];
00018a  480e              LDR      r0,|L12.452|
00018c  6800              LDR      r0,[r0,#0]  ; Nk
00018e  1a10              SUBS     r0,r2,r0
000190  2103              MOVS     r1,#3
000192  eb010080          ADD      r0,r1,r0,LSL #2
000196  4629              MOV      r1,r5
000198  5c08              LDRB     r0,[r1,r0]
00019a  f89d1003          LDRB     r1,[sp,#3]
00019e  4048              EORS     r0,r0,r1
0001a0  2103              MOVS     r1,#3
0001a2  eb010182          ADD      r1,r1,r2,LSL #2
0001a6  5468              STRB     r0,[r5,r1]
;;;165            i++;
0001a8  1c52              ADDS     r2,r2,#1
                  |L12.426|
0001aa  4808              LDR      r0,|L12.460|
0001ac  6800              LDR      r0,[r0,#0]            ;123  ; Nr
0001ae  1c40              ADDS     r0,r0,#1              ;123
0001b0  0080              LSLS     r0,r0,#2              ;123
0001b2  4290              CMP      r0,r2                 ;123
0001b4  f73faf4f          BGT      |L12.86|
;;;166        }
;;;167    }
0001b8  bd38              POP      {r3-r5,pc}
;;;168    
                          ENDP

0001ba  0000              DCW      0x0000
                  |L12.444|
                          DCD      Key
                  |L12.448|
                          DCD      RoundKey
                  |L12.452|
                          DCD      ||Nk||
                  |L12.456|
                          DCD      Rcon
                  |L12.460|
                          DCD      ||Nr||

                          AREA ||i.MixColumns||, CODE, READONLY, ALIGN=2

                  MixColumns PROC
;;;352    // MixColumns function mixes the columns of the state matrix
;;;353    void MixColumns()
000000  b530              PUSH     {r4,r5,lr}
;;;354    {
;;;355        int i;
;;;356        unsigned char Tmp,Tm,t;
;;;357        for(i=0;i<4;i++)
000002  2000              MOVS     r0,#0
000004  e068              B        |L13.216|
                  |L13.6|
;;;358        {    
;;;359            t=state[0][i];
000006  4c36              LDR      r4,|L13.224|
000008  5c23              LDRB     r3,[r4,r0]
;;;360            Tmp = state[0][i] ^ state[1][i] ^ state[2][i] ^ state[3][i] ;
00000a  5c24              LDRB     r4,[r4,r0]
00000c  4d34              LDR      r5,|L13.224|
00000e  1d2d              ADDS     r5,r5,#4
000010  5c2d              LDRB     r5,[r5,r0]
000012  406c              EORS     r4,r4,r5
000014  4d32              LDR      r5,|L13.224|
000016  3508              ADDS     r5,r5,#8
000018  5c2d              LDRB     r5,[r5,r0]
00001a  406c              EORS     r4,r4,r5
00001c  4d30              LDR      r5,|L13.224|
00001e  350c              ADDS     r5,r5,#0xc
000020  5c2d              LDRB     r5,[r5,r0]
000022  ea840205          EOR      r2,r4,r5
;;;361            Tm = state[0][i] ^ state[1][i] ; Tm = xtime(Tm); state[0][i] ^= Tm ^ Tmp ;
000026  4c2e              LDR      r4,|L13.224|
000028  5c25              LDRB     r5,[r4,r0]
00002a  1d24              ADDS     r4,r4,#4
00002c  5c24              LDRB     r4,[r4,r0]
00002e  ea850104          EOR      r1,r5,r4
000032  09cc              LSRS     r4,r1,#7
000034  eb0404c4          ADD      r4,r4,r4,LSL #3
000038  eb040444          ADD      r4,r4,r4,LSL #1
00003c  ea840441          EOR      r4,r4,r1,LSL #1
000040  b2e1              UXTB     r1,r4
000042  4c27              LDR      r4,|L13.224|
000044  5c24              LDRB     r4,[r4,r0]
000046  ea810502          EOR      r5,r1,r2
00004a  406c              EORS     r4,r4,r5
00004c  4d24              LDR      r5,|L13.224|
00004e  542c              STRB     r4,[r5,r0]
;;;362            Tm = state[1][i] ^ state[2][i] ; Tm = xtime(Tm); state[1][i] ^= Tm ^ Tmp ;
000050  1d2c              ADDS     r4,r5,#4
000052  5c24              LDRB     r4,[r4,r0]
000054  3508              ADDS     r5,r5,#8
000056  5c2d              LDRB     r5,[r5,r0]
000058  ea840105          EOR      r1,r4,r5
00005c  09cc              LSRS     r4,r1,#7
00005e  eb0404c4          ADD      r4,r4,r4,LSL #3
000062  eb040444          ADD      r4,r4,r4,LSL #1
000066  ea840441          EOR      r4,r4,r1,LSL #1
00006a  b2e1              UXTB     r1,r4
00006c  4c1c              LDR      r4,|L13.224|
00006e  1d24              ADDS     r4,r4,#4
000070  5c24              LDRB     r4,[r4,r0]
000072  ea810502          EOR      r5,r1,r2
000076  4065              EORS     r5,r5,r4
000078  4c19              LDR      r4,|L13.224|
00007a  1d24              ADDS     r4,r4,#4
00007c  5425              STRB     r5,[r4,r0]
;;;363            Tm = state[2][i] ^ state[3][i] ; Tm = xtime(Tm); state[2][i] ^= Tm ^ Tmp ;
00007e  1d24              ADDS     r4,r4,#4
000080  5c24              LDRB     r4,[r4,r0]
000082  4d17              LDR      r5,|L13.224|
000084  350c              ADDS     r5,r5,#0xc
000086  5c2d              LDRB     r5,[r5,r0]
000088  ea840105          EOR      r1,r4,r5
00008c  09cc              LSRS     r4,r1,#7
00008e  eb0404c4          ADD      r4,r4,r4,LSL #3
000092  eb040444          ADD      r4,r4,r4,LSL #1
000096  ea840441          EOR      r4,r4,r1,LSL #1
00009a  b2e1              UXTB     r1,r4
00009c  4c10              LDR      r4,|L13.224|
00009e  3408              ADDS     r4,r4,#8
0000a0  5c24              LDRB     r4,[r4,r0]
0000a2  ea810502          EOR      r5,r1,r2
0000a6  406c              EORS     r4,r4,r5
0000a8  4d0d              LDR      r5,|L13.224|
0000aa  3508              ADDS     r5,r5,#8
0000ac  542c              STRB     r4,[r5,r0]
;;;364            Tm = state[3][i] ^ t ; Tm = xtime(Tm); state[3][i] ^= Tm ^ Tmp ;
0000ae  1d2c              ADDS     r4,r5,#4
0000b0  5c24              LDRB     r4,[r4,r0]
0000b2  ea840103          EOR      r1,r4,r3
0000b6  09cc              LSRS     r4,r1,#7
0000b8  eb0404c4          ADD      r4,r4,r4,LSL #3
0000bc  eb040444          ADD      r4,r4,r4,LSL #1
0000c0  ea840441          EOR      r4,r4,r1,LSL #1
0000c4  b2e1              UXTB     r1,r4
0000c6  1d2c              ADDS     r4,r5,#4
0000c8  5c24              LDRB     r4,[r4,r0]
0000ca  ea810502          EOR      r5,r1,r2
0000ce  406c              EORS     r4,r4,r5
0000d0  4d03              LDR      r5,|L13.224|
0000d2  350c              ADDS     r5,r5,#0xc
0000d4  542c              STRB     r4,[r5,r0]
0000d6  1c40              ADDS     r0,r0,#1              ;357
                  |L13.216|
0000d8  2804              CMP      r0,#4                 ;357
0000da  db94              BLT      |L13.6|
;;;365        }
;;;366    }
0000dc  bd30              POP      {r4,r5,pc}
;;;367    
                          ENDP

0000de  0000              DCW      0x0000
                  |L13.224|
                          DCD      state

                          AREA ||i.ShiftRows||, CODE, READONLY, ALIGN=2

                  ShiftRows PROC
;;;320    // Offset = Row number. So the first row is not shifted.
;;;321    void ShiftRows()
000000  490f              LDR      r1,|L14.64|
;;;322    {
;;;323        unsigned char temp;
;;;324    
;;;325        // Rotate first row 1 columns to left    
;;;326        temp=state[1][0];
000002  7908              LDRB     r0,[r1,#4]  ; state
;;;327        state[1][0]=state[1][1];
000004  7949              LDRB     r1,[r1,#5]
000006  4a0e              LDR      r2,|L14.64|
000008  7111              STRB     r1,[r2,#4]
;;;328        state[1][1]=state[1][2];
00000a  4611              MOV      r1,r2
00000c  798a              LDRB     r2,[r1,#6]
00000e  714a              STRB     r2,[r1,#5]
;;;329        state[1][2]=state[1][3];
000010  79ca              LDRB     r2,[r1,#7]
000012  718a              STRB     r2,[r1,#6]
;;;330        state[1][3]=temp;
000014  71c8              STRB     r0,[r1,#7]
;;;331    
;;;332        // Rotate second row 2 columns to left    
;;;333        temp=state[2][0];
000016  7a08              LDRB     r0,[r1,#8]  ; state
;;;334        state[2][0]=state[2][2];
000018  7a89              LDRB     r1,[r1,#0xa]
00001a  4a09              LDR      r2,|L14.64|
00001c  7211              STRB     r1,[r2,#8]
;;;335        state[2][2]=temp;
00001e  4611              MOV      r1,r2
000020  7288              STRB     r0,[r1,#0xa]
;;;336    
;;;337        temp=state[2][1];
000022  7a48              LDRB     r0,[r1,#9]
;;;338        state[2][1]=state[2][3];
000024  7aca              LDRB     r2,[r1,#0xb]
000026  724a              STRB     r2,[r1,#9]
;;;339        state[2][3]=temp;
000028  72c8              STRB     r0,[r1,#0xb]
;;;340    
;;;341        // Rotate third row 3 columns to left
;;;342        temp=state[3][0];
00002a  7b08              LDRB     r0,[r1,#0xc]  ; state
;;;343        state[3][0]=state[3][3];
00002c  7bc9              LDRB     r1,[r1,#0xf]
00002e  4a04              LDR      r2,|L14.64|
000030  7311              STRB     r1,[r2,#0xc]
;;;344        state[3][3]=state[3][2];
000032  4611              MOV      r1,r2
000034  7b8a              LDRB     r2,[r1,#0xe]
000036  73ca              STRB     r2,[r1,#0xf]
;;;345        state[3][2]=state[3][1];
000038  7b4a              LDRB     r2,[r1,#0xd]
00003a  738a              STRB     r2,[r1,#0xe]
;;;346        state[3][1]=temp;
00003c  7348              STRB     r0,[r1,#0xd]
;;;347    }
00003e  4770              BX       lr
;;;348    
                          ENDP

                  |L14.64|
                          DCD      state

                          AREA ||i.SubBytes||, CODE, READONLY, ALIGN=2

                  SubBytes PROC
;;;304    // state matrix with values in an S-box.
;;;305    void SubBytes()
000000  b500              PUSH     {lr}
;;;306    {
;;;307        int i,j;
;;;308        for(i=0;i<4;i++)
000002  2200              MOVS     r2,#0
000004  e00f              B        |L15.38|
                  |L15.6|
;;;309        {
;;;310            for(j=0;j<4;j++)
000006  2300              MOVS     r3,#0
000008  e00a              B        |L15.32|
                  |L15.10|
;;;311            {
;;;312                state[i][j] = getSBoxValue(state[i][j]);
00000a  4908              LDR      r1,|L15.44|
00000c  eb010182          ADD      r1,r1,r2,LSL #2
000010  5cc8              LDRB     r0,[r1,r3]
000012  f7fffffe          BL       getSBoxValue
000016  4905              LDR      r1,|L15.44|
000018  eb010182          ADD      r1,r1,r2,LSL #2
00001c  54c8              STRB     r0,[r1,r3]
00001e  1c5b              ADDS     r3,r3,#1              ;310
                  |L15.32|
000020  2b04              CMP      r3,#4                 ;310
000022  dbf2              BLT      |L15.10|
000024  1c52              ADDS     r2,r2,#1              ;308
                  |L15.38|
000026  2a04              CMP      r2,#4                 ;308
000028  dbed              BLT      |L15.6|
;;;313    
;;;314            }
;;;315        }
;;;316    }
00002a  bd00              POP      {pc}
;;;317    
                          ENDP

                  |L15.44|
                          DCD      state

                          AREA ||i.decrypt||, CODE, READONLY, ALIGN=2

                  decrypt PROC
;;;446    
;;;447    char *decrypt(char *str, char *key , int len) 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;448    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
;;;449        int i,j,Nl;
;;;450    		char *newstr;
;;;451    
;;;452        Nk = Nc / 32;
00000a  4925              LDR      r1,|L16.160|
00000c  6808              LDR      r0,[r1,#0]  ; Nc
00000e  17c1              ASRS     r1,r0,#31
000010  eb0061d1          ADD      r1,r0,r1,LSR #27
000014  1149              ASRS     r1,r1,#5
000016  4a23              LDR      r2,|L16.164|
000018  6011              STR      r1,[r2,#0]  ; Nk
;;;453        Nr = Nk + 6;
00001a  4610              MOV      r0,r2
00001c  6800              LDR      r0,[r0,#0]  ; Nk
00001e  1d80              ADDS     r0,r0,#6
000020  4921              LDR      r1,|L16.168|
000022  6008              STR      r0,[r1,#0]  ; Nr
;;;454        
;;;455        //len= strlen(str);
;;;456        Nl = (int)ceil(len / 16);
000024  46b3              MOV      r11,r6
000026  17f1              ASRS     r1,r6,#31
000028  eb067111          ADD      r1,r6,r1,LSR #28
00002c  1108              ASRS     r0,r1,#4
00002e  f7fffffe          BL       __aeabi_i2d
000032  e9cd0100          STRD     r0,r1,[sp,#0]
000036  f7fffffe          BL       ceil
00003a  e9cd0102          STRD     r0,r1,[sp,#8]
00003e  f7fffffe          BL       __aeabi_d2iz
000042  4607              MOV      r7,r0
;;;457         
;;;458        newstr = (char *)malloc(16*Nl);
000044  0138              LSLS     r0,r7,#4
000046  f7fffffe          BL       malloc
00004a  4682              MOV      r10,r0
;;;459        //memset(newstr,0,sizeof(newstr));
;;;460        memset(newstr,0,16*Nl);
00004c  0139              LSLS     r1,r7,#4
00004e  4650              MOV      r0,r10
000050  f7fffffe          BL       __aeabi_memclr
;;;461    	
;;;462        for(i=0;i<Nl;i++)
000054  2500              MOVS     r5,#0
000056  e01d              B        |L16.148|
                  |L16.88|
;;;463        {
;;;464            for(j=0;j<Nk*4;j++)
000058  2400              MOVS     r4,#0
00005a  e00a              B        |L16.114|
                  |L16.92|
;;;465            {
;;;466                Key[j]=key[j];
00005c  f8190004          LDRB     r0,[r9,r4]
000060  4912              LDR      r1,|L16.172|
000062  5508              STRB     r0,[r1,r4]
;;;467                in[j]=str[i*16+j];
000064  eb041005          ADD      r0,r4,r5,LSL #4
000068  f8180000          LDRB     r0,[r8,r0]
00006c  4910              LDR      r1,|L16.176|
00006e  5508              STRB     r0,[r1,r4]
000070  1c64              ADDS     r4,r4,#1              ;464
                  |L16.114|
000072  480c              LDR      r0,|L16.164|
000074  6800              LDR      r0,[r0,#0]            ;464  ; Nk
000076  ebb40f80          CMP      r4,r0,LSL #2          ;464
00007a  dbef              BLT      |L16.92|
;;;468            }
;;;469            
;;;470            KeyExpansion();
00007c  f7fffffe          BL       KeyExpansion
;;;471            InvCipher();
000080  f7fffffe          BL       InvCipher
;;;472    				memcpy(newstr+16*i, out, 16);
000084  2110              MOVS     r1,#0x10
000086  fb01a005          MLA      r0,r1,r5,r10
00008a  460a              MOV      r2,r1
00008c  4909              LDR      r1,|L16.180|
00008e  f7fffffe          BL       __aeabi_memcpy
000092  1c6d              ADDS     r5,r5,#1              ;462
                  |L16.148|
000094  42bd              CMP      r5,r7                 ;462
000096  dbdf              BLT      |L16.88|
;;;473            //strcat(newstr,out);
;;;474        }
;;;475        return newstr;
000098  4650              MOV      r0,r10
;;;476    }
00009a  b004              ADD      sp,sp,#0x10
00009c  e8bd9ff0          POP      {r4-r12,pc}
;;;477    //////////////////////////////////////////////////////////////////////////////////////////
                          ENDP

                  |L16.160|
                          DCD      ||Nc||
                  |L16.164|
                          DCD      ||Nk||
                  |L16.168|
                          DCD      ||Nr||
                  |L16.172|
                          DCD      Key
                  |L16.176|
                          DCD      ||in||
                  |L16.180|
                          DCD      out

                          AREA ||i.encrypt||, CODE, READONLY, ALIGN=2

                  encrypt PROC
;;;412    
;;;413    char *encrypt(char *str, char *key) 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;414    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
;;;415        int i,j,Nl;
;;;416    		int len;
;;;417    		char *newstr;
;;;418    
;;;419        Nk = Nc / 32;
000008  4927              LDR      r1,|L17.168|
00000a  6808              LDR      r0,[r1,#0]  ; Nc
00000c  17c1              ASRS     r1,r0,#31
00000e  eb0061d1          ADD      r1,r0,r1,LSR #27
000012  1149              ASRS     r1,r1,#5
000014  4a25              LDR      r2,|L17.172|
000016  6011              STR      r1,[r2,#0]  ; Nk
;;;420        Nr = Nk + 6;
000018  4610              MOV      r0,r2
00001a  6800              LDR      r0,[r0,#0]  ; Nk
00001c  1d80              ADDS     r0,r0,#6
00001e  4924              LDR      r1,|L17.176|
000020  6008              STR      r0,[r1,#0]  ; Nr
;;;421        
;;;422        len= strlen(str);
000022  4640              MOV      r0,r8
000024  f7fffffe          BL       strlen
000028  4607              MOV      r7,r0
;;;423        Nl = (int)ceil(len / 16);      
00002a  46bb              MOV      r11,r7
00002c  17f9              ASRS     r1,r7,#31
00002e  eb077111          ADD      r1,r7,r1,LSR #28
000032  1108              ASRS     r0,r1,#4
000034  f7fffffe          BL       __aeabi_i2d
000038  e9cd0100          STRD     r0,r1,[sp,#0]
00003c  f7fffffe          BL       ceil
000040  e9cd0102          STRD     r0,r1,[sp,#8]
000044  f7fffffe          BL       __aeabi_d2iz
000048  4606              MOV      r6,r0
;;;424      
;;;425        newstr = (char *)malloc(Nl*32);
00004a  0170              LSLS     r0,r6,#5
00004c  f7fffffe          BL       malloc
000050  4682              MOV      r10,r0
;;;426    
;;;427        //memset(newstr,0,sizeof(newstr));
;;;428        memset(newstr,0,Nl*32);
000052  0171              LSLS     r1,r6,#5
000054  4650              MOV      r0,r10
000056  f7fffffe          BL       __aeabi_memclr
;;;429     
;;;430        for(i=0;i<Nl;i++)
00005a  2500              MOVS     r5,#0
00005c  e01d              B        |L17.154|
                  |L17.94|
;;;431        {
;;;432            for(j=0;j<Nk*4;j++)
00005e  2400              MOVS     r4,#0
000060  e00a              B        |L17.120|
                  |L17.98|
;;;433            {
;;;434                Key[j]=key[j];
000062  f8190004          LDRB     r0,[r9,r4]
000066  4913              LDR      r1,|L17.180|
000068  5508              STRB     r0,[r1,r4]
;;;435                in[j]=str[i*16+j];
00006a  eb041005          ADD      r0,r4,r5,LSL #4
00006e  f8180000          LDRB     r0,[r8,r0]
000072  4911              LDR      r1,|L17.184|
000074  5508              STRB     r0,[r1,r4]
000076  1c64              ADDS     r4,r4,#1              ;432
                  |L17.120|
000078  480c              LDR      r0,|L17.172|
00007a  6800              LDR      r0,[r0,#0]            ;432  ; Nk
00007c  ebb40f80          CMP      r4,r0,LSL #2          ;432
000080  dbef              BLT      |L17.98|
;;;436            }
;;;437            
;;;438            KeyExpansion();
000082  f7fffffe          BL       KeyExpansion
;;;439            Cipher();
000086  f7fffffe          BL       Cipher
;;;440    				memcpy(newstr+16*i, out, 16);
00008a  2110              MOVS     r1,#0x10
00008c  fb01a005          MLA      r0,r1,r5,r10
000090  460a              MOV      r2,r1
000092  490a              LDR      r1,|L17.188|
000094  f7fffffe          BL       __aeabi_memcpy
000098  1c6d              ADDS     r5,r5,#1              ;430
                  |L17.154|
00009a  42b5              CMP      r5,r6                 ;430
00009c  dbdf              BLT      |L17.94|
;;;441            //strcat(newstr,out);
;;;442        }
;;;443        return newstr;
00009e  4650              MOV      r0,r10
;;;444    }
0000a0  b004              ADD      sp,sp,#0x10
0000a2  e8bd9ff0          POP      {r4-r12,pc}
;;;445    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L17.168|
                          DCD      ||Nc||
                  |L17.172|
                          DCD      ||Nk||
                  |L17.176|
                          DCD      ||Nr||
                  |L17.180|
                          DCD      Key
                  |L17.184|
                          DCD      ||in||
                  |L17.188|
                          DCD      out

                          AREA ||i.getSBoxInvert||, CODE, READONLY, ALIGN=2

                  getSBoxInvert PROC
;;;58     , 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
;;;59     uint8_t getSBoxInvert(uint8_t num)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return rsbox[num];
000002  4801              LDR      r0,|L18.8|
000004  5c40              LDRB     r0,[r0,r1]
;;;62     }
000006  4770              BX       lr
;;;63     const uint8_t sbox[256] =   {
                          ENDP

                  |L18.8|
                          DCD      rsbox

                          AREA ||i.getSBoxValue||, CODE, READONLY, ALIGN=2

                  getSBoxValue PROC
;;;80         0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
;;;81     uint8_t getSBoxValue(uint8_t num)
000000  4601              MOV      r1,r0
;;;82     {
;;;83         return sbox[num];
000002  4801              LDR      r0,|L19.8|
000004  5c40              LDRB     r0,[r0,r1]
;;;84     }
000006  4770              BX       lr
;;;85     
                          ENDP

                  |L19.8|
                          DCD      sbox

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ||in||
                          %        16
                  out
                          %        32
                  state
                          %        16
                  RoundKey
                          %        300
                  Key
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  rsbox
000000  52096ad5          DCB      0x52,0x09,0x6a,0xd5
000004  3036a538          DCB      0x30,0x36,0xa5,0x38
000008  bf40a39e          DCB      0xbf,0x40,0xa3,0x9e
00000c  81f3d7fb          DCB      0x81,0xf3,0xd7,0xfb
000010  7ce33982          DCB      0x7c,0xe3,0x39,0x82
000014  9b2fff87          DCB      0x9b,0x2f,0xff,0x87
000018  348e4344          DCB      0x34,0x8e,0x43,0x44
00001c  c4dee9cb          DCB      0xc4,0xde,0xe9,0xcb
000020  547b9432          DCB      0x54,0x7b,0x94,0x32
000024  a6c2233d          DCB      0xa6,0xc2,0x23,0x3d
000028  ee4c950b          DCB      0xee,0x4c,0x95,0x0b
00002c  42fac34e          DCB      0x42,0xfa,0xc3,0x4e
000030  082ea166          DCB      0x08,0x2e,0xa1,0x66
000034  28d924b2          DCB      0x28,0xd9,0x24,0xb2
000038  765ba249          DCB      0x76,0x5b,0xa2,0x49
00003c  6d8bd125          DCB      0x6d,0x8b,0xd1,0x25
000040  72f8f664          DCB      0x72,0xf8,0xf6,0x64
000044  86689816          DCB      0x86,0x68,0x98,0x16
000048  d4a45ccc          DCB      0xd4,0xa4,0x5c,0xcc
00004c  5d65b692          DCB      0x5d,0x65,0xb6,0x92
000050  6c704850          DCB      0x6c,0x70,0x48,0x50
000054  fdedb9da          DCB      0xfd,0xed,0xb9,0xda
000058  5e154657          DCB      0x5e,0x15,0x46,0x57
00005c  a78d9d84          DCB      0xa7,0x8d,0x9d,0x84
000060  90d8ab00          DCB      0x90,0xd8,0xab,0x00
000064  8cbcd30a          DCB      0x8c,0xbc,0xd3,0x0a
000068  f7e45805          DCB      0xf7,0xe4,0x58,0x05
00006c  b8b34506          DCB      0xb8,0xb3,0x45,0x06
000070  d02c1e8f          DCB      0xd0,0x2c,0x1e,0x8f
000074  ca3f0f02          DCB      0xca,0x3f,0x0f,0x02
000078  c1afbd03          DCB      0xc1,0xaf,0xbd,0x03
00007c  01138a6b          DCB      0x01,0x13,0x8a,0x6b
000080  3a911141          DCB      0x3a,0x91,0x11,0x41
000084  4f67dcea          DCB      0x4f,0x67,0xdc,0xea
000088  97f2cfce          DCB      0x97,0xf2,0xcf,0xce
00008c  f0b4e673          DCB      0xf0,0xb4,0xe6,0x73
000090  96ac7422          DCB      0x96,0xac,0x74,0x22
000094  e7ad3585          DCB      0xe7,0xad,0x35,0x85
000098  e2f937e8          DCB      0xe2,0xf9,0x37,0xe8
00009c  1c75df6e          DCB      0x1c,0x75,0xdf,0x6e
0000a0  47f11a71          DCB      0x47,0xf1,0x1a,0x71
0000a4  1d29c589          DCB      0x1d,0x29,0xc5,0x89
0000a8  6fb7620e          DCB      0x6f,0xb7,0x62,0x0e
0000ac  aa18be1b          DCB      0xaa,0x18,0xbe,0x1b
0000b0  fc563e4b          DCB      0xfc,0x56,0x3e,0x4b
0000b4  c6d27920          DCB      0xc6,0xd2,0x79,0x20
0000b8  9adbc0fe          DCB      0x9a,0xdb,0xc0,0xfe
0000bc  78cd5af4          DCB      0x78,0xcd,0x5a,0xf4
0000c0  1fdda833          DCB      0x1f,0xdd,0xa8,0x33
0000c4  8807c731          DCB      0x88,0x07,0xc7,0x31
0000c8  b1121059          DCB      0xb1,0x12,0x10,0x59
0000cc  2780ec5f          DCB      0x27,0x80,0xec,0x5f
0000d0  60517fa9          DCB      0x60,0x51,0x7f,0xa9
0000d4  19b54a0d          DCB      0x19,0xb5,0x4a,0x0d
0000d8  2de57a9f          DCB      0x2d,0xe5,0x7a,0x9f
0000dc  93c99cef          DCB      0x93,0xc9,0x9c,0xef
0000e0  a0e03b4d          DCB      0xa0,0xe0,0x3b,0x4d
0000e4  ae2af5b0          DCB      0xae,0x2a,0xf5,0xb0
0000e8  c8ebbb3c          DCB      0xc8,0xeb,0xbb,0x3c
0000ec  83539961          DCB      0x83,0x53,0x99,0x61
0000f0  172b047e          DCB      0x17,0x2b,0x04,0x7e
0000f4  ba77d626          DCB      0xba,0x77,0xd6,0x26
0000f8  e1691463          DCB      0xe1,0x69,0x14,0x63
0000fc  55210c7d          DCB      0x55,0x21,0x0c,0x7d
                  sbox
000100  637c777b          DCB      0x63,0x7c,0x77,0x7b
000104  f26b6fc5          DCB      0xf2,0x6b,0x6f,0xc5
000108  3001672b          DCB      0x30,0x01,0x67,0x2b
00010c  fed7ab76          DCB      0xfe,0xd7,0xab,0x76
000110  ca82c97d          DCB      0xca,0x82,0xc9,0x7d
000114  fa5947f0          DCB      0xfa,0x59,0x47,0xf0
000118  add4a2af          DCB      0xad,0xd4,0xa2,0xaf
00011c  9ca472c0          DCB      0x9c,0xa4,0x72,0xc0
000120  b7fd9326          DCB      0xb7,0xfd,0x93,0x26
000124  363ff7cc          DCB      0x36,0x3f,0xf7,0xcc
000128  34a5e5f1          DCB      0x34,0xa5,0xe5,0xf1
00012c  71d83115          DCB      0x71,0xd8,0x31,0x15
000130  04c723c3          DCB      0x04,0xc7,0x23,0xc3
000134  1896059a          DCB      0x18,0x96,0x05,0x9a
000138  071280e2          DCB      0x07,0x12,0x80,0xe2
00013c  eb27b275          DCB      0xeb,0x27,0xb2,0x75
000140  09832c1a          DCB      0x09,0x83,0x2c,0x1a
000144  1b6e5aa0          DCB      0x1b,0x6e,0x5a,0xa0
000148  523bd6b3          DCB      0x52,0x3b,0xd6,0xb3
00014c  29e32f84          DCB      0x29,0xe3,0x2f,0x84
000150  53d100ed          DCB      0x53,0xd1,0x00,0xed
000154  20fcb15b          DCB      0x20,0xfc,0xb1,0x5b
000158  6acbbe39          DCB      0x6a,0xcb,0xbe,0x39
00015c  4a4c58cf          DCB      0x4a,0x4c,0x58,0xcf
000160  d0efaafb          DCB      0xd0,0xef,0xaa,0xfb
000164  434d3385          DCB      0x43,0x4d,0x33,0x85
000168  45f9027f          DCB      0x45,0xf9,0x02,0x7f
00016c  503c9fa8          DCB      0x50,0x3c,0x9f,0xa8
000170  51a3408f          DCB      0x51,0xa3,0x40,0x8f
000174  929d38f5          DCB      0x92,0x9d,0x38,0xf5
000178  bcb6da21          DCB      0xbc,0xb6,0xda,0x21
00017c  10fff3d2          DCB      0x10,0xff,0xf3,0xd2
000180  cd0c13ec          DCB      0xcd,0x0c,0x13,0xec
000184  5f974417          DCB      0x5f,0x97,0x44,0x17
000188  c4a77e3d          DCB      0xc4,0xa7,0x7e,0x3d
00018c  645d1973          DCB      0x64,0x5d,0x19,0x73
000190  60814fdc          DCB      0x60,0x81,0x4f,0xdc
000194  222a9088          DCB      0x22,0x2a,0x90,0x88
000198  46eeb814          DCB      0x46,0xee,0xb8,0x14
00019c  de5e0bdb          DCB      0xde,0x5e,0x0b,0xdb
0001a0  e0323a0a          DCB      0xe0,0x32,0x3a,0x0a
0001a4  4906245c          DCB      0x49,0x06,0x24,0x5c
0001a8  c2d3ac62          DCB      0xc2,0xd3,0xac,0x62
0001ac  9195e479          DCB      0x91,0x95,0xe4,0x79
0001b0  e7c8376d          DCB      0xe7,0xc8,0x37,0x6d
0001b4  8dd54ea9          DCB      0x8d,0xd5,0x4e,0xa9
0001b8  6c56f4ea          DCB      0x6c,0x56,0xf4,0xea
0001bc  657aae08          DCB      0x65,0x7a,0xae,0x08
0001c0  ba78252e          DCB      0xba,0x78,0x25,0x2e
0001c4  1ca6b4c6          DCB      0x1c,0xa6,0xb4,0xc6
0001c8  e8dd741f          DCB      0xe8,0xdd,0x74,0x1f
0001cc  4bbd8b8a          DCB      0x4b,0xbd,0x8b,0x8a
0001d0  703eb566          DCB      0x70,0x3e,0xb5,0x66
0001d4  4803f60e          DCB      0x48,0x03,0xf6,0x0e
0001d8  613557b9          DCB      0x61,0x35,0x57,0xb9
0001dc  86c11d9e          DCB      0x86,0xc1,0x1d,0x9e
0001e0  e1f89811          DCB      0xe1,0xf8,0x98,0x11
0001e4  69d98e94          DCB      0x69,0xd9,0x8e,0x94
0001e8  9b1e87e9          DCB      0x9b,0x1e,0x87,0xe9
0001ec  ce5528df          DCB      0xce,0x55,0x28,0xdf
0001f0  8ca1890d          DCB      0x8c,0xa1,0x89,0x0d
0001f4  bfe64268          DCB      0xbf,0xe6,0x42,0x68
0001f8  41992d0f          DCB      0x41,0x99,0x2d,0x0f
0001fc  b054bb16          DCB      0xb0,0x54,0xbb,0x16
                  Rcon
000200  8d010204          DCB      0x8d,0x01,0x02,0x04
000204  08102040          DCB      0x08,0x10,0x20,0x40
000208  801b366c          DCB      0x80,0x1b,0x36,0x6c
00020c  d8ab4d9a          DCB      0xd8,0xab,0x4d,0x9a
000210  2f5ebc63          DCB      0x2f,0x5e,0xbc,0x63
000214  c697356a          DCB      0xc6,0x97,0x35,0x6a
000218  d4b37dfa          DCB      0xd4,0xb3,0x7d,0xfa
00021c  efc59139          DCB      0xef,0xc5,0x91,0x39
000220  72e4d3bd          DCB      0x72,0xe4,0xd3,0xbd
000224  61c29f25          DCB      0x61,0xc2,0x9f,0x25
000228  4a943366          DCB      0x4a,0x94,0x33,0x66
00022c  cc831d3a          DCB      0xcc,0x83,0x1d,0x3a
000230  74e8cb8d          DCB      0x74,0xe8,0xcb,0x8d
000234  01020408          DCB      0x01,0x02,0x04,0x08
000238  10204080          DCB      0x10,0x20,0x40,0x80
00023c  1b366cd8          DCB      0x1b,0x36,0x6c,0xd8
000240  ab4d9a2f          DCB      0xab,0x4d,0x9a,0x2f
000244  5ebc63c6          DCB      0x5e,0xbc,0x63,0xc6
000248  97356ad4          DCB      0x97,0x35,0x6a,0xd4
00024c  b37dfaef          DCB      0xb3,0x7d,0xfa,0xef
000250  c5913972          DCB      0xc5,0x91,0x39,0x72
000254  e4d3bd61          DCB      0xe4,0xd3,0xbd,0x61
000258  c29f254a          DCB      0xc2,0x9f,0x25,0x4a
00025c  943366cc          DCB      0x94,0x33,0x66,0xcc
000260  831d3a74          DCB      0x83,0x1d,0x3a,0x74
000264  e8cb8d01          DCB      0xe8,0xcb,0x8d,0x01
000268  02040810          DCB      0x02,0x04,0x08,0x10
00026c  2040801b          DCB      0x20,0x40,0x80,0x1b
000270  366cd8ab          DCB      0x36,0x6c,0xd8,0xab
000274  4d9a2f5e          DCB      0x4d,0x9a,0x2f,0x5e
000278  bc63c697          DCB      0xbc,0x63,0xc6,0x97
00027c  356ad4b3          DCB      0x35,0x6a,0xd4,0xb3
000280  7dfaefc5          DCB      0x7d,0xfa,0xef,0xc5
000284  913972e4          DCB      0x91,0x39,0x72,0xe4
000288  d3bd61c2          DCB      0xd3,0xbd,0x61,0xc2
00028c  9f254a94          DCB      0x9f,0x25,0x4a,0x94
000290  3366cc83          DCB      0x33,0x66,0xcc,0x83
000294  1d3a74e8          DCB      0x1d,0x3a,0x74,0xe8
000298  cb8d0102          DCB      0xcb,0x8d,0x01,0x02
00029c  04081020          DCB      0x04,0x08,0x10,0x20
0002a0  40801b36          DCB      0x40,0x80,0x1b,0x36
0002a4  6cd8ab4d          DCB      0x6c,0xd8,0xab,0x4d
0002a8  9a2f5ebc          DCB      0x9a,0x2f,0x5e,0xbc
0002ac  63c69735          DCB      0x63,0xc6,0x97,0x35
0002b0  6ad4b37d          DCB      0x6a,0xd4,0xb3,0x7d
0002b4  faefc591          DCB      0xfa,0xef,0xc5,0x91
0002b8  3972e4d3          DCB      0x39,0x72,0xe4,0xd3
0002bc  bd61c29f          DCB      0xbd,0x61,0xc2,0x9f
0002c0  254a9433          DCB      0x25,0x4a,0x94,0x33
0002c4  66cc831d          DCB      0x66,0xcc,0x83,0x1d
0002c8  3a74e8cb          DCB      0x3a,0x74,0xe8,0xcb
0002cc  8d010204          DCB      0x8d,0x01,0x02,0x04
0002d0  08102040          DCB      0x08,0x10,0x20,0x40
0002d4  801b366c          DCB      0x80,0x1b,0x36,0x6c
0002d8  d8ab4d9a          DCB      0xd8,0xab,0x4d,0x9a
0002dc  2f5ebc63          DCB      0x2f,0x5e,0xbc,0x63
0002e0  c697356a          DCB      0xc6,0x97,0x35,0x6a
0002e4  d4b37dfa          DCB      0xd4,0xb3,0x7d,0xfa
0002e8  efc59139          DCB      0xef,0xc5,0x91,0x39
0002ec  72e4d3bd          DCB      0x72,0xe4,0xd3,0xbd
0002f0  61c29f25          DCB      0x61,0xc2,0x9f,0x25
0002f4  4a943366          DCB      0x4a,0x94,0x33,0x66
0002f8  cc831d3a          DCB      0xcc,0x83,0x1d,0x3a
0002fc  74e8cb            DCB      0x74,0xe8,0xcb

                          AREA ||.data||, DATA, ALIGN=2

                  ||Nr||
                          DCD      0x00000000
                  ||Nk||
                          DCD      0x00000000
                  ||Nc||
                          DCD      0x00000080
                  |symbol_number.63|
00000c  41424344          DCB      0x41,0x42,0x43,0x44
000010  45464748          DCB      0x45,0x46,0x47,0x48
000014  494a4b4c          DCB      0x49,0x4a,0x4b,0x4c
000018  4d4e4f50          DCB      0x4d,0x4e,0x4f,0x50
00001c  51525354          DCB      0x51,0x52,0x53,0x54
000020  55565758          DCB      0x55,0x56,0x57,0x58
000024  595a6162          DCB      0x59,0x5a,0x61,0x62
000028  63646566          DCB      0x63,0x64,0x65,0x66
00002c  6768696a          DCB      0x67,0x68,0x69,0x6a
000030  6b6c6d6e          DCB      0x6b,0x6c,0x6d,0x6e
000034  6f707172          DCB      0x6f,0x70,0x71,0x72
000038  73747576          DCB      0x73,0x74,0x75,0x76
00003c  7778797a          DCB      0x77,0x78,0x79,0x7a
000040  30313233          DCB      0x30,0x31,0x32,0x33
000044  34353637          DCB      0x34,0x35,0x36,0x37
000048  38392b2f          DCB      0x38,0x39,0x2b,0x2f
00004c  00                DCB      0x00
