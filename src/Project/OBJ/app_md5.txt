; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\app_md5.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\app_md5.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\app_md5.crf ..\tplib\App_md5.c]
                          THUMB

                          AREA ||i.BCD2ASC||, CODE, READONLY, ALIGN=2

                  BCD2ASC PROC
;;;324       
;;;325    u32  BCD2ASC (u8 *asc, const u8 *bcd, u32 len)  
000000  b530              PUSH     {r4,r5,lr}
;;;326    {  
000002  4603              MOV      r3,r0
;;;327        u8 c = 0;  
000004  2400              MOVS     r4,#0
;;;328        u8 i;  
;;;329      
;;;330      
;;;331        for(i = 0; i < len; i++) {  
000006  2500              MOVS     r5,#0
000008  e00f              B        |L1.42|
                  |L1.10|
;;;332            //first BCD  
;;;333            c = *bcd >> 4;  
00000a  7808              LDRB     r0,[r1,#0]
00000c  1104              ASRS     r4,r0,#4
;;;334            *asc++ = bcd2ascii[c];  
00000e  4809              LDR      r0,|L1.52|
000010  5d00              LDRB     r0,[r0,r4]
000012  f8030b01          STRB     r0,[r3],#1
;;;335      
;;;336      
;;;337            //second  
;;;338            c = *bcd & 0x0f;  
000016  7808              LDRB     r0,[r1,#0]
000018  f000040f          AND      r4,r0,#0xf
;;;339            *asc++ = bcd2ascii[c];  
00001c  4805              LDR      r0,|L1.52|
00001e  5d00              LDRB     r0,[r0,r4]
000020  f8030b01          STRB     r0,[r3],#1
;;;340            bcd++;  
000024  1c49              ADDS     r1,r1,#1
000026  1c68              ADDS     r0,r5,#1              ;331
000028  b2c5              UXTB     r5,r0                 ;331
                  |L1.42|
00002a  4295              CMP      r5,r2                 ;331
00002c  d3ed              BCC      |L1.10|
;;;341        }  
;;;342      
;;;343      
;;;344        return 0;  
00002e  2000              MOVS     r0,#0
;;;345    } 
000030  bd30              POP      {r4,r5,pc}
;;;346    ////////////////////////////////////////////////////////////////////////////////   
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      bcd2ascii

                          AREA ||i.Decode||, CODE, READONLY, ALIGN=1

                  Decode PROC
;;;315    */   
;;;316    static void Decode(UINT4 *output, unsigned char *input,unsigned int len)   
000000  b570              PUSH     {r4-r6,lr}
;;;317    {   
000002  4603              MOV      r3,r0
;;;318    	unsigned int i, j;   
;;;319    	   
;;;320    	for(i = 0, j = 0; j < len; i++, j += 4)   
000004  2400              MOVS     r4,#0
000006  2000              MOVS     r0,#0
000008  e010              B        |L2.44|
                  |L2.10|
;;;321    	output[i] = ((UINT4)input[j]) | (((UINT4)input[j+1]) << 8) |   
00000a  5c0e              LDRB     r6,[r1,r0]
00000c  1c45              ADDS     r5,r0,#1
00000e  5d4d              LDRB     r5,[r1,r5]
000010  ea462605          ORR      r6,r6,r5,LSL #8
000014  1c85              ADDS     r5,r0,#2
000016  5d4d              LDRB     r5,[r1,r5]
000018  ea464605          ORR      r6,r6,r5,LSL #16
00001c  1cc5              ADDS     r5,r0,#3
00001e  5d4d              LDRB     r5,[r1,r5]
000020  ea466505          ORR      r5,r6,r5,LSL #24
000024  f8435024          STR      r5,[r3,r4,LSL #2]
000028  1c64              ADDS     r4,r4,#1              ;320
00002a  1d00              ADDS     r0,r0,#4              ;320
                  |L2.44|
00002c  4290              CMP      r0,r2                 ;320
00002e  d3ec              BCC      |L2.10|
;;;322    	(((UINT4)input[j+2]) << 16) | (((UINT4)input[j+3]) << 24);   
;;;323    }   
000030  bd70              POP      {r4-r6,pc}
;;;324       
                          ENDP


                          AREA ||i.Encode||, CODE, READONLY, ALIGN=1

                  Encode PROC
;;;295    */   
;;;296    static void Encode(unsigned char *output, UINT4 *input,unsigned int len)   
000000  b570              PUSH     {r4-r6,lr}
;;;297    {   
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;298    	unsigned int i, j;   
;;;299    	   
;;;300    	for(i = 0, j = 0; j < len; i++, j += 4) 
000006  2200              MOVS     r2,#0
000008  2000              MOVS     r0,#0
00000a  e015              B        |L3.56|
                  |L3.12|
;;;301    	{   
;;;302    		output[j] = (unsigned char)(input[i] & 0xff);   
00000c  f8115022          LDRB     r5,[r1,r2,LSL #2]
000010  541d              STRB     r5,[r3,r0]
;;;303    		output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);   
000012  f8315022          LDRH     r5,[r1,r2,LSL #2]
000016  f3c52607          UBFX     r6,r5,#8,#8
00001a  1c45              ADDS     r5,r0,#1
00001c  555e              STRB     r6,[r3,r5]
;;;304    		output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);   
00001e  f8515022          LDR      r5,[r1,r2,LSL #2]
000022  f3c54607          UBFX     r6,r5,#16,#8
000026  1c85              ADDS     r5,r0,#2
000028  555e              STRB     r6,[r3,r5]
;;;305    		output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);   
00002a  f8515022          LDR      r5,[r1,r2,LSL #2]
00002e  0e2d              LSRS     r5,r5,#24
000030  1cc6              ADDS     r6,r0,#3
000032  559d              STRB     r5,[r3,r6]
000034  1c52              ADDS     r2,r2,#1              ;300
000036  1d00              ADDS     r0,r0,#4              ;300
                  |L3.56|
000038  42a0              CMP      r0,r4                 ;300
00003a  d3e7              BCC      |L3.12|
;;;306    	}   
;;;307    }   
00003c  bd70              POP      {r4-r6,pc}
;;;308       
                          ENDP


                          AREA ||i.MD5Final||, CODE, READONLY, ALIGN=2

                  MD5Final PROC
;;;165    */   
;;;166    void MD5Final (unsigned char digest[16],MD5_CTX *context)   
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;167    {   
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;168    	unsigned char bits[8];   
;;;169    	unsigned int index, padLen;   
;;;170    	   
;;;171    	/* Save number of bits */   
;;;172    	/*将要被转换的信息(所有的)的bits长度拷贝到bits中*/   
;;;173    	Encode(bits, context->count, 8);   
000008  2208              MOVS     r2,#8
00000a  f1040110          ADD      r1,r4,#0x10
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       Encode
;;;174    	   
;;;175    	/* Pad out to 56 mod 64. */   
;;;176    	/* 计算所有的bits长度的字节数的模64, 64bytes=512bits*/   
;;;177    	index = (unsigned int)((context->count[0] >> 3) & 0x3f);   
000014  8a20              LDRH     r0,[r4,#0x10]
000016  f3c005c5          UBFX     r5,r0,#3,#6
;;;178    	/*计算需要填充的字节数，padLen的取值范围在1-64之间*/   
;;;179    	padLen = (index < 56) ? (56 - index) : (120 - index);   
00001a  2d38              CMP      r5,#0x38
00001c  d202              BCS      |L4.36|
00001e  f1c50038          RSB      r0,r5,#0x38
000022  e001              B        |L4.40|
                  |L4.36|
000024  f1c50078          RSB      r0,r5,#0x78
                  |L4.40|
000028  4607              MOV      r7,r0
;;;180    	/*这一次函数调用绝对不会再导致MD5Transform的被调用，因为这一次不会填满512bits*/   
;;;181    	MD5Update(context, PADDING, padLen);   
00002a  463a              MOV      r2,r7
00002c  4909              LDR      r1,|L4.84|
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       MD5Update
;;;182    	   
;;;183    	/* Append length (before padding) */   
;;;184    	/*补上原始信息的bits长度（bits长度固定的用64bits表示），这一次能够恰巧凑够512bits，不会多也不会少*/   
;;;185    	MD5Update(context, bits, 8);   
000034  2208              MOVS     r2,#8
000036  4669              MOV      r1,sp
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       MD5Update
;;;186    	   
;;;187    	/* Store state in digest */   
;;;188    	/*将最终的结果保存到digest中。ok，终于大功告成了*/   
;;;189    	Encode(digest, context->state, 16);   
00003e  2210              MOVS     r2,#0x10
000040  4621              MOV      r1,r4
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       Encode
;;;190    	   
;;;191    	/* Zeroize sensitive information. */   
;;;192    	   
;;;193    	R_memset((POINTER)context, 0, sizeof(*context));   
000048  2158              MOVS     r1,#0x58
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       __aeabi_memclr4
;;;194    }   
000050  e8bd81fc          POP      {r2-r8,pc}
;;;195       
                          ENDP

                  |L4.84|
                          DCD      PADDING

                          AREA ||i.MD5Init||, CODE, READONLY, ALIGN=2

                  MD5Init PROC
;;;93     /*初始化md5的结构*/   
;;;94     void MD5Init (MD5_CTX *context)   
000000  2100              MOVS     r1,#0
;;;95     {   
;;;96     	/*将当前的有效信息的长度设成0,这个很简单,还没有有效信息,长度当然是0了*/   
;;;97     	context->count[0] = 0; 
000002  6101              STR      r1,[r0,#0x10]
;;;98     	context->count[1] = 0;   
000004  2200              MOVS     r2,#0
000006  6142              STR      r2,[r0,#0x14]
;;;99     	   
;;;100    	/* Load magic initialization constants.*/   
;;;101    	/*初始化链接变量，算法要求这样，这个没法解释了*/   
;;;102    	context->state[0] = 0x67452301;   
000008  4905              LDR      r1,|L5.32|
00000a  6001              STR      r1,[r0,#0]
;;;103    	context->state[1] = 0xefcdab89;   
00000c  4905              LDR      r1,|L5.36|
00000e  6041              STR      r1,[r0,#4]
;;;104    	context->state[2] = 0x98badcfe;   
000010  4903              LDR      r1,|L5.32|
000012  43c9              MVNS     r1,r1
000014  6081              STR      r1,[r0,#8]
;;;105    	context->state[3] = 0x10325476;   
000016  4903              LDR      r1,|L5.36|
000018  43c9              MVNS     r1,r1
00001a  60c1              STR      r1,[r0,#0xc]
;;;106    }   
00001c  4770              BX       lr
;;;107       
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      0x67452301
                  |L5.36|
                          DCD      0xefcdab89

                          AREA ||i.MD5Transform||, CODE, READONLY, ALIGN=2

                  MD5Transform PROC
;;;201    */   
;;;202    static void MD5Transform (UINT4 state[4], unsigned char block[64])   
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;203    {   
000004  b091              SUB      sp,sp,#0x44
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
;;;204    	UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];   
00000a  f8d84000          LDR      r4,[r8,#0]
00000e  f8d85004          LDR      r5,[r8,#4]
000012  f8d86008          LDR      r6,[r8,#8]
000016  f8d8700c          LDR      r7,[r8,#0xc]
;;;205    	   
;;;206    	Decode(x, block, 64);   
00001a  2240              MOVS     r2,#0x40
00001c  4649              MOV      r1,r9
00001e  a801              ADD      r0,sp,#4
000020  f7fffffe          BL       Decode
;;;207    	   
;;;208    	/* Round 1 */   
;;;209    	FF(a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */   
000024  ea050006          AND      r0,r5,r6
000028  ea270105          BIC      r1,r7,r5
00002c  4308              ORRS     r0,r0,r1
00002e  9901              LDR      r1,[sp,#4]
000030  4408              ADD      r0,r0,r1
000032  49fe              LDR      r1,|L6.1068|
000034  4408              ADD      r0,r0,r1
000036  4404              ADD      r4,r4,r0
000038  01e0              LSLS     r0,r4,#7
00003a  ea406454          ORR      r4,r0,r4,LSR #25
00003e  442c              ADD      r4,r4,r5
;;;210    	FF(d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */   
000040  ea040005          AND      r0,r4,r5
000044  ea260104          BIC      r1,r6,r4
000048  4308              ORRS     r0,r0,r1
00004a  9902              LDR      r1,[sp,#8]
00004c  4408              ADD      r0,r0,r1
00004e  49f8              LDR      r1,|L6.1072|
000050  4408              ADD      r0,r0,r1
000052  4407              ADD      r7,r7,r0
000054  0338              LSLS     r0,r7,#12
000056  ea405717          ORR      r7,r0,r7,LSR #20
00005a  4427              ADD      r7,r7,r4
;;;211    	FF(c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */   
00005c  ea070004          AND      r0,r7,r4
000060  ea250107          BIC      r1,r5,r7
000064  4308              ORRS     r0,r0,r1
000066  9903              LDR      r1,[sp,#0xc]
000068  4408              ADD      r0,r0,r1
00006a  49f2              LDR      r1,|L6.1076|
00006c  4408              ADD      r0,r0,r1
00006e  4406              ADD      r6,r6,r0
000070  0470              LSLS     r0,r6,#17
000072  ea4036d6          ORR      r6,r0,r6,LSR #15
000076  443e              ADD      r6,r6,r7
;;;212    	FF(b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */   
000078  ea060007          AND      r0,r6,r7
00007c  ea240106          BIC      r1,r4,r6
000080  4308              ORRS     r0,r0,r1
000082  9904              LDR      r1,[sp,#0x10]
000084  4408              ADD      r0,r0,r1
000086  49ec              LDR      r1,|L6.1080|
000088  4408              ADD      r0,r0,r1
00008a  4405              ADD      r5,r5,r0
00008c  05a8              LSLS     r0,r5,#22
00008e  ea402595          ORR      r5,r0,r5,LSR #10
000092  4435              ADD      r5,r5,r6
;;;213    	FF(a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */   
000094  ea050006          AND      r0,r5,r6
000098  ea270105          BIC      r1,r7,r5
00009c  4308              ORRS     r0,r0,r1
00009e  9905              LDR      r1,[sp,#0x14]
0000a0  4408              ADD      r0,r0,r1
0000a2  49e6              LDR      r1,|L6.1084|
0000a4  4408              ADD      r0,r0,r1
0000a6  4404              ADD      r4,r4,r0
0000a8  01e0              LSLS     r0,r4,#7
0000aa  ea406454          ORR      r4,r0,r4,LSR #25
0000ae  442c              ADD      r4,r4,r5
;;;214    	FF(d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */   
0000b0  ea040005          AND      r0,r4,r5
0000b4  ea260104          BIC      r1,r6,r4
0000b8  4308              ORRS     r0,r0,r1
0000ba  9906              LDR      r1,[sp,#0x18]
0000bc  4408              ADD      r0,r0,r1
0000be  49e0              LDR      r1,|L6.1088|
0000c0  4408              ADD      r0,r0,r1
0000c2  4407              ADD      r7,r7,r0
0000c4  0338              LSLS     r0,r7,#12
0000c6  ea405717          ORR      r7,r0,r7,LSR #20
0000ca  4427              ADD      r7,r7,r4
;;;215    	FF(c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */   
0000cc  ea070004          AND      r0,r7,r4
0000d0  ea250107          BIC      r1,r5,r7
0000d4  4308              ORRS     r0,r0,r1
0000d6  9907              LDR      r1,[sp,#0x1c]
0000d8  4408              ADD      r0,r0,r1
0000da  49da              LDR      r1,|L6.1092|
0000dc  4408              ADD      r0,r0,r1
0000de  4406              ADD      r6,r6,r0
0000e0  0470              LSLS     r0,r6,#17
0000e2  ea4036d6          ORR      r6,r0,r6,LSR #15
0000e6  443e              ADD      r6,r6,r7
;;;216    	FF(b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */   
0000e8  ea060007          AND      r0,r6,r7
0000ec  ea240106          BIC      r1,r4,r6
0000f0  4308              ORRS     r0,r0,r1
0000f2  9908              LDR      r1,[sp,#0x20]
0000f4  4408              ADD      r0,r0,r1
0000f6  49d4              LDR      r1,|L6.1096|
0000f8  4408              ADD      r0,r0,r1
0000fa  4405              ADD      r5,r5,r0
0000fc  05a8              LSLS     r0,r5,#22
0000fe  ea402595          ORR      r5,r0,r5,LSR #10
000102  4435              ADD      r5,r5,r6
;;;217    	FF(a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */   
000104  ea050006          AND      r0,r5,r6
000108  ea270105          BIC      r1,r7,r5
00010c  4308              ORRS     r0,r0,r1
00010e  9909              LDR      r1,[sp,#0x24]
000110  4408              ADD      r0,r0,r1
000112  49ce              LDR      r1,|L6.1100|
000114  4408              ADD      r0,r0,r1
000116  4404              ADD      r4,r4,r0
000118  01e0              LSLS     r0,r4,#7
00011a  ea406454          ORR      r4,r0,r4,LSR #25
00011e  442c              ADD      r4,r4,r5
;;;218    	FF(d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */   
000120  ea040005          AND      r0,r4,r5
000124  ea260104          BIC      r1,r6,r4
000128  4308              ORRS     r0,r0,r1
00012a  990a              LDR      r1,[sp,#0x28]
00012c  4408              ADD      r0,r0,r1
00012e  49c8              LDR      r1,|L6.1104|
000130  4408              ADD      r0,r0,r1
000132  4407              ADD      r7,r7,r0
000134  0338              LSLS     r0,r7,#12
000136  ea405717          ORR      r7,r0,r7,LSR #20
00013a  4427              ADD      r7,r7,r4
;;;219    	FF(c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */   
00013c  ea070004          AND      r0,r7,r4
000140  ea250107          BIC      r1,r5,r7
000144  4308              ORRS     r0,r0,r1
000146  990b              LDR      r1,[sp,#0x2c]
000148  4408              ADD      r0,r0,r1
00014a  f5a04024          SUB      r0,r0,#0xa400
00014e  384f              SUBS     r0,r0,#0x4f
000150  4406              ADD      r6,r6,r0
000152  0470              LSLS     r0,r6,#17
000154  ea4036d6          ORR      r6,r0,r6,LSR #15
000158  443e              ADD      r6,r6,r7
;;;220    	FF(b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */   
00015a  ea060007          AND      r0,r6,r7
00015e  ea240106          BIC      r1,r4,r6
000162  4308              ORRS     r0,r0,r1
000164  990c              LDR      r1,[sp,#0x30]
000166  4408              ADD      r0,r0,r1
000168  49ba              LDR      r1,|L6.1108|
00016a  4408              ADD      r0,r0,r1
00016c  4405              ADD      r5,r5,r0
00016e  05a8              LSLS     r0,r5,#22
000170  ea402595          ORR      r5,r0,r5,LSR #10
000174  4435              ADD      r5,r5,r6
;;;221    	FF(a, b, c, d, x[12], S11, 0x6b901122); /* 13 */   
000176  ea050006          AND      r0,r5,r6
00017a  ea270105          BIC      r1,r7,r5
00017e  4308              ORRS     r0,r0,r1
000180  990d              LDR      r1,[sp,#0x34]
000182  4408              ADD      r0,r0,r1
000184  49b4              LDR      r1,|L6.1112|
000186  4408              ADD      r0,r0,r1
000188  4404              ADD      r4,r4,r0
00018a  01e0              LSLS     r0,r4,#7
00018c  ea406454          ORR      r4,r0,r4,LSR #25
000190  442c              ADD      r4,r4,r5
;;;222    	FF(d, a, b, c, x[13], S12, 0xfd987193); /* 14 */   
000192  ea040005          AND      r0,r4,r5
000196  ea260104          BIC      r1,r6,r4
00019a  4308              ORRS     r0,r0,r1
00019c  990e              LDR      r1,[sp,#0x38]
00019e  4408              ADD      r0,r0,r1
0001a0  49ae              LDR      r1,|L6.1116|
0001a2  4408              ADD      r0,r0,r1
0001a4  4407              ADD      r7,r7,r0
0001a6  0338              LSLS     r0,r7,#12
0001a8  ea405717          ORR      r7,r0,r7,LSR #20
0001ac  4427              ADD      r7,r7,r4
;;;223    	FF(c, d, a, b, x[14], S13, 0xa679438e); /* 15 */   
0001ae  ea070004          AND      r0,r7,r4
0001b2  ea250107          BIC      r1,r5,r7
0001b6  4308              ORRS     r0,r0,r1
0001b8  990f              LDR      r1,[sp,#0x3c]
0001ba  4408              ADD      r0,r0,r1
0001bc  49a8              LDR      r1,|L6.1120|
0001be  4408              ADD      r0,r0,r1
0001c0  4406              ADD      r6,r6,r0
0001c2  0470              LSLS     r0,r6,#17
0001c4  ea4036d6          ORR      r6,r0,r6,LSR #15
0001c8  443e              ADD      r6,r6,r7
;;;224    	FF(b, c, d, a, x[15], S14, 0x49b40821); /* 16 */   
0001ca  ea060007          AND      r0,r6,r7
0001ce  ea240106          BIC      r1,r4,r6
0001d2  4308              ORRS     r0,r0,r1
0001d4  9910              LDR      r1,[sp,#0x40]
0001d6  4408              ADD      r0,r0,r1
0001d8  49a2              LDR      r1,|L6.1124|
0001da  4408              ADD      r0,r0,r1
0001dc  4405              ADD      r5,r5,r0
0001de  05a8              LSLS     r0,r5,#22
0001e0  ea402595          ORR      r5,r0,r5,LSR #10
0001e4  4435              ADD      r5,r5,r6
;;;225    	   
;;;226    	/* Round 2 */   
;;;227    	GG(a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */   
0001e6  ea050007          AND      r0,r5,r7
0001ea  ea260107          BIC      r1,r6,r7
0001ee  4308              ORRS     r0,r0,r1
0001f0  9902              LDR      r1,[sp,#8]
0001f2  4408              ADD      r0,r0,r1
0001f4  499c              LDR      r1,|L6.1128|
0001f6  4408              ADD      r0,r0,r1
0001f8  4404              ADD      r4,r4,r0
0001fa  0160              LSLS     r0,r4,#5
0001fc  ea4064d4          ORR      r4,r0,r4,LSR #27
000200  442c              ADD      r4,r4,r5
;;;228    	GG(d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */   
000202  ea040006          AND      r0,r4,r6
000206  ea250106          BIC      r1,r5,r6
00020a  4308              ORRS     r0,r0,r1
00020c  9907              LDR      r1,[sp,#0x1c]
00020e  4408              ADD      r0,r0,r1
000210  4996              LDR      r1,|L6.1132|
000212  4408              ADD      r0,r0,r1
000214  4407              ADD      r7,r7,r0
000216  0278              LSLS     r0,r7,#9
000218  ea4057d7          ORR      r7,r0,r7,LSR #23
00021c  4427              ADD      r7,r7,r4
;;;229    	GG(c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */   
00021e  ea070005          AND      r0,r7,r5
000222  ea240105          BIC      r1,r4,r5
000226  4308              ORRS     r0,r0,r1
000228  990c              LDR      r1,[sp,#0x30]
00022a  4408              ADD      r0,r0,r1
00022c  4990              LDR      r1,|L6.1136|
00022e  4408              ADD      r0,r0,r1
000230  4406              ADD      r6,r6,r0
000232  03b0              LSLS     r0,r6,#14
000234  ea404696          ORR      r6,r0,r6,LSR #18
000238  443e              ADD      r6,r6,r7
;;;230    	GG(b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */   
00023a  ea060004          AND      r0,r6,r4
00023e  ea270104          BIC      r1,r7,r4
000242  4308              ORRS     r0,r0,r1
000244  9901              LDR      r1,[sp,#4]
000246  4408              ADD      r0,r0,r1
000248  498a              LDR      r1,|L6.1140|
00024a  4408              ADD      r0,r0,r1
00024c  4405              ADD      r5,r5,r0
00024e  0528              LSLS     r0,r5,#20
000250  ea403515          ORR      r5,r0,r5,LSR #12
000254  4435              ADD      r5,r5,r6
;;;231    	GG(a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */   
000256  ea050007          AND      r0,r5,r7
00025a  ea260107          BIC      r1,r6,r7
00025e  4308              ORRS     r0,r0,r1
000260  9906              LDR      r1,[sp,#0x18]
000262  4408              ADD      r0,r0,r1
000264  4984              LDR      r1,|L6.1144|
000266  4408              ADD      r0,r0,r1
000268  4404              ADD      r4,r4,r0
00026a  0160              LSLS     r0,r4,#5
00026c  ea4064d4          ORR      r4,r0,r4,LSR #27
000270  442c              ADD      r4,r4,r5
;;;232    	GG(d, a, b, c, x[10], S22, 0x2441453); /* 22 */   
000272  ea040006          AND      r0,r4,r6
000276  ea250106          BIC      r1,r5,r6
00027a  4308              ORRS     r0,r0,r1
00027c  990b              LDR      r1,[sp,#0x2c]
00027e  4408              ADD      r0,r0,r1
000280  497e              LDR      r1,|L6.1148|
000282  4408              ADD      r0,r0,r1
000284  4407              ADD      r7,r7,r0
000286  0278              LSLS     r0,r7,#9
000288  ea4057d7          ORR      r7,r0,r7,LSR #23
00028c  4427              ADD      r7,r7,r4
;;;233    	GG(c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */   
00028e  ea070005          AND      r0,r7,r5
000292  ea240105          BIC      r1,r4,r5
000296  4308              ORRS     r0,r0,r1
000298  9910              LDR      r1,[sp,#0x40]
00029a  4408              ADD      r0,r0,r1
00029c  4978              LDR      r1,|L6.1152|
00029e  4408              ADD      r0,r0,r1
0002a0  4406              ADD      r6,r6,r0
0002a2  03b0              LSLS     r0,r6,#14
0002a4  ea404696          ORR      r6,r0,r6,LSR #18
0002a8  443e              ADD      r6,r6,r7
;;;234    	GG(b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */   
0002aa  ea060004          AND      r0,r6,r4
0002ae  ea270104          BIC      r1,r7,r4
0002b2  4308              ORRS     r0,r0,r1
0002b4  9905              LDR      r1,[sp,#0x14]
0002b6  4408              ADD      r0,r0,r1
0002b8  4972              LDR      r1,|L6.1156|
0002ba  4408              ADD      r0,r0,r1
0002bc  4405              ADD      r5,r5,r0
0002be  0528              LSLS     r0,r5,#20
0002c0  ea403515          ORR      r5,r0,r5,LSR #12
0002c4  4435              ADD      r5,r5,r6
;;;235    	GG(a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */   
0002c6  ea050007          AND      r0,r5,r7
0002ca  ea260107          BIC      r1,r6,r7
0002ce  4308              ORRS     r0,r0,r1
0002d0  990a              LDR      r1,[sp,#0x28]
0002d2  4408              ADD      r0,r0,r1
0002d4  496c              LDR      r1,|L6.1160|
0002d6  4408              ADD      r0,r0,r1
0002d8  4404              ADD      r4,r4,r0
0002da  0160              LSLS     r0,r4,#5
0002dc  ea4064d4          ORR      r4,r0,r4,LSR #27
0002e0  442c              ADD      r4,r4,r5
;;;236    	GG(d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */   
0002e2  ea040006          AND      r0,r4,r6
0002e6  ea250106          BIC      r1,r5,r6
0002ea  4308              ORRS     r0,r0,r1
0002ec  990f              LDR      r1,[sp,#0x3c]
0002ee  4408              ADD      r0,r0,r1
0002f0  4966              LDR      r1,|L6.1164|
0002f2  4408              ADD      r0,r0,r1
0002f4  4407              ADD      r7,r7,r0
0002f6  0278              LSLS     r0,r7,#9
0002f8  ea4057d7          ORR      r7,r0,r7,LSR #23
0002fc  4427              ADD      r7,r7,r4
;;;237    	GG(c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */   
0002fe  ea070005          AND      r0,r7,r5
000302  ea240105          BIC      r1,r4,r5
000306  4308              ORRS     r0,r0,r1
000308  9904              LDR      r1,[sp,#0x10]
00030a  4408              ADD      r0,r0,r1
00030c  4960              LDR      r1,|L6.1168|
00030e  4408              ADD      r0,r0,r1
000310  4406              ADD      r6,r6,r0
000312  03b0              LSLS     r0,r6,#14
000314  ea404696          ORR      r6,r0,r6,LSR #18
000318  443e              ADD      r6,r6,r7
;;;238    	GG(b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */   
00031a  ea060004          AND      r0,r6,r4
00031e  ea270104          BIC      r1,r7,r4
000322  4308              ORRS     r0,r0,r1
000324  9909              LDR      r1,[sp,#0x24]
000326  4408              ADD      r0,r0,r1
000328  495a              LDR      r1,|L6.1172|
00032a  4408              ADD      r0,r0,r1
00032c  4405              ADD      r5,r5,r0
00032e  0528              LSLS     r0,r5,#20
000330  ea403515          ORR      r5,r0,r5,LSR #12
000334  4435              ADD      r5,r5,r6
;;;239    	GG(a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */   
000336  ea050007          AND      r0,r5,r7
00033a  ea260107          BIC      r1,r6,r7
00033e  4308              ORRS     r0,r0,r1
000340  990e              LDR      r1,[sp,#0x38]
000342  4408              ADD      r0,r0,r1
000344  4954              LDR      r1,|L6.1176|
000346  4408              ADD      r0,r0,r1
000348  4404              ADD      r4,r4,r0
00034a  0160              LSLS     r0,r4,#5
00034c  ea4064d4          ORR      r4,r0,r4,LSR #27
000350  442c              ADD      r4,r4,r5
;;;240    	GG(d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */   
000352  ea040006          AND      r0,r4,r6
000356  ea250106          BIC      r1,r5,r6
00035a  4308              ORRS     r0,r0,r1
00035c  9903              LDR      r1,[sp,#0xc]
00035e  4408              ADD      r0,r0,r1
000360  494e              LDR      r1,|L6.1180|
000362  4408              ADD      r0,r0,r1
000364  4407              ADD      r7,r7,r0
000366  0278              LSLS     r0,r7,#9
000368  ea4057d7          ORR      r7,r0,r7,LSR #23
00036c  4427              ADD      r7,r7,r4
;;;241    	GG(c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */   
00036e  ea070005          AND      r0,r7,r5
000372  ea240105          BIC      r1,r4,r5
000376  4308              ORRS     r0,r0,r1
000378  9908              LDR      r1,[sp,#0x20]
00037a  4408              ADD      r0,r0,r1
00037c  4948              LDR      r1,|L6.1184|
00037e  4408              ADD      r0,r0,r1
000380  4406              ADD      r6,r6,r0
000382  03b0              LSLS     r0,r6,#14
000384  ea404696          ORR      r6,r0,r6,LSR #18
000388  443e              ADD      r6,r6,r7
;;;242    	GG(b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */   
00038a  ea060004          AND      r0,r6,r4
00038e  ea270104          BIC      r1,r7,r4
000392  4308              ORRS     r0,r0,r1
000394  990d              LDR      r1,[sp,#0x34]
000396  4408              ADD      r0,r0,r1
000398  4942              LDR      r1,|L6.1188|
00039a  4408              ADD      r0,r0,r1
00039c  4405              ADD      r5,r5,r0
00039e  0528              LSLS     r0,r5,#20
0003a0  ea403515          ORR      r5,r0,r5,LSR #12
0003a4  4435              ADD      r5,r5,r6
;;;243    	   
;;;244    	/* Round 3 */   
;;;245    	HH(a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */   
0003a6  ea850006          EOR      r0,r5,r6
0003aa  4078              EORS     r0,r0,r7
0003ac  9906              LDR      r1,[sp,#0x18]
0003ae  4408              ADD      r0,r0,r1
0003b0  493d              LDR      r1,|L6.1192|
0003b2  4408              ADD      r0,r0,r1
0003b4  4404              ADD      r4,r4,r0
0003b6  0120              LSLS     r0,r4,#4
0003b8  ea407414          ORR      r4,r0,r4,LSR #28
0003bc  442c              ADD      r4,r4,r5
;;;246    	HH(d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */   
0003be  ea840005          EOR      r0,r4,r5
0003c2  4070              EORS     r0,r0,r6
0003c4  9909              LDR      r1,[sp,#0x24]
0003c6  4408              ADD      r0,r0,r1
0003c8  4938              LDR      r1,|L6.1196|
0003ca  4408              ADD      r0,r0,r1
0003cc  4407              ADD      r7,r7,r0
0003ce  02f8              LSLS     r0,r7,#11
0003d0  ea405757          ORR      r7,r0,r7,LSR #21
0003d4  4427              ADD      r7,r7,r4
;;;247    	HH(c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */   
0003d6  ea870004          EOR      r0,r7,r4
0003da  4068              EORS     r0,r0,r5
0003dc  990c              LDR      r1,[sp,#0x30]
0003de  4408              ADD      r0,r0,r1
0003e0  4933              LDR      r1,|L6.1200|
0003e2  4408              ADD      r0,r0,r1
0003e4  4406              ADD      r6,r6,r0
0003e6  0430              LSLS     r0,r6,#16
0003e8  ea404616          ORR      r6,r0,r6,LSR #16
0003ec  443e              ADD      r6,r6,r7
;;;248    	HH(b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */   
0003ee  ea860007          EOR      r0,r6,r7
0003f2  4060              EORS     r0,r0,r4
0003f4  990f              LDR      r1,[sp,#0x3c]
0003f6  4408              ADD      r0,r0,r1
0003f8  492e              LDR      r1,|L6.1204|
0003fa  4408              ADD      r0,r0,r1
0003fc  4405              ADD      r5,r5,r0
0003fe  05e8              LSLS     r0,r5,#23
000400  ea402555          ORR      r5,r0,r5,LSR #9
000404  4435              ADD      r5,r5,r6
;;;249    	HH(a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */   
000406  ea850006          EOR      r0,r5,r6
00040a  4078              EORS     r0,r0,r7
00040c  9902              LDR      r1,[sp,#8]
00040e  4408              ADD      r0,r0,r1
000410  4929              LDR      r1,|L6.1208|
000412  4408              ADD      r0,r0,r1
000414  4404              ADD      r4,r4,r0
000416  0120              LSLS     r0,r4,#4
000418  ea407414          ORR      r4,r0,r4,LSR #28
00041c  442c              ADD      r4,r4,r5
;;;250    	HH(d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */   
00041e  ea840005          EOR      r0,r4,r5
000422  4070              EORS     r0,r0,r6
000424  9905              LDR      r1,[sp,#0x14]
000426  4408              ADD      r0,r0,r1
000428  4924              LDR      r1,|L6.1212|
00042a  e049              B        |L6.1216|
                  |L6.1068|
                          DCD      0xd76aa478
                  |L6.1072|
                          DCD      0xe8c7b756
                  |L6.1076|
                          DCD      0x242070db
                  |L6.1080|
                          DCD      0xc1bdceee
                  |L6.1084|
                          DCD      0xf57c0faf
                  |L6.1088|
                          DCD      0x4787c62a
                  |L6.1092|
                          DCD      0xa8304613
                  |L6.1096|
                          DCD      0xfd469501
                  |L6.1100|
                          DCD      0x698098d8
                  |L6.1104|
                          DCD      0x8b44f7af
                  |L6.1108|
                          DCD      0x895cd7be
                  |L6.1112|
                          DCD      0x6b901122
                  |L6.1116|
                          DCD      0xfd987193
                  |L6.1120|
                          DCD      0xa679438e
                  |L6.1124|
                          DCD      0x49b40821
                  |L6.1128|
                          DCD      0xf61e2562
                  |L6.1132|
                          DCD      0xc040b340
                  |L6.1136|
                          DCD      0x265e5a51
                  |L6.1140|
                          DCD      0xe9b6c7aa
                  |L6.1144|
                          DCD      0xd62f105d
                  |L6.1148|
                          DCD      0x02441453
                  |L6.1152|
                          DCD      0xd8a1e681
                  |L6.1156|
                          DCD      0xe7d3fbc8
                  |L6.1160|
                          DCD      0x21e1cde6
                  |L6.1164|
                          DCD      0xc33707d6
                  |L6.1168|
                          DCD      0xf4d50d87
                  |L6.1172|
                          DCD      0x455a14ed
                  |L6.1176|
                          DCD      0xa9e3e905
                  |L6.1180|
                          DCD      0xfcefa3f8
                  |L6.1184|
                          DCD      0x676f02d9
                  |L6.1188|
                          DCD      0x8d2a4c8a
                  |L6.1192|
                          DCD      0xfffa3942
                  |L6.1196|
                          DCD      0x8771f681
                  |L6.1200|
                          DCD      0x6d9d6122
                  |L6.1204|
                          DCD      0xfde5380c
                  |L6.1208|
                          DCD      0xa4beea44
                  |L6.1212|
                          DCD      0x4bdecfa9
                  |L6.1216|
0004c0  4408              ADD      r0,r0,r1
0004c2  4407              ADD      r7,r7,r0
0004c4  02f8              LSLS     r0,r7,#11
0004c6  ea405757          ORR      r7,r0,r7,LSR #21
0004ca  4427              ADD      r7,r7,r4
;;;251    	HH(c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */   
0004cc  ea870004          EOR      r0,r7,r4
0004d0  4068              EORS     r0,r0,r5
0004d2  9908              LDR      r1,[sp,#0x20]
0004d4  4408              ADD      r0,r0,r1
0004d6  49a7              LDR      r1,|L6.1908|
0004d8  4408              ADD      r0,r0,r1
0004da  4406              ADD      r6,r6,r0
0004dc  0430              LSLS     r0,r6,#16
0004de  ea404616          ORR      r6,r0,r6,LSR #16
0004e2  443e              ADD      r6,r6,r7
;;;252    	HH(b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */   
0004e4  ea860007          EOR      r0,r6,r7
0004e8  4060              EORS     r0,r0,r4
0004ea  990b              LDR      r1,[sp,#0x2c]
0004ec  4408              ADD      r0,r0,r1
0004ee  49a2              LDR      r1,|L6.1912|
0004f0  4408              ADD      r0,r0,r1
0004f2  4405              ADD      r5,r5,r0
0004f4  05e8              LSLS     r0,r5,#23
0004f6  ea402555          ORR      r5,r0,r5,LSR #9
0004fa  4435              ADD      r5,r5,r6
;;;253    	HH(a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */   
0004fc  ea850006          EOR      r0,r5,r6
000500  4078              EORS     r0,r0,r7
000502  990e              LDR      r1,[sp,#0x38]
000504  4408              ADD      r0,r0,r1
000506  499d              LDR      r1,|L6.1916|
000508  4408              ADD      r0,r0,r1
00050a  4404              ADD      r4,r4,r0
00050c  0120              LSLS     r0,r4,#4
00050e  ea407414          ORR      r4,r0,r4,LSR #28
000512  442c              ADD      r4,r4,r5
;;;254    	HH(d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */   
000514  ea840005          EOR      r0,r4,r5
000518  4070              EORS     r0,r0,r6
00051a  9901              LDR      r1,[sp,#4]
00051c  4408              ADD      r0,r0,r1
00051e  4998              LDR      r1,|L6.1920|
000520  4408              ADD      r0,r0,r1
000522  4407              ADD      r7,r7,r0
000524  02f8              LSLS     r0,r7,#11
000526  ea405757          ORR      r7,r0,r7,LSR #21
00052a  4427              ADD      r7,r7,r4
;;;255    	HH(c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */   
00052c  ea870004          EOR      r0,r7,r4
000530  4068              EORS     r0,r0,r5
000532  9904              LDR      r1,[sp,#0x10]
000534  4408              ADD      r0,r0,r1
000536  4993              LDR      r1,|L6.1924|
000538  4408              ADD      r0,r0,r1
00053a  4406              ADD      r6,r6,r0
00053c  0430              LSLS     r0,r6,#16
00053e  ea404616          ORR      r6,r0,r6,LSR #16
000542  443e              ADD      r6,r6,r7
;;;256    	HH(b, c, d, a, x[ 6], S34, 0x4881d05); /* 44 */   
000544  ea860007          EOR      r0,r6,r7
000548  4060              EORS     r0,r0,r4
00054a  9907              LDR      r1,[sp,#0x1c]
00054c  4408              ADD      r0,r0,r1
00054e  498e              LDR      r1,|L6.1928|
000550  4408              ADD      r0,r0,r1
000552  4405              ADD      r5,r5,r0
000554  05e8              LSLS     r0,r5,#23
000556  ea402555          ORR      r5,r0,r5,LSR #9
00055a  4435              ADD      r5,r5,r6
;;;257    	HH(a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */   
00055c  ea850006          EOR      r0,r5,r6
000560  4078              EORS     r0,r0,r7
000562  990a              LDR      r1,[sp,#0x28]
000564  4408              ADD      r0,r0,r1
000566  4989              LDR      r1,|L6.1932|
000568  4408              ADD      r0,r0,r1
00056a  4404              ADD      r4,r4,r0
00056c  0120              LSLS     r0,r4,#4
00056e  ea407414          ORR      r4,r0,r4,LSR #28
000572  442c              ADD      r4,r4,r5
;;;258    	HH(d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */   
000574  ea840005          EOR      r0,r4,r5
000578  4070              EORS     r0,r0,r6
00057a  990d              LDR      r1,[sp,#0x34]
00057c  4408              ADD      r0,r0,r1
00057e  4984              LDR      r1,|L6.1936|
000580  4408              ADD      r0,r0,r1
000582  4407              ADD      r7,r7,r0
000584  02f8              LSLS     r0,r7,#11
000586  ea405757          ORR      r7,r0,r7,LSR #21
00058a  4427              ADD      r7,r7,r4
;;;259    	HH(c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */   
00058c  ea870004          EOR      r0,r7,r4
000590  4068              EORS     r0,r0,r5
000592  9910              LDR      r1,[sp,#0x40]
000594  4408              ADD      r0,r0,r1
000596  497f              LDR      r1,|L6.1940|
000598  4408              ADD      r0,r0,r1
00059a  4406              ADD      r6,r6,r0
00059c  0430              LSLS     r0,r6,#16
00059e  ea404616          ORR      r6,r0,r6,LSR #16
0005a2  443e              ADD      r6,r6,r7
;;;260    	HH(b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */   
0005a4  ea860007          EOR      r0,r6,r7
0005a8  4060              EORS     r0,r0,r4
0005aa  9903              LDR      r1,[sp,#0xc]
0005ac  4408              ADD      r0,r0,r1
0005ae  497a              LDR      r1,|L6.1944|
0005b0  4408              ADD      r0,r0,r1
0005b2  4405              ADD      r5,r5,r0
0005b4  05e8              LSLS     r0,r5,#23
0005b6  ea402555          ORR      r5,r0,r5,LSR #9
0005ba  4435              ADD      r5,r5,r6
;;;261    	   
;;;262    	/* Round 4 */   
;;;263    	II(a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */   
0005bc  ea650007          ORN      r0,r5,r7
0005c0  4070              EORS     r0,r0,r6
0005c2  9901              LDR      r1,[sp,#4]
0005c4  4408              ADD      r0,r0,r1
0005c6  4975              LDR      r1,|L6.1948|
0005c8  4408              ADD      r0,r0,r1
0005ca  4404              ADD      r4,r4,r0
0005cc  01a0              LSLS     r0,r4,#6
0005ce  ea406494          ORR      r4,r0,r4,LSR #26
0005d2  442c              ADD      r4,r4,r5
;;;264    	II(d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */   
0005d4  ea640006          ORN      r0,r4,r6
0005d8  4068              EORS     r0,r0,r5
0005da  9908              LDR      r1,[sp,#0x20]
0005dc  4408              ADD      r0,r0,r1
0005de  4970              LDR      r1,|L6.1952|
0005e0  4408              ADD      r0,r0,r1
0005e2  4407              ADD      r7,r7,r0
0005e4  02b8              LSLS     r0,r7,#10
0005e6  ea405797          ORR      r7,r0,r7,LSR #22
0005ea  4427              ADD      r7,r7,r4
;;;265    	II(c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */   
0005ec  ea670005          ORN      r0,r7,r5
0005f0  4060              EORS     r0,r0,r4
0005f2  990f              LDR      r1,[sp,#0x3c]
0005f4  4408              ADD      r0,r0,r1
0005f6  496b              LDR      r1,|L6.1956|
0005f8  4408              ADD      r0,r0,r1
0005fa  4406              ADD      r6,r6,r0
0005fc  03f0              LSLS     r0,r6,#15
0005fe  ea404656          ORR      r6,r0,r6,LSR #17
000602  443e              ADD      r6,r6,r7
;;;266    	II(b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */   
000604  ea660004          ORN      r0,r6,r4
000608  4078              EORS     r0,r0,r7
00060a  9906              LDR      r1,[sp,#0x18]
00060c  4408              ADD      r0,r0,r1
00060e  4966              LDR      r1,|L6.1960|
000610  4408              ADD      r0,r0,r1
000612  4405              ADD      r5,r5,r0
000614  0568              LSLS     r0,r5,#21
000616  ea4025d5          ORR      r5,r0,r5,LSR #11
00061a  4435              ADD      r5,r5,r6
;;;267    	II(a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */   
00061c  ea650007          ORN      r0,r5,r7
000620  4070              EORS     r0,r0,r6
000622  990d              LDR      r1,[sp,#0x34]
000624  4408              ADD      r0,r0,r1
000626  4961              LDR      r1,|L6.1964|
000628  4408              ADD      r0,r0,r1
00062a  4404              ADD      r4,r4,r0
00062c  01a0              LSLS     r0,r4,#6
00062e  ea406494          ORR      r4,r0,r4,LSR #26
000632  442c              ADD      r4,r4,r5
;;;268    	II(d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */   
000634  ea640006          ORN      r0,r4,r6
000638  4068              EORS     r0,r0,r5
00063a  9904              LDR      r1,[sp,#0x10]
00063c  4408              ADD      r0,r0,r1
00063e  495c              LDR      r1,|L6.1968|
000640  4408              ADD      r0,r0,r1
000642  4407              ADD      r7,r7,r0
000644  02b8              LSLS     r0,r7,#10
000646  ea405797          ORR      r7,r0,r7,LSR #22
00064a  4427              ADD      r7,r7,r4
;;;269    	II(c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */   
00064c  ea670005          ORN      r0,r7,r5
000650  4060              EORS     r0,r0,r4
000652  990b              LDR      r1,[sp,#0x2c]
000654  4408              ADD      r0,r0,r1
000656  4957              LDR      r1,|L6.1972|
000658  4408              ADD      r0,r0,r1
00065a  4406              ADD      r6,r6,r0
00065c  03f0              LSLS     r0,r6,#15
00065e  ea404656          ORR      r6,r0,r6,LSR #17
000662  443e              ADD      r6,r6,r7
;;;270    	II(b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */   
000664  ea660004          ORN      r0,r6,r4
000668  4078              EORS     r0,r0,r7
00066a  9902              LDR      r1,[sp,#8]
00066c  4408              ADD      r0,r0,r1
00066e  4952              LDR      r1,|L6.1976|
000670  4408              ADD      r0,r0,r1
000672  4405              ADD      r5,r5,r0
000674  0568              LSLS     r0,r5,#21
000676  ea4025d5          ORR      r5,r0,r5,LSR #11
00067a  4435              ADD      r5,r5,r6
;;;271    	II(a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */   
00067c  ea650007          ORN      r0,r5,r7
000680  4070              EORS     r0,r0,r6
000682  9909              LDR      r1,[sp,#0x24]
000684  4408              ADD      r0,r0,r1
000686  494d              LDR      r1,|L6.1980|
000688  4408              ADD      r0,r0,r1
00068a  4404              ADD      r4,r4,r0
00068c  01a0              LSLS     r0,r4,#6
00068e  ea406494          ORR      r4,r0,r4,LSR #26
000692  442c              ADD      r4,r4,r5
;;;272    	II(d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */   
000694  ea640006          ORN      r0,r4,r6
000698  4068              EORS     r0,r0,r5
00069a  9910              LDR      r1,[sp,#0x40]
00069c  4408              ADD      r0,r0,r1
00069e  4948              LDR      r1,|L6.1984|
0006a0  4408              ADD      r0,r0,r1
0006a2  4407              ADD      r7,r7,r0
0006a4  02b8              LSLS     r0,r7,#10
0006a6  ea405797          ORR      r7,r0,r7,LSR #22
0006aa  4427              ADD      r7,r7,r4
;;;273    	II(c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */   
0006ac  ea670005          ORN      r0,r7,r5
0006b0  4060              EORS     r0,r0,r4
0006b2  9907              LDR      r1,[sp,#0x1c]
0006b4  4408              ADD      r0,r0,r1
0006b6  4943              LDR      r1,|L6.1988|
0006b8  4408              ADD      r0,r0,r1
0006ba  4406              ADD      r6,r6,r0
0006bc  03f0              LSLS     r0,r6,#15
0006be  ea404656          ORR      r6,r0,r6,LSR #17
0006c2  443e              ADD      r6,r6,r7
;;;274    	II(b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */   
0006c4  ea660004          ORN      r0,r6,r4
0006c8  4078              EORS     r0,r0,r7
0006ca  990e              LDR      r1,[sp,#0x38]
0006cc  4408              ADD      r0,r0,r1
0006ce  493e              LDR      r1,|L6.1992|
0006d0  4408              ADD      r0,r0,r1
0006d2  4405              ADD      r5,r5,r0
0006d4  0568              LSLS     r0,r5,#21
0006d6  ea4025d5          ORR      r5,r0,r5,LSR #11
0006da  4435              ADD      r5,r5,r6
;;;275    	II(a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */   
0006dc  ea650007          ORN      r0,r5,r7
0006e0  4070              EORS     r0,r0,r6
0006e2  9905              LDR      r1,[sp,#0x14]
0006e4  4408              ADD      r0,r0,r1
0006e6  4939              LDR      r1,|L6.1996|
0006e8  4408              ADD      r0,r0,r1
0006ea  4404              ADD      r4,r4,r0
0006ec  01a0              LSLS     r0,r4,#6
0006ee  ea406494          ORR      r4,r0,r4,LSR #26
0006f2  442c              ADD      r4,r4,r5
;;;276    	II(d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */   
0006f4  ea640006          ORN      r0,r4,r6
0006f8  4068              EORS     r0,r0,r5
0006fa  990c              LDR      r1,[sp,#0x30]
0006fc  4408              ADD      r0,r0,r1
0006fe  4934              LDR      r1,|L6.2000|
000700  4408              ADD      r0,r0,r1
000702  4407              ADD      r7,r7,r0
000704  02b8              LSLS     r0,r7,#10
000706  ea405797          ORR      r7,r0,r7,LSR #22
00070a  4427              ADD      r7,r7,r4
;;;277    	II(c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */   
00070c  ea670005          ORN      r0,r7,r5
000710  4060              EORS     r0,r0,r4
000712  9903              LDR      r1,[sp,#0xc]
000714  4408              ADD      r0,r0,r1
000716  492f              LDR      r1,|L6.2004|
000718  4408              ADD      r0,r0,r1
00071a  4406              ADD      r6,r6,r0
00071c  03f0              LSLS     r0,r6,#15
00071e  ea404656          ORR      r6,r0,r6,LSR #17
000722  443e              ADD      r6,r6,r7
;;;278    	II(b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */   
000724  ea660004          ORN      r0,r6,r4
000728  4078              EORS     r0,r0,r7
00072a  990a              LDR      r1,[sp,#0x28]
00072c  4408              ADD      r0,r0,r1
00072e  492a              LDR      r1,|L6.2008|
000730  4408              ADD      r0,r0,r1
000732  4405              ADD      r5,r5,r0
000734  0568              LSLS     r0,r5,#21
000736  ea4025d5          ORR      r5,r0,r5,LSR #11
00073a  4435              ADD      r5,r5,r6
;;;279    	   
;;;280    	state[0] += a;   
00073c  f8d80000          LDR      r0,[r8,#0]
000740  4420              ADD      r0,r0,r4
000742  f8c80000          STR      r0,[r8,#0]
;;;281    	state[1] += b;   
000746  f8d80004          LDR      r0,[r8,#4]
00074a  4428              ADD      r0,r0,r5
00074c  f8c80004          STR      r0,[r8,#4]
;;;282    	state[2] += c;   
000750  f8d80008          LDR      r0,[r8,#8]
000754  4430              ADD      r0,r0,r6
000756  f8c80008          STR      r0,[r8,#8]
;;;283    	state[3] += d;   
00075a  f8d8000c          LDR      r0,[r8,#0xc]
00075e  4438              ADD      r0,r0,r7
000760  f8c8000c          STR      r0,[r8,#0xc]
;;;284    	   
;;;285    	/* Zeroize sensitive information. */   
;;;286    	R_memset((POINTER)x, 0, sizeof(x));   
000764  2140              MOVS     r1,#0x40
000766  a801              ADD      r0,sp,#4
000768  f7fffffe          BL       __aeabi_memclr4
;;;287    }   
00076c  b011              ADD      sp,sp,#0x44
00076e  e8bd83f0          POP      {r4-r9,pc}
;;;288       
                          ENDP

000772  0000              DCW      0x0000
                  |L6.1908|
                          DCD      0xf6bb4b60
                  |L6.1912|
                          DCD      0xbebfbc70
                  |L6.1916|
                          DCD      0x289b7ec6
                  |L6.1920|
                          DCD      0xeaa127fa
                  |L6.1924|
                          DCD      0xd4ef3085
                  |L6.1928|
                          DCD      0x04881d05
                  |L6.1932|
                          DCD      0xd9d4d039
                  |L6.1936|
                          DCD      0xe6db99e5
                  |L6.1940|
                          DCD      0x1fa27cf8
                  |L6.1944|
                          DCD      0xc4ac5665
                  |L6.1948|
                          DCD      0xf4292244
                  |L6.1952|
                          DCD      0x432aff97
                  |L6.1956|
                          DCD      0xab9423a7
                  |L6.1960|
                          DCD      0xfc93a039
                  |L6.1964|
                          DCD      0x655b59c3
                  |L6.1968|
                          DCD      0x8f0ccc92
                  |L6.1972|
                          DCD      0xffeff47d
                  |L6.1976|
                          DCD      0x85845dd1
                  |L6.1980|
                          DCD      0x6fa87e4f
                  |L6.1984|
                          DCD      0xfe2ce6e0
                  |L6.1988|
                          DCD      0xa3014314
                  |L6.1992|
                          DCD      0x4e0811a1
                  |L6.1996|
                          DCD      0xf7537e82
                  |L6.2000|
                          DCD      0xbd3af235
                  |L6.2004|
                          DCD      0x2ad7d2bb
                  |L6.2008|
                          DCD      0xeb86d391

                          AREA ||i.MD5Update||, CODE, READONLY, ALIGN=1

                  MD5Update PROC
;;;115    */   
;;;116    void MD5Update(MD5_CTX *context,unsigned char * input,unsigned int inputLen)   
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;117    {   
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;118    	unsigned int i, index, partLen;   
;;;119    	/* Compute number of bytes mod 64 */   
;;;120    	/*计算已有信息的bits长度的字节数的模64, 64bytes=512bits。  
;;;121    	用于判断已有信息加上当前传过来的信息的总长度能不能达到512bits，  
;;;122    	如果能够达到则对凑够的512bits进行一次处理*/   
;;;123    	index = (unsigned int)((context->count[0] >> 3) & 0x3F);   
00000a  8a20              LDRH     r0,[r4,#0x10]
00000c  f3c009c5          UBFX     r9,r0,#3,#6
;;;124    	   
;;;125    	/* Update number of bits *//*更新已有信息的bits长度*/   
;;;126    	if((context->count[0] += ((UINT4)inputLen << 3)) < ((UINT4)inputLen << 3))   
000010  6920              LDR      r0,[r4,#0x10]
000012  eb0000c5          ADD      r0,r0,r5,LSL #3
000016  6120              STR      r0,[r4,#0x10]
000018  ebb00fc5          CMP      r0,r5,LSL #3
00001c  d202              BCS      |L7.36|
;;;127    	context->count[1]++;   
00001e  6960              LDR      r0,[r4,#0x14]
000020  1c40              ADDS     r0,r0,#1
000022  6160              STR      r0,[r4,#0x14]
                  |L7.36|
;;;128    	context->count[1] += ((UINT4)inputLen >> 29);   
000024  6960              LDR      r0,[r4,#0x14]
000026  eb007155          ADD      r1,r0,r5,LSR #29
00002a  6161              STR      r1,[r4,#0x14]
;;;129    	   
;;;130    	/*计算已有的字节数长度还差多少字节可以 凑成64的整倍数*/   
;;;131    	partLen = 64 - index;   
00002c  f1c90740          RSB      r7,r9,#0x40
;;;132    	   
;;;133    	/* Transform as many times as possible.  
;;;134    	*/   
;;;135    	/*如果当前输入的字节数 大于 已有字节数长度补足64字节整倍数所差的字节数*/   
;;;136    	if(inputLen >= partLen)    
000030  42bd              CMP      r5,r7
000032  d31b              BCC      |L7.108|
;;;137    	{   
;;;138    		/*用当前输入的内容把context->buffer的内容补足512bits*/   
;;;139    		R_memcpy((POINTER)&context->buffer[index], (POINTER)input, partLen);   
000034  f1040118          ADD      r1,r4,#0x18
000038  eb010009          ADD      r0,r1,r9
00003c  463a              MOV      r2,r7
00003e  4641              MOV      r1,r8
000040  f7fffffe          BL       __aeabi_memcpy
;;;140    		/*用基本函数对填充满的512bits（已经保存到context->buffer中） 做一次转换，转换结果保存到context->state中*/   
;;;141    		MD5Transform(context->state, context->buffer);   
000044  f1040118          ADD      r1,r4,#0x18
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       MD5Transform
;;;142    		   
;;;143    		/*  
;;;144    		对当前输入的剩余字节做转换（如果剩余的字节<在输入的input缓冲区中>大于512bits的话 ），  
;;;145    		转换结果保存到context->state中  
;;;146    		*/   
;;;147    		for(i = partLen; i + 63 < inputLen; i += 64)/*把i+63<inputlen改为i+64<=inputlen更容易理解*/   
00004e  463e              MOV      r6,r7
000050  e005              B        |L7.94|
                  |L7.82|
;;;148    		MD5Transform(context->state, &input[i]);   
000052  eb080106          ADD      r1,r8,r6
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       MD5Transform
00005c  3640              ADDS     r6,r6,#0x40           ;147
                  |L7.94|
00005e  f106003f          ADD      r0,r6,#0x3f           ;147
000062  42a8              CMP      r0,r5                 ;147
000064  d3f5              BCC      |L7.82|
;;;149    		   
;;;150    		index = 0;   
000066  f04f0900          MOV      r9,#0
00006a  e000              B        |L7.110|
                  |L7.108|
;;;151    	}   
;;;152    	else   
;;;153    	i = 0;   
00006c  2600              MOVS     r6,#0
                  |L7.110|
;;;154    	   
;;;155    	/* Buffer remaining input */   
;;;156    	/*将输入缓冲区中的不足填充满512bits的剩余内容填充到context->buffer中，留待以后再作处理*/   
;;;157    	R_memcpy((POINTER)&context->buffer[index], (POINTER)&input[i], inputLen-i);   
00006e  1baa              SUBS     r2,r5,r6
000070  eb080106          ADD      r1,r8,r6
000074  f1040318          ADD      r3,r4,#0x18
000078  eb030009          ADD      r0,r3,r9
00007c  f7fffffe          BL       __aeabi_memcpy
;;;158    }   
000080  e8bd87f0          POP      {r4-r10,pc}
;;;159       
                          ENDP


                          AREA ||i.MakeFile_MD5_Checksum||, CODE, READONLY, ALIGN=2

                  MakeFile_MD5_Checksum PROC
;;;346    ////////////////////////////////////////////////////////////////////////////////   
;;;347    MD5_CHECK MakeFile_MD5_Checksum(u8 *pPacket, u32 pPacket_len)   
000000  b570              PUSH     {r4-r6,lr}
;;;348    {   
000002  b098              SUB      sp,sp,#0x60
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;349    	MD5_CTX md5; 
;;;350    	u8 i,j;  
;;;351    	unsigned char decrypt[MD5_CODE_LEN]; //存放加密后的结果 
;;;352    	u8 aes[16];
;;;353    
;;;354    	MD5Init(&md5); //初始化用于md5加密的结构  
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       MD5Init
;;;355    	MD5Update(&md5,(pPacket),pPacket_len); //对欲加密的字符进行加密   
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  a802              ADD      r0,sp,#8
000014  f7fffffe          BL       MD5Update
;;;356    	MD5Final(decrypt,&md5); //获得最终结果   
000018  a902              ADD      r1,sp,#8
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       MD5Final
;;;357    
;;;358    	for(i=0;i<8;i++)  
000020  2000              MOVS     r0,#0
000022  4604              MOV      r4,r0
000024  e013              B        |L8.78|
                  |L8.38|
;;;359      {  
;;;360    		
;;;361    		aesKey[2*i]=bcd2ascii[decrypt[i]>>4];
000026  f81d0004          LDRB     r0,[sp,r4]
00002a  490b              LDR      r1,|L8.88|
00002c  eb011020          ADD      r0,r1,r0,ASR #4
000030  7800              LDRB     r0,[r0,#0]
000032  4a0a              LDR      r2,|L8.92|
000034  f8020014          STRB     r0,[r2,r4,LSL #1]
;;;362    		aesKey[2*i+1]=bcd2ascii[decrypt[i]&0x0f];
000038  f81d0004          LDRB     r0,[sp,r4]
00003c  f000000f          AND      r0,r0,#0xf
000040  5c09              LDRB     r1,[r1,r0]
000042  0060              LSLS     r0,r4,#1
000044  1c40              ADDS     r0,r0,#1
000046  5411              STRB     r1,[r2,r0]
000048  1c60              ADDS     r0,r4,#1              ;358
00004a  b2c0              UXTB     r0,r0                 ;358
00004c  4604              MOV      r4,r0                 ;358
                  |L8.78|
00004e  2c08              CMP      r4,#8                 ;358
000050  dbe9              BLT      |L8.38|
;;;363    	
;;;364    		
;;;365      } 				
;;;366    	
;;;367    
;;;368    }   
000052  b018              ADD      sp,sp,#0x60
000054  bd70              POP      {r4-r6,pc}
                          ENDP

000056  0000              DCW      0x0000
                  |L8.88|
                          DCD      bcd2ascii
                  |L8.92|
                          DCD      aesKey

                          AREA ||.data||, DATA, ALIGN=0

                  bcd2ascii
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38396162          DCB      0x38,0x39,0x61,0x62
00000c  63646566          DCB      0x63,0x64,0x65,0x66
                  PADDING
000010  80000000          DCB      0x80,0x00,0x00,0x00
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00
00003c  00000000          DCB      0x00,0x00,0x00,0x00
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
