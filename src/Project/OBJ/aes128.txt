; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\aes128.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\aes128.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\aes128.crf ..\tplib\aes128.c]
                          THUMB

                          AREA ||i.AES_CBC_decrypt_buffer||, CODE, READONLY, ALIGN=1

                  AES_CBC_decrypt_buffer PROC
;;;519    
;;;520    void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf,  uint32_t length)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;521    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;522      uintptr_t i;
;;;523      uint8_t storeNextIv[AES_BLOCKLEN];
;;;524      for (i = 0; i < length; i += AES_BLOCKLEN)
00000a  2700              MOVS     r7,#0
00000c  e015              B        |L1.58|
                  |L1.14|
;;;525      {
;;;526        memcpy(storeNextIv, buf, AES_BLOCKLEN);
00000e  2210              MOVS     r2,#0x10
000010  4629              MOV      r1,r5
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       __aeabi_memcpy
;;;527        InvCipher((state_t*)buf, ctx->RoundKey);
000018  4621              MOV      r1,r4
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       InvCipher
;;;528        XorWithIv(buf, ctx->Iv);
000020  f10401b0          ADD      r1,r4,#0xb0
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       XorWithIv
;;;529        memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
00002a  2210              MOVS     r2,#0x10
00002c  4669              MOV      r1,sp
00002e  f10400b0          ADD      r0,r4,#0xb0
000032  f7fffffe          BL       __aeabi_memcpy
;;;530        buf += AES_BLOCKLEN;
000036  3510              ADDS     r5,r5,#0x10
000038  3710              ADDS     r7,r7,#0x10           ;524
                  |L1.58|
00003a  42b7              CMP      r7,r6                 ;524
00003c  d3e7              BCC      |L1.14|
;;;531      }
;;;532    
;;;533    }
00003e  e8bd81ff          POP      {r0-r8,pc}
;;;534    
                          ENDP


                          AREA ||i.AES_CBC_encrypt_buffer||, CODE, READONLY, ALIGN=1

                  AES_CBC_encrypt_buffer PROC
;;;503    
;;;504    void AES_CBC_encrypt_buffer(struct AES_ctx *ctx,uint8_t* buf, uint32_t length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;505    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;506      uintptr_t i;
;;;507      uint8_t *Iv = ctx->Iv;
00000a  f10408b0          ADD      r8,r4,#0xb0
;;;508      for (i = 0; i < length; i += AES_BLOCKLEN)
00000e  2700              MOVS     r7,#0
000010  e00a              B        |L2.40|
                  |L2.18|
;;;509      {
;;;510        XorWithIv(buf, Iv);
000012  4641              MOV      r1,r8
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       XorWithIv
;;;511        Cipher((state_t*)buf, ctx->RoundKey);
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       Cipher
;;;512        Iv = buf;
000022  46a8              MOV      r8,r5
;;;513        buf += AES_BLOCKLEN;
000024  3510              ADDS     r5,r5,#0x10
000026  3710              ADDS     r7,r7,#0x10           ;508
                  |L2.40|
000028  42b7              CMP      r7,r6                 ;508
00002a  d3f2              BCC      |L2.18|
;;;514        //printf("Step %d - %d", i/16, i);
;;;515      }
;;;516      /* store Iv in ctx for next call */
;;;517      memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
00002c  2210              MOVS     r2,#0x10
00002e  4641              MOV      r1,r8
000030  f10400b0          ADD      r0,r4,#0xb0
000034  f7fffffe          BL       __aeabi_memcpy
;;;518    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;519    
                          ENDP


                          AREA ||i.AES_CTR_xcrypt_buffer||, CODE, READONLY, ALIGN=1

                  AES_CTR_xcrypt_buffer PROC
;;;541    /* Symmetrical operation: same function for encrypting as for decrypting. Note any IV/nonce should never be reused with the same key */
;;;542    void AES_CTR_xcrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, uint32_t length)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;543    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;544      uint8_t buffer[AES_BLOCKLEN];
;;;545      
;;;546      unsigned i;
;;;547      int bi;
;;;548      for (i = 0, bi = AES_BLOCKLEN; i < length; ++i, ++bi)
00000a  2600              MOVS     r6,#0
00000c  2410              MOVS     r4,#0x10
00000e  e02c              B        |L3.106|
                  |L3.16|
;;;549      {
;;;550        if (bi == AES_BLOCKLEN) /* we need to regen xor compliment in buffer */
000010  2c10              CMP      r4,#0x10
000012  d123              BNE      |L3.92|
;;;551        {
;;;552          
;;;553          memcpy(buffer, ctx->Iv, AES_BLOCKLEN);
000014  2210              MOVS     r2,#0x10
000016  f10501b0          ADD      r1,r5,#0xb0
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       __aeabi_memcpy
;;;554          Cipher((state_t*)buffer,ctx->RoundKey);
000020  4629              MOV      r1,r5
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       Cipher
;;;555    
;;;556          /* Increment Iv and handle overflow */
;;;557          for (bi = (AES_BLOCKLEN - 1); bi >= 0; --bi)
000028  240f              MOVS     r4,#0xf
00002a  e013              B        |L3.84|
                  |L3.44|
;;;558          {
;;;559    	/* inc will owerflow */
;;;560            if (ctx->Iv[bi] == 255)
00002c  f10500b0          ADD      r0,r5,#0xb0
000030  5d00              LDRB     r0,[r0,r4]
000032  28ff              CMP      r0,#0xff
000034  d104              BNE      |L3.64|
;;;561    	{
;;;562              ctx->Iv[bi] = 0;
000036  2100              MOVS     r1,#0
000038  f10500b0          ADD      r0,r5,#0xb0
00003c  5501              STRB     r1,[r0,r4]
;;;563              continue;
00003e  e008              B        |L3.82|
                  |L3.64|
;;;564            } 
;;;565            ctx->Iv[bi] += 1;
000040  f10500b0          ADD      r0,r5,#0xb0
000044  5d00              LDRB     r0,[r0,r4]
000046  1c40              ADDS     r0,r0,#1
000048  b2c1              UXTB     r1,r0
00004a  f10500b0          ADD      r0,r5,#0xb0
00004e  5501              STRB     r1,[r0,r4]
;;;566            break;   
000050  e002              B        |L3.88|
                  |L3.82|
000052  1e64              SUBS     r4,r4,#1              ;557
                  |L3.84|
000054  2c00              CMP      r4,#0                 ;557
000056  dae9              BGE      |L3.44|
                  |L3.88|
000058  bf00              NOP      
;;;567          }
;;;568          bi = 0;
00005a  2400              MOVS     r4,#0
                  |L3.92|
;;;569        }
;;;570    
;;;571        buf[i] = (buf[i] ^ buffer[bi]);
00005c  5db8              LDRB     r0,[r7,r6]
00005e  f81d1004          LDRB     r1,[sp,r4]
000062  4048              EORS     r0,r0,r1
000064  55b8              STRB     r0,[r7,r6]
000066  1c76              ADDS     r6,r6,#1              ;548
000068  1c64              ADDS     r4,r4,#1              ;548
                  |L3.106|
00006a  4546              CMP      r6,r8                 ;548
00006c  d3d0              BCC      |L3.16|
;;;572      }
;;;573    }
00006e  e8bd81ff          POP      {r0-r8,pc}
;;;574    
                          ENDP


                          AREA ||i.AES_ECB_decrypt||, CODE, READONLY, ALIGN=1

                  AES_ECB_decrypt PROC
;;;478    
;;;479    void AES_ECB_decrypt(struct AES_ctx* ctx,const uint8_t* buf)
000000  b570              PUSH     {r4-r6,lr}
;;;480    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;481      // The next function call decrypts the PlainText with the Key using AES algorithm.
;;;482      InvCipher((state_t*)buf, ctx->RoundKey);
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       InvCipher
;;;483    }
00000e  bd70              POP      {r4-r6,pc}
;;;484    
                          ENDP


                          AREA ||i.AES_ECB_encrypt||, CODE, READONLY, ALIGN=1

                  AES_ECB_encrypt PROC
;;;472    
;;;473    void AES_ECB_encrypt(struct AES_ctx *ctx,const uint8_t* buf)
000000  b570              PUSH     {r4-r6,lr}
;;;474    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;475      // The next function call encrypts the PlainText with the Key using AES algorithm.
;;;476      Cipher((state_t*)buf, ctx->RoundKey);
000006  4621              MOV      r1,r4
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       Cipher
;;;477    }
00000e  bd70              POP      {r4-r6,pc}
;;;478    
                          ENDP


                          AREA ||i.AES_ctx_set_iv||, CODE, READONLY, ALIGN=1

                  AES_ctx_set_iv PROC
;;;243    }
;;;244    void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv)
000000  b570              PUSH     {r4-r6,lr}
;;;245    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;246      memcpy (ctx->Iv, iv, AES_BLOCKLEN);
000006  2210              MOVS     r2,#0x10
000008  4629              MOV      r1,r5
00000a  f10400b0          ADD      r0,r4,#0xb0
00000e  f7fffffe          BL       __aeabi_memcpy
;;;247    }
000012  bd70              POP      {r4-r6,pc}
;;;248    #endif
                          ENDP


                          AREA ||i.AES_init_ctx||, CODE, READONLY, ALIGN=1

                  AES_init_ctx PROC
;;;233    
;;;234    void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
000000  b570              PUSH     {r4-r6,lr}
;;;235    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;236      KeyExpansion(ctx->RoundKey, key);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       KeyExpansion
;;;237    }
00000e  bd70              POP      {r4-r6,pc}
;;;238    #if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
                          ENDP


                          AREA ||i.AES_init_ctx_iv||, CODE, READONLY, ALIGN=1

                  AES_init_ctx_iv PROC
;;;238    #if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
;;;239    void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
000000  b570              PUSH     {r4-r6,lr}
;;;240    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;241      KeyExpansion(ctx->RoundKey, key);
000008  4631              MOV      r1,r6
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       KeyExpansion
;;;242      memcpy (ctx->Iv, iv, AES_BLOCKLEN);
000010  2210              MOVS     r2,#0x10
000012  4629              MOV      r1,r5
000014  f10400b0          ADD      r0,r4,#0xb0
000018  f7fffffe          BL       __aeabi_memcpy
;;;243    }
00001c  bd70              POP      {r4-r6,pc}
;;;244    void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv)
                          ENDP


                          AREA ||i.AddRoundKey||, CODE, READONLY, ALIGN=1

                  AddRoundKey PROC
;;;251    // The round key is added to the state by an XOR function.
;;;252    static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
000000  b570              PUSH     {r4-r6,lr}
;;;253    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;254      uint8_t i,j;
;;;255      for (i = 0; i < 4; ++i)
000006  2000              MOVS     r0,#0
000008  e013              B        |L9.50|
                  |L9.10|
;;;256      {
;;;257        for (j = 0; j < 4; ++j)
00000a  2100              MOVS     r1,#0
00000c  e00d              B        |L9.42|
                  |L9.14|
;;;258        {
;;;259          (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
00000e  0125              LSLS     r5,r4,#4
000010  eb050580          ADD      r5,r5,r0,LSL #2
000014  440d              ADD      r5,r5,r1
000016  5d55              LDRB     r5,[r2,r5]
000018  eb030680          ADD      r6,r3,r0,LSL #2
00001c  5c76              LDRB     r6,[r6,r1]
00001e  4075              EORS     r5,r5,r6
000020  eb030680          ADD      r6,r3,r0,LSL #2
000024  5475              STRB     r5,[r6,r1]
000026  1c4d              ADDS     r5,r1,#1              ;257
000028  b2e9              UXTB     r1,r5                 ;257
                  |L9.42|
00002a  2904              CMP      r1,#4                 ;257
00002c  dbef              BLT      |L9.14|
00002e  1c45              ADDS     r5,r0,#1              ;255
000030  b2e8              UXTB     r0,r5                 ;255
                  |L9.50|
000032  2804              CMP      r0,#4                 ;255
000034  dbe9              BLT      |L9.10|
;;;260        }
;;;261      }
;;;262    }
000036  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP


                          AREA ||i.Cipher||, CODE, READONLY, ALIGN=1

                  Cipher PROC
;;;415    // Cipher is the main function that encrypts the PlainText.
;;;416    static void Cipher(state_t* state, uint8_t* RoundKey)
000000  b570              PUSH     {r4-r6,lr}
;;;417    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;418      uint8_t round = 0;
000006  2400              MOVS     r4,#0
;;;419    
;;;420      // Add the First round key to the state before starting the rounds.
;;;421      AddRoundKey(0, state, RoundKey); 
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       AddRoundKey
;;;422      
;;;423      // There will be Nr rounds.
;;;424      // The first Nr-1 rounds are identical.
;;;425      // These Nr-1 rounds are executed in the loop below.
;;;426      for (round = 1; round < Nr; ++round)
000012  2401              MOVS     r4,#1
000014  e00f              B        |L10.54|
                  |L10.22|
;;;427      {
;;;428        SubBytes(state);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       SubBytes
;;;429        ShiftRows(state);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       ShiftRows
;;;430        MixColumns(state);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       MixColumns
;;;431        AddRoundKey(round, state, RoundKey);
000028  4632              MOV      r2,r6
00002a  4629              MOV      r1,r5
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       AddRoundKey
000032  1c60              ADDS     r0,r4,#1              ;426
000034  b2c4              UXTB     r4,r0                 ;426
                  |L10.54|
000036  2c00              CMP      r4,#0                 ;426
000038  dbed              BLT      |L10.22|
;;;432      }
;;;433      
;;;434      // The last round is given below.
;;;435      // The MixColumns function is not here in the last round.
;;;436      SubBytes(state);
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       SubBytes
;;;437      ShiftRows(state);
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       ShiftRows
;;;438      AddRoundKey(Nr, state, RoundKey);
000046  4632              MOV      r2,r6
000048  4629              MOV      r1,r5
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       AddRoundKey
;;;439    }
000050  bd70              POP      {r4-r6,pc}
;;;440    
                          ENDP


                          AREA ||i.InvCipher||, CODE, READONLY, ALIGN=1

                  InvCipher PROC
;;;440    
;;;441    static void InvCipher(state_t* state,uint8_t* RoundKey)
000000  b570              PUSH     {r4-r6,lr}
;;;442    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;443      uint8_t round = 0;
000006  2400              MOVS     r4,#0
;;;444    
;;;445      // Add the First round key to the state before starting the rounds.
;;;446      AddRoundKey(Nr, state, RoundKey); 
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       AddRoundKey
;;;447    
;;;448      // There will be Nr rounds.
;;;449      // The first Nr-1 rounds are identical.
;;;450      // These Nr-1 rounds are executed in the loop below.
;;;451      for (round = (Nr - 1); round > 0; --round)
000012  24ff              MOVS     r4,#0xff
000014  e00f              B        |L11.54|
                  |L11.22|
;;;452      {
;;;453        InvShiftRows(state);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       InvShiftRows
;;;454        InvSubBytes(state);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       InvSubBytes
;;;455        AddRoundKey(round, state, RoundKey);
000022  4632              MOV      r2,r6
000024  4629              MOV      r1,r5
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       AddRoundKey
;;;456        InvMixColumns(state);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       InvMixColumns
000032  1e60              SUBS     r0,r4,#1              ;451
000034  b2c4              UXTB     r4,r0                 ;451
                  |L11.54|
000036  2c00              CMP      r4,#0                 ;451
000038  dced              BGT      |L11.22|
;;;457      }
;;;458      
;;;459      // The last round is given below.
;;;460      // The MixColumns function is not here in the last round.
;;;461      InvShiftRows(state);
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       InvShiftRows
;;;462      InvSubBytes(state);
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       InvSubBytes
;;;463      AddRoundKey(0, state, RoundKey);
000046  4632              MOV      r2,r6
000048  4629              MOV      r1,r5
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       AddRoundKey
;;;464    }
000050  bd70              POP      {r4-r6,pc}
;;;465    
                          ENDP


                          AREA ||i.InvMixColumns||, CODE, READONLY, ALIGN=1

                  InvMixColumns PROC
;;;352    // Please use the references to gain more information.
;;;353    static void InvMixColumns(state_t* state)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;354    {
000002  b088              SUB      sp,sp,#0x20
;;;355      int i;
;;;356      uint8_t a, b, c, d;
;;;357      for (i = 0; i < 4; ++i)
000004  2000              MOVS     r0,#0
000006  9007              STR      r0,[sp,#0x1c]
000008  e244              B        |L12.1172|
                  |L12.10|
;;;358      { 
;;;359        a = (*state)[i][0];
00000a  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
00000e  f8100021          LDRB     r0,[r0,r1,LSL #2]
000012  9006              STR      r0,[sp,#0x18]
;;;360        b = (*state)[i][1];
000014  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
000018  eb000081          ADD      r0,r0,r1,LSL #2
00001c  7840              LDRB     r0,[r0,#1]
00001e  9005              STR      r0,[sp,#0x14]
;;;361        c = (*state)[i][2];
000020  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
000024  eb000081          ADD      r0,r0,r1,LSL #2
000028  7880              LDRB     r0,[r0,#2]
00002a  9004              STR      r0,[sp,#0x10]
;;;362        d = (*state)[i][3];
00002c  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
000030  eb000081          ADD      r0,r0,r1,LSL #2
000034  78c0              LDRB     r0,[r0,#3]
000036  9003              STR      r0,[sp,#0xc]
;;;363    
;;;364        (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
000038  9806              LDR      r0,[sp,#0x18]
00003a  f7fffffe          BL       xtime
00003e  4604              MOV      r4,r0
000040  9806              LDR      r0,[sp,#0x18]
000042  f7fffffe          BL       xtime
000046  9002              STR      r0,[sp,#8]
000048  f7fffffe          BL       xtime
00004c  4044              EORS     r4,r4,r0
00004e  9806              LDR      r0,[sp,#0x18]
000050  f7fffffe          BL       xtime
000054  9001              STR      r0,[sp,#4]
000056  f7fffffe          BL       xtime
00005a  9002              STR      r0,[sp,#8]
00005c  f7fffffe          BL       xtime
000060  4044              EORS     r4,r4,r0
000062  9806              LDR      r0,[sp,#0x18]
000064  f7fffffe          BL       xtime
000068  9000              STR      r0,[sp,#0]
00006a  f7fffffe          BL       xtime
00006e  9001              STR      r0,[sp,#4]
000070  f7fffffe          BL       xtime
000074  9002              STR      r0,[sp,#8]
000076  f7fffffe          BL       xtime
00007a  9805              LDR      r0,[sp,#0x14]
00007c  f7fffffe          BL       xtime
000080  4605              MOV      r5,r0
000082  9805              LDR      r0,[sp,#0x14]
000084  4045              EORS     r5,r5,r0
000086  f7fffffe          BL       xtime
00008a  9002              STR      r0,[sp,#8]
00008c  f7fffffe          BL       xtime
000090  9805              LDR      r0,[sp,#0x14]
000092  f7fffffe          BL       xtime
000096  9001              STR      r0,[sp,#4]
000098  f7fffffe          BL       xtime
00009c  9002              STR      r0,[sp,#8]
00009e  f7fffffe          BL       xtime
0000a2  4045              EORS     r5,r5,r0
0000a4  9805              LDR      r0,[sp,#0x14]
0000a6  f7fffffe          BL       xtime
0000aa  9000              STR      r0,[sp,#0]
0000ac  f7fffffe          BL       xtime
0000b0  9001              STR      r0,[sp,#4]
0000b2  f7fffffe          BL       xtime
0000b6  9002              STR      r0,[sp,#8]
0000b8  f7fffffe          BL       xtime
0000bc  406c              EORS     r4,r4,r5
0000be  9804              LDR      r0,[sp,#0x10]
0000c0  f7fffffe          BL       xtime
0000c4  9804              LDR      r0,[sp,#0x10]
0000c6  4605              MOV      r5,r0
0000c8  f7fffffe          BL       xtime
0000cc  9002              STR      r0,[sp,#8]
0000ce  f7fffffe          BL       xtime
0000d2  4045              EORS     r5,r5,r0
0000d4  9804              LDR      r0,[sp,#0x10]
0000d6  f7fffffe          BL       xtime
0000da  9001              STR      r0,[sp,#4]
0000dc  f7fffffe          BL       xtime
0000e0  9002              STR      r0,[sp,#8]
0000e2  f7fffffe          BL       xtime
0000e6  4045              EORS     r5,r5,r0
0000e8  9804              LDR      r0,[sp,#0x10]
0000ea  f7fffffe          BL       xtime
0000ee  9000              STR      r0,[sp,#0]
0000f0  f7fffffe          BL       xtime
0000f4  9001              STR      r0,[sp,#4]
0000f6  f7fffffe          BL       xtime
0000fa  9002              STR      r0,[sp,#8]
0000fc  f7fffffe          BL       xtime
000100  406c              EORS     r4,r4,r5
000102  9803              LDR      r0,[sp,#0xc]
000104  f7fffffe          BL       xtime
000108  9803              LDR      r0,[sp,#0xc]
00010a  4605              MOV      r5,r0
00010c  f7fffffe          BL       xtime
000110  9002              STR      r0,[sp,#8]
000112  f7fffffe          BL       xtime
000116  9803              LDR      r0,[sp,#0xc]
000118  f7fffffe          BL       xtime
00011c  9001              STR      r0,[sp,#4]
00011e  f7fffffe          BL       xtime
000122  9002              STR      r0,[sp,#8]
000124  f7fffffe          BL       xtime
000128  4045              EORS     r5,r5,r0
00012a  9803              LDR      r0,[sp,#0xc]
00012c  f7fffffe          BL       xtime
000130  9000              STR      r0,[sp,#0]
000132  f7fffffe          BL       xtime
000136  9001              STR      r0,[sp,#4]
000138  f7fffffe          BL       xtime
00013c  9002              STR      r0,[sp,#8]
00013e  f7fffffe          BL       xtime
000142  406c              EORS     r4,r4,r5
000144  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
000148  f8004021          STRB     r4,[r0,r1,LSL #2]
;;;365        (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
00014c  9806              LDR      r0,[sp,#0x18]
00014e  f7fffffe          BL       xtime
000152  9806              LDR      r0,[sp,#0x18]
000154  4604              MOV      r4,r0
000156  f7fffffe          BL       xtime
00015a  9002              STR      r0,[sp,#8]
00015c  f7fffffe          BL       xtime
000160  9806              LDR      r0,[sp,#0x18]
000162  f7fffffe          BL       xtime
000166  9001              STR      r0,[sp,#4]
000168  f7fffffe          BL       xtime
00016c  9002              STR      r0,[sp,#8]
00016e  f7fffffe          BL       xtime
000172  4044              EORS     r4,r4,r0
000174  9806              LDR      r0,[sp,#0x18]
000176  f7fffffe          BL       xtime
00017a  9000              STR      r0,[sp,#0]
00017c  f7fffffe          BL       xtime
000180  9001              STR      r0,[sp,#4]
000182  f7fffffe          BL       xtime
000186  9002              STR      r0,[sp,#8]
000188  f7fffffe          BL       xtime
00018c  9805              LDR      r0,[sp,#0x14]
00018e  f7fffffe          BL       xtime
000192  4605              MOV      r5,r0
000194  9805              LDR      r0,[sp,#0x14]
000196  f7fffffe          BL       xtime
00019a  9002              STR      r0,[sp,#8]
00019c  f7fffffe          BL       xtime
0001a0  4045              EORS     r5,r5,r0
0001a2  9805              LDR      r0,[sp,#0x14]
0001a4  f7fffffe          BL       xtime
0001a8  9001              STR      r0,[sp,#4]
0001aa  f7fffffe          BL       xtime
0001ae  9002              STR      r0,[sp,#8]
0001b0  f7fffffe          BL       xtime
0001b4  4045              EORS     r5,r5,r0
0001b6  9805              LDR      r0,[sp,#0x14]
0001b8  f7fffffe          BL       xtime
0001bc  9000              STR      r0,[sp,#0]
0001be  f7fffffe          BL       xtime
0001c2  9001              STR      r0,[sp,#4]
0001c4  f7fffffe          BL       xtime
0001c8  9002              STR      r0,[sp,#8]
0001ca  f7fffffe          BL       xtime
0001ce  406c              EORS     r4,r4,r5
0001d0  9804              LDR      r0,[sp,#0x10]
0001d2  f7fffffe          BL       xtime
0001d6  4605              MOV      r5,r0
0001d8  9804              LDR      r0,[sp,#0x10]
0001da  4045              EORS     r5,r5,r0
0001dc  f7fffffe          BL       xtime
0001e0  9002              STR      r0,[sp,#8]
0001e2  f7fffffe          BL       xtime
0001e6  9804              LDR      r0,[sp,#0x10]
0001e8  f7fffffe          BL       xtime
0001ec  9001              STR      r0,[sp,#4]
0001ee  f7fffffe          BL       xtime
0001f2  9002              STR      r0,[sp,#8]
0001f4  f7fffffe          BL       xtime
0001f8  4045              EORS     r5,r5,r0
0001fa  9804              LDR      r0,[sp,#0x10]
0001fc  f7fffffe          BL       xtime
000200  9000              STR      r0,[sp,#0]
000202  f7fffffe          BL       xtime
000206  9001              STR      r0,[sp,#4]
000208  f7fffffe          BL       xtime
00020c  9002              STR      r0,[sp,#8]
00020e  f7fffffe          BL       xtime
000212  406c              EORS     r4,r4,r5
000214  9803              LDR      r0,[sp,#0xc]
000216  f7fffffe          BL       xtime
00021a  9803              LDR      r0,[sp,#0xc]
00021c  4605              MOV      r5,r0
00021e  f7fffffe          BL       xtime
000222  9002              STR      r0,[sp,#8]
000224  f7fffffe          BL       xtime
000228  4045              EORS     r5,r5,r0
00022a  9803              LDR      r0,[sp,#0xc]
00022c  f7fffffe          BL       xtime
000230  9001              STR      r0,[sp,#4]
000232  f7fffffe          BL       xtime
000236  9002              STR      r0,[sp,#8]
000238  f7fffffe          BL       xtime
00023c  4045              EORS     r5,r5,r0
00023e  9803              LDR      r0,[sp,#0xc]
000240  f7fffffe          BL       xtime
000244  9000              STR      r0,[sp,#0]
000246  f7fffffe          BL       xtime
00024a  9001              STR      r0,[sp,#4]
00024c  f7fffffe          BL       xtime
000250  9002              STR      r0,[sp,#8]
000252  f7fffffe          BL       xtime
000256  406c              EORS     r4,r4,r5
000258  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
00025c  eb000081          ADD      r0,r0,r1,LSL #2
000260  7044              STRB     r4,[r0,#1]
;;;366        (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
000262  9806              LDR      r0,[sp,#0x18]
000264  f7fffffe          BL       xtime
000268  9806              LDR      r0,[sp,#0x18]
00026a  4604              MOV      r4,r0
00026c  f7fffffe          BL       xtime
000270  9002              STR      r0,[sp,#8]
000272  f7fffffe          BL       xtime
000276  4044              EORS     r4,r4,r0
000278  9806              LDR      r0,[sp,#0x18]
00027a  f7fffffe          BL       xtime
00027e  9001              STR      r0,[sp,#4]
000280  f7fffffe          BL       xtime
000284  9002              STR      r0,[sp,#8]
000286  f7fffffe          BL       xtime
00028a  4044              EORS     r4,r4,r0
00028c  9806              LDR      r0,[sp,#0x18]
00028e  f7fffffe          BL       xtime
000292  9000              STR      r0,[sp,#0]
000294  f7fffffe          BL       xtime
000298  9001              STR      r0,[sp,#4]
00029a  f7fffffe          BL       xtime
00029e  9002              STR      r0,[sp,#8]
0002a0  f7fffffe          BL       xtime
0002a4  9805              LDR      r0,[sp,#0x14]
0002a6  f7fffffe          BL       xtime
0002aa  9805              LDR      r0,[sp,#0x14]
0002ac  4605              MOV      r5,r0
0002ae  f7fffffe          BL       xtime
0002b2  9002              STR      r0,[sp,#8]
0002b4  f7fffffe          BL       xtime
0002b8  9805              LDR      r0,[sp,#0x14]
0002ba  f7fffffe          BL       xtime
0002be  9001              STR      r0,[sp,#4]
0002c0  f7fffffe          BL       xtime
0002c4  9002              STR      r0,[sp,#8]
0002c6  f7fffffe          BL       xtime
0002ca  4045              EORS     r5,r5,r0
0002cc  9805              LDR      r0,[sp,#0x14]
0002ce  f7fffffe          BL       xtime
0002d2  9000              STR      r0,[sp,#0]
0002d4  f7fffffe          BL       xtime
0002d8  9001              STR      r0,[sp,#4]
0002da  f7fffffe          BL       xtime
0002de  9002              STR      r0,[sp,#8]
0002e0  f7fffffe          BL       xtime
0002e4  406c              EORS     r4,r4,r5
0002e6  9804              LDR      r0,[sp,#0x10]
0002e8  f7fffffe          BL       xtime
0002ec  4605              MOV      r5,r0
0002ee  9804              LDR      r0,[sp,#0x10]
0002f0  f7fffffe          BL       xtime
0002f4  9002              STR      r0,[sp,#8]
0002f6  f7fffffe          BL       xtime
0002fa  4045              EORS     r5,r5,r0
0002fc  9804              LDR      r0,[sp,#0x10]
0002fe  f7fffffe          BL       xtime
000302  9001              STR      r0,[sp,#4]
000304  f7fffffe          BL       xtime
000308  9002              STR      r0,[sp,#8]
00030a  f7fffffe          BL       xtime
00030e  4045              EORS     r5,r5,r0
000310  9804              LDR      r0,[sp,#0x10]
000312  f7fffffe          BL       xtime
000316  9000              STR      r0,[sp,#0]
000318  f7fffffe          BL       xtime
00031c  9001              STR      r0,[sp,#4]
00031e  f7fffffe          BL       xtime
000322  9002              STR      r0,[sp,#8]
000324  f7fffffe          BL       xtime
000328  406c              EORS     r4,r4,r5
00032a  9803              LDR      r0,[sp,#0xc]
00032c  f7fffffe          BL       xtime
000330  4605              MOV      r5,r0
000332  9803              LDR      r0,[sp,#0xc]
000334  4045              EORS     r5,r5,r0
000336  f7fffffe          BL       xtime
00033a  9002              STR      r0,[sp,#8]
00033c  f7fffffe          BL       xtime
000340  9803              LDR      r0,[sp,#0xc]
000342  f7fffffe          BL       xtime
000346  9001              STR      r0,[sp,#4]
000348  f7fffffe          BL       xtime
00034c  9002              STR      r0,[sp,#8]
00034e  f7fffffe          BL       xtime
000352  4045              EORS     r5,r5,r0
000354  9803              LDR      r0,[sp,#0xc]
000356  f7fffffe          BL       xtime
00035a  9000              STR      r0,[sp,#0]
00035c  f7fffffe          BL       xtime
000360  9001              STR      r0,[sp,#4]
000362  f7fffffe          BL       xtime
000366  9002              STR      r0,[sp,#8]
000368  f7fffffe          BL       xtime
00036c  406c              EORS     r4,r4,r5
00036e  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
000372  eb000081          ADD      r0,r0,r1,LSL #2
000376  7084              STRB     r4,[r0,#2]
;;;367        (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
000378  9806              LDR      r0,[sp,#0x18]
00037a  f7fffffe          BL       xtime
00037e  4604              MOV      r4,r0
000380  9806              LDR      r0,[sp,#0x18]
000382  4044              EORS     r4,r4,r0
000384  f7fffffe          BL       xtime
000388  9002              STR      r0,[sp,#8]
00038a  f7fffffe          BL       xtime
00038e  9806              LDR      r0,[sp,#0x18]
000390  f7fffffe          BL       xtime
000394  9001              STR      r0,[sp,#4]
000396  f7fffffe          BL       xtime
00039a  9002              STR      r0,[sp,#8]
00039c  f7fffffe          BL       xtime
0003a0  4044              EORS     r4,r4,r0
0003a2  9806              LDR      r0,[sp,#0x18]
0003a4  f7fffffe          BL       xtime
0003a8  9000              STR      r0,[sp,#0]
0003aa  f7fffffe          BL       xtime
0003ae  9001              STR      r0,[sp,#4]
0003b0  f7fffffe          BL       xtime
0003b4  9002              STR      r0,[sp,#8]
0003b6  f7fffffe          BL       xtime
0003ba  9805              LDR      r0,[sp,#0x14]
0003bc  f7fffffe          BL       xtime
0003c0  9805              LDR      r0,[sp,#0x14]
0003c2  4605              MOV      r5,r0
0003c4  f7fffffe          BL       xtime
0003c8  9002              STR      r0,[sp,#8]
0003ca  f7fffffe          BL       xtime
0003ce  4045              EORS     r5,r5,r0
0003d0  9805              LDR      r0,[sp,#0x14]
0003d2  f7fffffe          BL       xtime
0003d6  9001              STR      r0,[sp,#4]
0003d8  f7fffffe          BL       xtime
0003dc  9002              STR      r0,[sp,#8]
0003de  f7fffffe          BL       xtime
0003e2  4045              EORS     r5,r5,r0
0003e4  9805              LDR      r0,[sp,#0x14]
0003e6  f7fffffe          BL       xtime
0003ea  9000              STR      r0,[sp,#0]
0003ec  f7fffffe          BL       xtime
0003f0  9001              STR      r0,[sp,#4]
0003f2  f7fffffe          BL       xtime
0003f6  9002              STR      r0,[sp,#8]
0003f8  f7fffffe          BL       xtime
0003fc  406c              EORS     r4,r4,r5
0003fe  9804              LDR      r0,[sp,#0x10]
000400  f7fffffe          BL       xtime
000404  9804              LDR      r0,[sp,#0x10]
000406  4605              MOV      r5,r0
000408  f7fffffe          BL       xtime
00040c  9002              STR      r0,[sp,#8]
00040e  f7fffffe          BL       xtime
000412  9804              LDR      r0,[sp,#0x10]
000414  f7fffffe          BL       xtime
000418  9001              STR      r0,[sp,#4]
00041a  f7fffffe          BL       xtime
00041e  9002              STR      r0,[sp,#8]
000420  f7fffffe          BL       xtime
000424  4045              EORS     r5,r5,r0
000426  9804              LDR      r0,[sp,#0x10]
000428  f7fffffe          BL       xtime
00042c  9000              STR      r0,[sp,#0]
00042e  f7fffffe          BL       xtime
000432  9001              STR      r0,[sp,#4]
000434  f7fffffe          BL       xtime
000438  9002              STR      r0,[sp,#8]
00043a  f7fffffe          BL       xtime
00043e  406c              EORS     r4,r4,r5
000440  9803              LDR      r0,[sp,#0xc]
000442  f7fffffe          BL       xtime
000446  4605              MOV      r5,r0
000448  9803              LDR      r0,[sp,#0xc]
00044a  f7fffffe          BL       xtime
00044e  9002              STR      r0,[sp,#8]
000450  f7fffffe          BL       xtime
000454  4045              EORS     r5,r5,r0
000456  9803              LDR      r0,[sp,#0xc]
000458  f7fffffe          BL       xtime
00045c  9001              STR      r0,[sp,#4]
00045e  f7fffffe          BL       xtime
000462  9002              STR      r0,[sp,#8]
000464  f7fffffe          BL       xtime
000468  4045              EORS     r5,r5,r0
00046a  9803              LDR      r0,[sp,#0xc]
00046c  f7fffffe          BL       xtime
000470  9000              STR      r0,[sp,#0]
000472  f7fffffe          BL       xtime
000476  9001              STR      r0,[sp,#4]
000478  f7fffffe          BL       xtime
00047c  9002              STR      r0,[sp,#8]
00047e  f7fffffe          BL       xtime
000482  406c              EORS     r4,r4,r5
000484  e9dd1007          LDRD     r1,r0,[sp,#0x1c]
000488  eb000081          ADD      r0,r0,r1,LSL #2
00048c  70c4              STRB     r4,[r0,#3]
00048e  9807              LDR      r0,[sp,#0x1c]         ;357
000490  1c40              ADDS     r0,r0,#1              ;357
000492  9007              STR      r0,[sp,#0x1c]         ;357
                  |L12.1172|
000494  9807              LDR      r0,[sp,#0x1c]         ;357
000496  2804              CMP      r0,#4                 ;357
000498  f6ffadb7          BLT      |L12.10|
;;;368      }
;;;369    }
00049c  b009              ADD      sp,sp,#0x24
00049e  bd30              POP      {r4,r5,pc}
;;;370    
                          ENDP


                          AREA ||i.InvShiftRows||, CODE, READONLY, ALIGN=1

                  InvShiftRows PROC
;;;385    
;;;386    static void InvShiftRows(state_t* state)
000000  7b41              LDRB     r1,[r0,#0xd]
;;;387    {
;;;388      uint8_t temp;
;;;389    
;;;390      // Rotate first row 1 columns to right  
;;;391      temp = (*state)[3][1];
;;;392      (*state)[3][1] = (*state)[2][1];
000002  7a43              LDRB     r3,[r0,#9]
000004  7343              STRB     r3,[r0,#0xd]
;;;393      (*state)[2][1] = (*state)[1][1];
000006  7943              LDRB     r3,[r0,#5]
000008  7243              STRB     r3,[r0,#9]
;;;394      (*state)[1][1] = (*state)[0][1];
00000a  7843              LDRB     r3,[r0,#1]
00000c  7143              STRB     r3,[r0,#5]
;;;395      (*state)[0][1] = temp;
00000e  7041              STRB     r1,[r0,#1]
;;;396    
;;;397      // Rotate second row 2 columns to right 
;;;398      temp = (*state)[0][2];
000010  7881              LDRB     r1,[r0,#2]
;;;399      (*state)[0][2] = (*state)[2][2];
000012  7a82              LDRB     r2,[r0,#0xa]
000014  7082              STRB     r2,[r0,#2]
;;;400      (*state)[2][2] = temp;
000016  7281              STRB     r1,[r0,#0xa]
;;;401    
;;;402      temp = (*state)[1][2];
000018  7981              LDRB     r1,[r0,#6]
;;;403      (*state)[1][2] = (*state)[3][2];
00001a  7b83              LDRB     r3,[r0,#0xe]
00001c  7183              STRB     r3,[r0,#6]
;;;404      (*state)[3][2] = temp;
00001e  7381              STRB     r1,[r0,#0xe]
;;;405    
;;;406      // Rotate third row 3 columns to right
;;;407      temp = (*state)[0][3];
000020  78c1              LDRB     r1,[r0,#3]
;;;408      (*state)[0][3] = (*state)[1][3];
000022  79c2              LDRB     r2,[r0,#7]
000024  70c2              STRB     r2,[r0,#3]
;;;409      (*state)[1][3] = (*state)[2][3];
000026  7ac3              LDRB     r3,[r0,#0xb]
000028  71c3              STRB     r3,[r0,#7]
;;;410      (*state)[2][3] = (*state)[3][3];
00002a  7bc3              LDRB     r3,[r0,#0xf]
00002c  72c3              STRB     r3,[r0,#0xb]
;;;411      (*state)[3][3] = temp;
00002e  73c1              STRB     r1,[r0,#0xf]
;;;412    }
000030  4770              BX       lr
;;;413    
                          ENDP


                          AREA ||i.InvSubBytes||, CODE, READONLY, ALIGN=2

                  InvSubBytes PROC
;;;373    // state matrix with values in an S-box.
;;;374    static void InvSubBytes(state_t* state)
000000  b510              PUSH     {r4,lr}
;;;375    {
000002  4602              MOV      r2,r0
;;;376      uint8_t i, j;
;;;377      for (i = 0; i < 4; ++i)
000004  2000              MOVS     r0,#0
000006  e00f              B        |L14.40|
                  |L14.8|
;;;378      {
;;;379        for (j = 0; j < 4; ++j)
000008  2100              MOVS     r1,#0
00000a  e009              B        |L14.32|
                  |L14.12|
;;;380        {
;;;381          (*state)[j][i] = getSBoxInvert((*state)[j][i]);
00000c  eb020381          ADD      r3,r2,r1,LSL #2
000010  5c1b              LDRB     r3,[r3,r0]
000012  4c07              LDR      r4,|L14.48|
000014  5ce3              LDRB     r3,[r4,r3]
000016  eb020481          ADD      r4,r2,r1,LSL #2
00001a  5423              STRB     r3,[r4,r0]
00001c  1c4b              ADDS     r3,r1,#1              ;379
00001e  b2d9              UXTB     r1,r3                 ;379
                  |L14.32|
000020  2904              CMP      r1,#4                 ;379
000022  dbf3              BLT      |L14.12|
000024  1c43              ADDS     r3,r0,#1              ;377
000026  b2d8              UXTB     r0,r3                 ;377
                  |L14.40|
000028  2804              CMP      r0,#4                 ;377
00002a  dbed              BLT      |L14.8|
;;;382        }
;;;383      }
;;;384    }
00002c  bd10              POP      {r4,pc}
;;;385    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      rsbox

                          AREA ||i.KeyExpansion||, CODE, READONLY, ALIGN=2

                  KeyExpansion PROC
;;;160    // This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
;;;161    static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
000000  b5f8              PUSH     {r3-r7,lr}
;;;162    {
000002  460c              MOV      r4,r1
;;;163      unsigned i, j, k;
;;;164      uint8_t tempa[4]; // Used for the column/row operations
;;;165      
;;;166      // The first round key is the key itself.
;;;167      for (i = 0; i < Nk; ++i)
000004  2200              MOVS     r2,#0
000006  bf00              NOP      
000008  bf00              NOP      
;;;168      {
;;;169        RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
;;;170        RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
;;;171        RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
;;;172        RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
;;;173      }
;;;174    
;;;175      // All other round keys are found from the previous round keys.
;;;176      for (i = Nk; i < Nb * (Nr + 1); ++i)
00000a  bf00              NOP      
00000c  e060              B        |L15.208|
                  |L15.14|
;;;177      {
;;;178        {
;;;179          k = (i - 1) * 4;
00000e  1e55              SUBS     r5,r2,#1
000010  00a9              LSLS     r1,r5,#2
;;;180          tempa[0]=RoundKey[k + 0];
000012  5c45              LDRB     r5,[r0,r1]
000014  f88d5000          STRB     r5,[sp,#0]
;;;181          tempa[1]=RoundKey[k + 1];
000018  1c4d              ADDS     r5,r1,#1
00001a  5d45              LDRB     r5,[r0,r5]
00001c  f88d5001          STRB     r5,[sp,#1]
;;;182          tempa[2]=RoundKey[k + 2];
000020  1c8d              ADDS     r5,r1,#2
000022  5d45              LDRB     r5,[r0,r5]
000024  f88d5002          STRB     r5,[sp,#2]
;;;183          tempa[3]=RoundKey[k + 3];
000028  1ccd              ADDS     r5,r1,#3
00002a  5d45              LDRB     r5,[r0,r5]
00002c  f88d5003          STRB     r5,[sp,#3]
;;;184    
;;;185        }
;;;186    
;;;187        if (i % Nk == 0)
000030  2500              MOVS     r5,#0
000032  fbb2f6f5          UDIV     r6,r2,r5
000036  fb052516          MLS      r5,r5,r6,r2
00003a  bb5d              CBNZ     r5,|L15.148|
;;;188        {
;;;189          // This function shifts the 4 bytes in a word to the left once.
;;;190          // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]
;;;191    
;;;192          // Function RotWord()
;;;193          {
;;;194            k = tempa[0];
00003c  f89d1000          LDRB     r1,[sp,#0]
;;;195            tempa[0] = tempa[1];
000040  f89d5001          LDRB     r5,[sp,#1]
000044  f88d5000          STRB     r5,[sp,#0]
;;;196            tempa[1] = tempa[2];
000048  f89d5002          LDRB     r5,[sp,#2]
00004c  f88d5001          STRB     r5,[sp,#1]
;;;197            tempa[2] = tempa[3];
000050  f89d5003          LDRB     r5,[sp,#3]
000054  f88d5002          STRB     r5,[sp,#2]
;;;198            tempa[3] = k;
000058  f88d1003          STRB     r1,[sp,#3]
;;;199          }
;;;200    
;;;201          // SubWord() is a function that takes a four-byte input word and 
;;;202          // applies the S-box to each of the four bytes to produce an output word.
;;;203    
;;;204          // Function Subword()
;;;205          {
;;;206            tempa[0] = getSBoxValue(tempa[0]);
00005c  f89d5000          LDRB     r5,[sp,#0]
000060  4e1d              LDR      r6,|L15.216|
000062  5d75              LDRB     r5,[r6,r5]
000064  f88d5000          STRB     r5,[sp,#0]
;;;207            tempa[1] = getSBoxValue(tempa[1]);
000068  f89d5001          LDRB     r5,[sp,#1]
00006c  5d75              LDRB     r5,[r6,r5]
00006e  f88d5001          STRB     r5,[sp,#1]
;;;208            tempa[2] = getSBoxValue(tempa[2]);
000072  f89d5002          LDRB     r5,[sp,#2]
000076  5d75              LDRB     r5,[r6,r5]
000078  f88d5002          STRB     r5,[sp,#2]
;;;209            tempa[3] = getSBoxValue(tempa[3]);
00007c  f89d5003          LDRB     r5,[sp,#3]
000080  5d75              LDRB     r5,[r6,r5]
000082  f88d5003          STRB     r5,[sp,#3]
;;;210          }
;;;211    
;;;212          tempa[0] = tempa[0] ^ Rcon[i/Nk];
000086  f89d5000          LDRB     r5,[sp,#0]
00008a  4f14              LDR      r7,|L15.220|
00008c  783e              LDRB     r6,[r7,#0]
00008e  4075              EORS     r5,r5,r6
000090  f88d5000          STRB     r5,[sp,#0]
                  |L15.148|
;;;213        }
;;;214    #if defined(AES256) && (AES256 == 1)
;;;215        if (i % Nk == 4)
;;;216        {
;;;217          // Function Subword()
;;;218          {
;;;219            tempa[0] = getSBoxValue(tempa[0]);
;;;220            tempa[1] = getSBoxValue(tempa[1]);
;;;221            tempa[2] = getSBoxValue(tempa[2]);
;;;222            tempa[3] = getSBoxValue(tempa[3]);
;;;223          }
;;;224        }
;;;225    #endif
;;;226        j = i * 4; k=(i - Nk) * 4;
000094  0093              LSLS     r3,r2,#2
000096  4615              MOV      r5,r2
000098  00a9              LSLS     r1,r5,#2
;;;227        RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
00009a  5c45              LDRB     r5,[r0,r1]
00009c  f89d6000          LDRB     r6,[sp,#0]
0000a0  4075              EORS     r5,r5,r6
0000a2  54c5              STRB     r5,[r0,r3]
;;;228        RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
0000a4  1c4d              ADDS     r5,r1,#1
0000a6  5d45              LDRB     r5,[r0,r5]
0000a8  f89d6001          LDRB     r6,[sp,#1]
0000ac  4075              EORS     r5,r5,r6
0000ae  1c5e              ADDS     r6,r3,#1
0000b0  5585              STRB     r5,[r0,r6]
;;;229        RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
0000b2  1c8d              ADDS     r5,r1,#2
0000b4  5d45              LDRB     r5,[r0,r5]
0000b6  f89d6002          LDRB     r6,[sp,#2]
0000ba  4075              EORS     r5,r5,r6
0000bc  1c9e              ADDS     r6,r3,#2
0000be  5585              STRB     r5,[r0,r6]
;;;230        RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
0000c0  1ccd              ADDS     r5,r1,#3
0000c2  5d45              LDRB     r5,[r0,r5]
0000c4  f89d6003          LDRB     r6,[sp,#3]
0000c8  4075              EORS     r5,r5,r6
0000ca  1cde              ADDS     r6,r3,#3
0000cc  5585              STRB     r5,[r0,r6]
0000ce  1c52              ADDS     r2,r2,#1              ;176
                  |L15.208|
0000d0  2a04              CMP      r2,#4                 ;176
0000d2  d39c              BCC      |L15.14|
;;;231      }
;;;232    }
0000d4  bdf8              POP      {r3-r7,pc}
;;;233    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L15.216|
                          DCD      sbox
                  |L15.220|
                          DCD      Rcon

                          AREA ||i.MixColumns||, CODE, READONLY, ALIGN=1

                  MixColumns PROC
;;;314    // MixColumns function mixes the columns of the state matrix
;;;315    static void MixColumns(state_t* state)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;316    {
000004  4605              MOV      r5,r0
;;;317      uint8_t i;
;;;318      uint8_t Tmp, Tm, t;
;;;319      for (i = 0; i < 4; ++i)
000006  2400              MOVS     r4,#0
000008  e060              B        |L16.204|
                  |L16.10|
;;;320      {  
;;;321        t   = (*state)[i][0];
00000a  f8158024          LDRB     r8,[r5,r4,LSL #2]
;;;322        Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
00000e  f8150024          LDRB     r0,[r5,r4,LSL #2]
000012  eb050184          ADD      r1,r5,r4,LSL #2
000016  7849              LDRB     r1,[r1,#1]
000018  4048              EORS     r0,r0,r1
00001a  eb050184          ADD      r1,r5,r4,LSL #2
00001e  7889              LDRB     r1,[r1,#2]
000020  4048              EORS     r0,r0,r1
000022  eb050184          ADD      r1,r5,r4,LSL #2
000026  78c9              LDRB     r1,[r1,#3]
000028  ea800601          EOR      r6,r0,r1
;;;323        Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
00002c  f8150024          LDRB     r0,[r5,r4,LSL #2]
000030  eb050184          ADD      r1,r5,r4,LSL #2
000034  7849              LDRB     r1,[r1,#1]
000036  ea800701          EOR      r7,r0,r1
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       xtime
000040  4607              MOV      r7,r0
000042  f8150024          LDRB     r0,[r5,r4,LSL #2]
000046  ea870106          EOR      r1,r7,r6
00004a  4048              EORS     r0,r0,r1
00004c  f8050024          STRB     r0,[r5,r4,LSL #2]
;;;324        Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
000050  eb050084          ADD      r0,r5,r4,LSL #2
000054  7840              LDRB     r0,[r0,#1]
000056  eb050184          ADD      r1,r5,r4,LSL #2
00005a  7889              LDRB     r1,[r1,#2]
00005c  ea800701          EOR      r7,r0,r1
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       xtime
000066  4607              MOV      r7,r0
000068  eb050084          ADD      r0,r5,r4,LSL #2
00006c  7840              LDRB     r0,[r0,#1]
00006e  ea870106          EOR      r1,r7,r6
000072  4048              EORS     r0,r0,r1
000074  eb050184          ADD      r1,r5,r4,LSL #2
000078  7048              STRB     r0,[r1,#1]
;;;325        Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
00007a  eb050084          ADD      r0,r5,r4,LSL #2
00007e  7880              LDRB     r0,[r0,#2]
000080  eb050184          ADD      r1,r5,r4,LSL #2
000084  78c9              LDRB     r1,[r1,#3]
000086  ea800701          EOR      r7,r0,r1
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       xtime
000090  4607              MOV      r7,r0
000092  eb050084          ADD      r0,r5,r4,LSL #2
000096  7880              LDRB     r0,[r0,#2]
000098  ea870106          EOR      r1,r7,r6
00009c  4048              EORS     r0,r0,r1
00009e  eb050184          ADD      r1,r5,r4,LSL #2
0000a2  7088              STRB     r0,[r1,#2]
;;;326        Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
0000a4  eb050084          ADD      r0,r5,r4,LSL #2
0000a8  78c0              LDRB     r0,[r0,#3]
0000aa  ea800708          EOR      r7,r0,r8
0000ae  4638              MOV      r0,r7
0000b0  f7fffffe          BL       xtime
0000b4  4607              MOV      r7,r0
0000b6  eb050084          ADD      r0,r5,r4,LSL #2
0000ba  78c0              LDRB     r0,[r0,#3]
0000bc  ea870106          EOR      r1,r7,r6
0000c0  4048              EORS     r0,r0,r1
0000c2  eb050184          ADD      r1,r5,r4,LSL #2
0000c6  70c8              STRB     r0,[r1,#3]
0000c8  1c60              ADDS     r0,r4,#1              ;319
0000ca  b2c4              UXTB     r4,r0                 ;319
                  |L16.204|
0000cc  2c04              CMP      r4,#4                 ;319
0000ce  db9c              BLT      |L16.10|
;;;327      }
;;;328    }
0000d0  e8bd81f0          POP      {r4-r8,pc}
;;;329    
                          ENDP


                          AREA ||i.ShiftRows||, CODE, READONLY, ALIGN=1

                  ShiftRows PROC
;;;280    // Offset = Row number. So the first row is not shifted.
;;;281    static void ShiftRows(state_t* state)
000000  7841              LDRB     r1,[r0,#1]
;;;282    {
;;;283      uint8_t temp;
;;;284    
;;;285      // Rotate first row 1 columns to left  
;;;286      temp           = (*state)[0][1];
;;;287      (*state)[0][1] = (*state)[1][1];
000002  7942              LDRB     r2,[r0,#5]
000004  7042              STRB     r2,[r0,#1]
;;;288      (*state)[1][1] = (*state)[2][1];
000006  7a43              LDRB     r3,[r0,#9]
000008  7143              STRB     r3,[r0,#5]
;;;289      (*state)[2][1] = (*state)[3][1];
00000a  7b43              LDRB     r3,[r0,#0xd]
00000c  7243              STRB     r3,[r0,#9]
;;;290      (*state)[3][1] = temp;
00000e  7341              STRB     r1,[r0,#0xd]
;;;291    
;;;292      // Rotate second row 2 columns to left  
;;;293      temp           = (*state)[0][2];
000010  7881              LDRB     r1,[r0,#2]
;;;294      (*state)[0][2] = (*state)[2][2];
000012  7a82              LDRB     r2,[r0,#0xa]
000014  7082              STRB     r2,[r0,#2]
;;;295      (*state)[2][2] = temp;
000016  7281              STRB     r1,[r0,#0xa]
;;;296    
;;;297      temp           = (*state)[1][2];
000018  7981              LDRB     r1,[r0,#6]
;;;298      (*state)[1][2] = (*state)[3][2];
00001a  7b83              LDRB     r3,[r0,#0xe]
00001c  7183              STRB     r3,[r0,#6]
;;;299      (*state)[3][2] = temp;
00001e  7381              STRB     r1,[r0,#0xe]
;;;300    
;;;301      // Rotate third row 3 columns to left
;;;302      temp           = (*state)[0][3];
000020  78c1              LDRB     r1,[r0,#3]
;;;303      (*state)[0][3] = (*state)[3][3];
000022  7bc2              LDRB     r2,[r0,#0xf]
000024  70c2              STRB     r2,[r0,#3]
;;;304      (*state)[3][3] = (*state)[2][3];
000026  7ac3              LDRB     r3,[r0,#0xb]
000028  73c3              STRB     r3,[r0,#0xf]
;;;305      (*state)[2][3] = (*state)[1][3];
00002a  79c3              LDRB     r3,[r0,#7]
00002c  72c3              STRB     r3,[r0,#0xb]
;;;306      (*state)[1][3] = temp;
00002e  71c1              STRB     r1,[r0,#7]
;;;307    }
000030  4770              BX       lr
;;;308    
                          ENDP


                          AREA ||i.SubBytes||, CODE, READONLY, ALIGN=2

                  SubBytes PROC
;;;265    // state matrix with values in an S-box.
;;;266    static void SubBytes(state_t* state)
000000  b510              PUSH     {r4,lr}
;;;267    {
000002  4602              MOV      r2,r0
;;;268      uint8_t i, j;
;;;269      for (i = 0; i < 4; ++i)
000004  2000              MOVS     r0,#0
000006  e00f              B        |L18.40|
                  |L18.8|
;;;270      {
;;;271        for (j = 0; j < 4; ++j)
000008  2100              MOVS     r1,#0
00000a  e009              B        |L18.32|
                  |L18.12|
;;;272        {
;;;273          (*state)[j][i] = getSBoxValue((*state)[j][i]);
00000c  eb020381          ADD      r3,r2,r1,LSL #2
000010  5c1b              LDRB     r3,[r3,r0]
000012  4c07              LDR      r4,|L18.48|
000014  5ce3              LDRB     r3,[r4,r3]
000016  eb020481          ADD      r4,r2,r1,LSL #2
00001a  5423              STRB     r3,[r4,r0]
00001c  1c4b              ADDS     r3,r1,#1              ;271
00001e  b2d9              UXTB     r1,r3                 ;271
                  |L18.32|
000020  2904              CMP      r1,#4                 ;271
000022  dbf3              BLT      |L18.12|
000024  1c43              ADDS     r3,r0,#1              ;269
000026  b2d8              UXTB     r0,r3                 ;269
                  |L18.40|
000028  2804              CMP      r0,#4                 ;269
00002a  dbed              BLT      |L18.8|
;;;274        }
;;;275      }
;;;276    }
00002c  bd10              POP      {r4,pc}
;;;277    
                          ENDP

00002e  0000              DCW      0x0000
                  |L18.48|
                          DCD      sbox

                          AREA ||i.XorWithIv||, CODE, READONLY, ALIGN=1

                  XorWithIv PROC
;;;494    
;;;495    static void XorWithIv(uint8_t* buf, uint8_t* Iv)
000000  b510              PUSH     {r4,lr}
;;;496    {
000002  4602              MOV      r2,r0
;;;497      uint8_t i;
;;;498      for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
000004  2000              MOVS     r0,#0
000006  e005              B        |L19.20|
                  |L19.8|
;;;499      {
;;;500        buf[i] ^= Iv[i];
000008  5c13              LDRB     r3,[r2,r0]
00000a  5c0c              LDRB     r4,[r1,r0]
00000c  4063              EORS     r3,r3,r4
00000e  5413              STRB     r3,[r2,r0]
000010  1c43              ADDS     r3,r0,#1              ;498
000012  b2d8              UXTB     r0,r3                 ;498
                  |L19.20|
000014  2810              CMP      r0,#0x10              ;498
000016  dbf7              BLT      |L19.8|
;;;501      }
;;;502    }
000018  bd10              POP      {r4,pc}
;;;503    
                          ENDP


                          AREA ||i.xtime||, CODE, READONLY, ALIGN=1

                  xtime PROC
;;;308    
;;;309    static uint8_t xtime(uint8_t x)
000000  4601              MOV      r1,r0
;;;310    {
;;;311      return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
000002  09c8              LSRS     r0,r1,#7
000004  eb0000c0          ADD      r0,r0,r0,LSL #3
000008  eb000040          ADD      r0,r0,r0,LSL #1
00000c  ea800041          EOR      r0,r0,r1,LSL #1
000010  b2c0              UXTB     r0,r0
;;;312    }
000012  4770              BX       lr
;;;313    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sbox
000000  637c777b          DCB      0x63,0x7c,0x77,0x7b
000004  f26b6fc5          DCB      0xf2,0x6b,0x6f,0xc5
000008  3001672b          DCB      0x30,0x01,0x67,0x2b
00000c  fed7ab76          DCB      0xfe,0xd7,0xab,0x76
000010  ca82c97d          DCB      0xca,0x82,0xc9,0x7d
000014  fa5947f0          DCB      0xfa,0x59,0x47,0xf0
000018  add4a2af          DCB      0xad,0xd4,0xa2,0xaf
00001c  9ca472c0          DCB      0x9c,0xa4,0x72,0xc0
000020  b7fd9326          DCB      0xb7,0xfd,0x93,0x26
000024  363ff7cc          DCB      0x36,0x3f,0xf7,0xcc
000028  34a5e5f1          DCB      0x34,0xa5,0xe5,0xf1
00002c  71d83115          DCB      0x71,0xd8,0x31,0x15
000030  04c723c3          DCB      0x04,0xc7,0x23,0xc3
000034  1896059a          DCB      0x18,0x96,0x05,0x9a
000038  071280e2          DCB      0x07,0x12,0x80,0xe2
00003c  eb27b275          DCB      0xeb,0x27,0xb2,0x75
000040  09832c1a          DCB      0x09,0x83,0x2c,0x1a
000044  1b6e5aa0          DCB      0x1b,0x6e,0x5a,0xa0
000048  523bd6b3          DCB      0x52,0x3b,0xd6,0xb3
00004c  29e32f84          DCB      0x29,0xe3,0x2f,0x84
000050  53d100ed          DCB      0x53,0xd1,0x00,0xed
000054  20fcb15b          DCB      0x20,0xfc,0xb1,0x5b
000058  6acbbe39          DCB      0x6a,0xcb,0xbe,0x39
00005c  4a4c58cf          DCB      0x4a,0x4c,0x58,0xcf
000060  d0efaafb          DCB      0xd0,0xef,0xaa,0xfb
000064  434d3385          DCB      0x43,0x4d,0x33,0x85
000068  45f9027f          DCB      0x45,0xf9,0x02,0x7f
00006c  503c9fa8          DCB      0x50,0x3c,0x9f,0xa8
000070  51a3408f          DCB      0x51,0xa3,0x40,0x8f
000074  929d38f5          DCB      0x92,0x9d,0x38,0xf5
000078  bcb6da21          DCB      0xbc,0xb6,0xda,0x21
00007c  10fff3d2          DCB      0x10,0xff,0xf3,0xd2
000080  cd0c13ec          DCB      0xcd,0x0c,0x13,0xec
000084  5f974417          DCB      0x5f,0x97,0x44,0x17
000088  c4a77e3d          DCB      0xc4,0xa7,0x7e,0x3d
00008c  645d1973          DCB      0x64,0x5d,0x19,0x73
000090  60814fdc          DCB      0x60,0x81,0x4f,0xdc
000094  222a9088          DCB      0x22,0x2a,0x90,0x88
000098  46eeb814          DCB      0x46,0xee,0xb8,0x14
00009c  de5e0bdb          DCB      0xde,0x5e,0x0b,0xdb
0000a0  e0323a0a          DCB      0xe0,0x32,0x3a,0x0a
0000a4  4906245c          DCB      0x49,0x06,0x24,0x5c
0000a8  c2d3ac62          DCB      0xc2,0xd3,0xac,0x62
0000ac  9195e479          DCB      0x91,0x95,0xe4,0x79
0000b0  e7c8376d          DCB      0xe7,0xc8,0x37,0x6d
0000b4  8dd54ea9          DCB      0x8d,0xd5,0x4e,0xa9
0000b8  6c56f4ea          DCB      0x6c,0x56,0xf4,0xea
0000bc  657aae08          DCB      0x65,0x7a,0xae,0x08
0000c0  ba78252e          DCB      0xba,0x78,0x25,0x2e
0000c4  1ca6b4c6          DCB      0x1c,0xa6,0xb4,0xc6
0000c8  e8dd741f          DCB      0xe8,0xdd,0x74,0x1f
0000cc  4bbd8b8a          DCB      0x4b,0xbd,0x8b,0x8a
0000d0  703eb566          DCB      0x70,0x3e,0xb5,0x66
0000d4  4803f60e          DCB      0x48,0x03,0xf6,0x0e
0000d8  613557b9          DCB      0x61,0x35,0x57,0xb9
0000dc  86c11d9e          DCB      0x86,0xc1,0x1d,0x9e
0000e0  e1f89811          DCB      0xe1,0xf8,0x98,0x11
0000e4  69d98e94          DCB      0x69,0xd9,0x8e,0x94
0000e8  9b1e87e9          DCB      0x9b,0x1e,0x87,0xe9
0000ec  ce5528df          DCB      0xce,0x55,0x28,0xdf
0000f0  8ca1890d          DCB      0x8c,0xa1,0x89,0x0d
0000f4  bfe64268          DCB      0xbf,0xe6,0x42,0x68
0000f8  41992d0f          DCB      0x41,0x99,0x2d,0x0f
0000fc  b054bb16          DCB      0xb0,0x54,0xbb,0x16
                  rsbox
000100  52096ad5          DCB      0x52,0x09,0x6a,0xd5
000104  3036a538          DCB      0x30,0x36,0xa5,0x38
000108  bf40a39e          DCB      0xbf,0x40,0xa3,0x9e
00010c  81f3d7fb          DCB      0x81,0xf3,0xd7,0xfb
000110  7ce33982          DCB      0x7c,0xe3,0x39,0x82
000114  9b2fff87          DCB      0x9b,0x2f,0xff,0x87
000118  348e4344          DCB      0x34,0x8e,0x43,0x44
00011c  c4dee9cb          DCB      0xc4,0xde,0xe9,0xcb
000120  547b9432          DCB      0x54,0x7b,0x94,0x32
000124  a6c2233d          DCB      0xa6,0xc2,0x23,0x3d
000128  ee4c950b          DCB      0xee,0x4c,0x95,0x0b
00012c  42fac34e          DCB      0x42,0xfa,0xc3,0x4e
000130  082ea166          DCB      0x08,0x2e,0xa1,0x66
000134  28d924b2          DCB      0x28,0xd9,0x24,0xb2
000138  765ba249          DCB      0x76,0x5b,0xa2,0x49
00013c  6d8bd125          DCB      0x6d,0x8b,0xd1,0x25
000140  72f8f664          DCB      0x72,0xf8,0xf6,0x64
000144  86689816          DCB      0x86,0x68,0x98,0x16
000148  d4a45ccc          DCB      0xd4,0xa4,0x5c,0xcc
00014c  5d65b692          DCB      0x5d,0x65,0xb6,0x92
000150  6c704850          DCB      0x6c,0x70,0x48,0x50
000154  fdedb9da          DCB      0xfd,0xed,0xb9,0xda
000158  5e154657          DCB      0x5e,0x15,0x46,0x57
00015c  a78d9d84          DCB      0xa7,0x8d,0x9d,0x84
000160  90d8ab00          DCB      0x90,0xd8,0xab,0x00
000164  8cbcd30a          DCB      0x8c,0xbc,0xd3,0x0a
000168  f7e45805          DCB      0xf7,0xe4,0x58,0x05
00016c  b8b34506          DCB      0xb8,0xb3,0x45,0x06
000170  d02c1e8f          DCB      0xd0,0x2c,0x1e,0x8f
000174  ca3f0f02          DCB      0xca,0x3f,0x0f,0x02
000178  c1afbd03          DCB      0xc1,0xaf,0xbd,0x03
00017c  01138a6b          DCB      0x01,0x13,0x8a,0x6b
000180  3a911141          DCB      0x3a,0x91,0x11,0x41
000184  4f67dcea          DCB      0x4f,0x67,0xdc,0xea
000188  97f2cfce          DCB      0x97,0xf2,0xcf,0xce
00018c  f0b4e673          DCB      0xf0,0xb4,0xe6,0x73
000190  96ac7422          DCB      0x96,0xac,0x74,0x22
000194  e7ad3585          DCB      0xe7,0xad,0x35,0x85
000198  e2f937e8          DCB      0xe2,0xf9,0x37,0xe8
00019c  1c75df6e          DCB      0x1c,0x75,0xdf,0x6e
0001a0  47f11a71          DCB      0x47,0xf1,0x1a,0x71
0001a4  1d29c589          DCB      0x1d,0x29,0xc5,0x89
0001a8  6fb7620e          DCB      0x6f,0xb7,0x62,0x0e
0001ac  aa18be1b          DCB      0xaa,0x18,0xbe,0x1b
0001b0  fc563e4b          DCB      0xfc,0x56,0x3e,0x4b
0001b4  c6d27920          DCB      0xc6,0xd2,0x79,0x20
0001b8  9adbc0fe          DCB      0x9a,0xdb,0xc0,0xfe
0001bc  78cd5af4          DCB      0x78,0xcd,0x5a,0xf4
0001c0  1fdda833          DCB      0x1f,0xdd,0xa8,0x33
0001c4  8807c731          DCB      0x88,0x07,0xc7,0x31
0001c8  b1121059          DCB      0xb1,0x12,0x10,0x59
0001cc  2780ec5f          DCB      0x27,0x80,0xec,0x5f
0001d0  60517fa9          DCB      0x60,0x51,0x7f,0xa9
0001d4  19b54a0d          DCB      0x19,0xb5,0x4a,0x0d
0001d8  2de57a9f          DCB      0x2d,0xe5,0x7a,0x9f
0001dc  93c99cef          DCB      0x93,0xc9,0x9c,0xef
0001e0  a0e03b4d          DCB      0xa0,0xe0,0x3b,0x4d
0001e4  ae2af5b0          DCB      0xae,0x2a,0xf5,0xb0
0001e8  c8ebbb3c          DCB      0xc8,0xeb,0xbb,0x3c
0001ec  83539961          DCB      0x83,0x53,0x99,0x61
0001f0  172b047e          DCB      0x17,0x2b,0x04,0x7e
0001f4  ba77d626          DCB      0xba,0x77,0xd6,0x26
0001f8  e1691463          DCB      0xe1,0x69,0x14,0x63
0001fc  55210c7d          DCB      0x55,0x21,0x0c,0x7d
                  Rcon
000200  8d010204          DCB      0x8d,0x01,0x02,0x04
000204  08102040          DCB      0x08,0x10,0x20,0x40
000208  801b366c          DCB      0x80,0x1b,0x36,0x6c
00020c  d8ab4d9a          DCB      0xd8,0xab,0x4d,0x9a
000210  2f5ebc63          DCB      0x2f,0x5e,0xbc,0x63
000214  c697356a          DCB      0xc6,0x97,0x35,0x6a
000218  d4b37dfa          DCB      0xd4,0xb3,0x7d,0xfa
00021c  efc59139          DCB      0xef,0xc5,0x91,0x39
000220  72e4d3bd          DCB      0x72,0xe4,0xd3,0xbd
000224  61c29f25          DCB      0x61,0xc2,0x9f,0x25
000228  4a943366          DCB      0x4a,0x94,0x33,0x66
00022c  cc831d3a          DCB      0xcc,0x83,0x1d,0x3a
000230  74e8cb8d          DCB      0x74,0xe8,0xcb,0x8d
000234  01020408          DCB      0x01,0x02,0x04,0x08
000238  10204080          DCB      0x10,0x20,0x40,0x80
00023c  1b366cd8          DCB      0x1b,0x36,0x6c,0xd8
000240  ab4d9a2f          DCB      0xab,0x4d,0x9a,0x2f
000244  5ebc63c6          DCB      0x5e,0xbc,0x63,0xc6
000248  97356ad4          DCB      0x97,0x35,0x6a,0xd4
00024c  b37dfaef          DCB      0xb3,0x7d,0xfa,0xef
000250  c5913972          DCB      0xc5,0x91,0x39,0x72
000254  e4d3bd61          DCB      0xe4,0xd3,0xbd,0x61
000258  c29f254a          DCB      0xc2,0x9f,0x25,0x4a
00025c  943366cc          DCB      0x94,0x33,0x66,0xcc
000260  831d3a74          DCB      0x83,0x1d,0x3a,0x74
000264  e8cb8d01          DCB      0xe8,0xcb,0x8d,0x01
000268  02040810          DCB      0x02,0x04,0x08,0x10
00026c  2040801b          DCB      0x20,0x40,0x80,0x1b
000270  366cd8ab          DCB      0x36,0x6c,0xd8,0xab
000274  4d9a2f5e          DCB      0x4d,0x9a,0x2f,0x5e
000278  bc63c697          DCB      0xbc,0x63,0xc6,0x97
00027c  356ad4b3          DCB      0x35,0x6a,0xd4,0xb3
000280  7dfaefc5          DCB      0x7d,0xfa,0xef,0xc5
000284  913972e4          DCB      0x91,0x39,0x72,0xe4
000288  d3bd61c2          DCB      0xd3,0xbd,0x61,0xc2
00028c  9f254a94          DCB      0x9f,0x25,0x4a,0x94
000290  3366cc83          DCB      0x33,0x66,0xcc,0x83
000294  1d3a74e8          DCB      0x1d,0x3a,0x74,0xe8
000298  cb8d0102          DCB      0xcb,0x8d,0x01,0x02
00029c  04081020          DCB      0x04,0x08,0x10,0x20
0002a0  40801b36          DCB      0x40,0x80,0x1b,0x36
0002a4  6cd8ab4d          DCB      0x6c,0xd8,0xab,0x4d
0002a8  9a2f5ebc          DCB      0x9a,0x2f,0x5e,0xbc
0002ac  63c69735          DCB      0x63,0xc6,0x97,0x35
0002b0  6ad4b37d          DCB      0x6a,0xd4,0xb3,0x7d
0002b4  faefc591          DCB      0xfa,0xef,0xc5,0x91
0002b8  3972e4d3          DCB      0x39,0x72,0xe4,0xd3
0002bc  bd61c29f          DCB      0xbd,0x61,0xc2,0x9f
0002c0  254a9433          DCB      0x25,0x4a,0x94,0x33
0002c4  66cc831d          DCB      0x66,0xcc,0x83,0x1d
0002c8  3a74e8cb          DCB      0x3a,0x74,0xe8,0xcb
0002cc  8d010204          DCB      0x8d,0x01,0x02,0x04
0002d0  08102040          DCB      0x08,0x10,0x20,0x40
0002d4  801b366c          DCB      0x80,0x1b,0x36,0x6c
0002d8  d8ab4d9a          DCB      0xd8,0xab,0x4d,0x9a
0002dc  2f5ebc63          DCB      0x2f,0x5e,0xbc,0x63
0002e0  c697356a          DCB      0xc6,0x97,0x35,0x6a
0002e4  d4b37dfa          DCB      0xd4,0xb3,0x7d,0xfa
0002e8  efc59139          DCB      0xef,0xc5,0x91,0x39
0002ec  72e4d3bd          DCB      0x72,0xe4,0xd3,0xbd
0002f0  61c29f25          DCB      0x61,0xc2,0x9f,0x25
0002f4  4a943366          DCB      0x4a,0x94,0x33,0x66
0002f8  cc831d3a          DCB      0xcc,0x83,0x1d,0x3a
0002fc  74e8cb            DCB      0x74,0xe8,0xcb
