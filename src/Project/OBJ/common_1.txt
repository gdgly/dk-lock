; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\common_1.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\common_1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -I..\MQTT -IE:\github\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\common_1.crf ..\system\common.c]
                          THUMB

                          AREA ||i.delay||, CODE, READONLY, ALIGN=1

                  delay PROC
;;;35     */
;;;36     void delay(uint32_t count)
000000  bf00              NOP      
                  |L1.2|
;;;37     {
;;;38     	while(count--);
000002  1e01              SUBS     r1,r0,#0
000004  f1a00001          SUB      r0,r0,#1
000008  d1fb              BNE      |L1.2|
;;;39     }
00000a  4770              BX       lr
;;;40     
                          ENDP


                          AREA ||i.itoa||, CODE, READONLY, ALIGN=1

                  itoa PROC
;;;197    */
;;;198    char *itoa(int value, char *string, int radix)
000000  b5f0              PUSH     {r4-r7,lr}
;;;199    {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;200        int     i, d;
;;;201        int     flag = 0;
000008  2700              MOVS     r7,#0
;;;202        char    *ptr = string;
00000a  4629              MOV      r1,r5
;;;203    
;;;204        if (radix != 10)
00000c  2e0a              CMP      r6,#0xa
00000e  d003              BEQ      |L2.24|
;;;205        {
;;;206            *ptr = 0;
000010  2000              MOVS     r0,#0
000012  7008              STRB     r0,[r1,#0]
;;;207            return string;
000014  4628              MOV      r0,r5
                  |L2.22|
;;;208        }
;;;209    
;;;210        if (!value)
;;;211        {
;;;212            *ptr++ = 0x30;
;;;213            *ptr = 0;
;;;214            return string;
;;;215        }
;;;216    
;;;217    
;;;218        if (value < 0)
;;;219        {
;;;220            *ptr++ = '-';
;;;221    		
;;;222            value *= -1;
;;;223        }
;;;224    
;;;225        for (i = 10000; i > 0; i /= 10)
;;;226        {
;;;227            d = value / i;
;;;228    
;;;229            if (d || flag)
;;;230            {
;;;231                *ptr++ = (char)(d + 0x30);
;;;232                value -= (d * i);
;;;233                flag = 1;
;;;234            }
;;;235        }
;;;236    
;;;237        *ptr = 0;
;;;238    
;;;239        return string;
;;;240    } 
000016  bdf0              POP      {r4-r7,pc}
                  |L2.24|
000018  b933              CBNZ     r3,|L2.40|
00001a  2030              MOVS     r0,#0x30              ;212
00001c  f8010b01          STRB     r0,[r1],#1            ;212
000020  2000              MOVS     r0,#0                 ;213
000022  7008              STRB     r0,[r1,#0]            ;213
000024  4628              MOV      r0,r5                 ;214
000026  e7f6              B        |L2.22|
                  |L2.40|
000028  2b00              CMP      r3,#0                 ;218
00002a  da03              BGE      |L2.52|
00002c  202d              MOVS     r0,#0x2d              ;220
00002e  f8010b01          STRB     r0,[r1],#1            ;220
000032  425b              RSBS     r3,r3,#0              ;222
                  |L2.52|
000034  f2427210          MOV      r2,#0x2710            ;225
000038  e00d              B        |L2.86|
                  |L2.58|
00003a  fb93f4f2          SDIV     r4,r3,r2              ;227
00003e  b904              CBNZ     r4,|L2.66|
000040  b137              CBZ      r7,|L2.80|
                  |L2.66|
000042  f1040030          ADD      r0,r4,#0x30           ;231
000046  f8010b01          STRB     r0,[r1],#1            ;231
00004a  fb043312          MLS      r3,r4,r2,r3           ;232
00004e  2701              MOVS     r7,#1                 ;233
                  |L2.80|
000050  200a              MOVS     r0,#0xa               ;225
000052  fb92f2f0          SDIV     r2,r2,r0              ;225
                  |L2.86|
000056  2a00              CMP      r2,#0                 ;225
000058  dcef              BGT      |L2.58|
00005a  2000              MOVS     r0,#0                 ;237
00005c  7008              STRB     r0,[r1,#0]            ;237
00005e  4628              MOV      r0,r5                 ;239
000060  e7d9              B        |L2.22|
;;;241    
                          ENDP


                          AREA ||i.mem_picked||, CODE, READONLY, ALIGN=1

                  mem_picked PROC
;;;115    */
;;;116    uint8_t *mem_picked(uint8_t *src_str, uint8_t *sub_str, uint16_t len, uint8_t *dst_str)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;117    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4692              MOV      r10,r2
00000a  461f              MOV      r7,r3
;;;118    	uint8_t *tmp1 = NULL, *tmp2 = NULL, *str = src_str;
00000c  2500              MOVS     r5,#0
00000e  46ab              MOV      r11,r5
000010  46b0              MOV      r8,r6
;;;119    	uint8_t i = 0; 
000012  46a9              MOV      r9,r5
;;;120    	
;;;121    	tmp1 = (uint8_t*)mem_str((char*)str, 512, (char*)sub_str);
000014  4622              MOV      r2,r4
000016  f44f7100          MOV      r1,#0x200
00001a  4640              MOV      r0,r8
00001c  f7fffffe          BL       mem_str
000020  4605              MOV      r5,r0
;;;122    	if ((tmp1 == NULL) || (str == NULL))
000022  b115              CBZ      r5,|L3.42|
000024  f1b80f00          CMP      r8,#0
000028  d102              BNE      |L3.48|
                  |L3.42|
;;;123    	{
;;;124    		return NULL;
00002a  2000              MOVS     r0,#0
                  |L3.44|
;;;125    	}
;;;126    
;;;127    	for(i=0; i<strlen((char*)sub_str); i++)
;;;128    	{
;;;129    		tmp1++;
;;;130    	}
;;;131    
;;;132    	memcpy(dst_str, tmp1, len);
;;;133    	
;;;134    	return str;
;;;135    }
00002c  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.48|
000030  f04f0900          MOV      r9,#0                 ;127
000034  e004              B        |L3.64|
                  |L3.54|
000036  1c6d              ADDS     r5,r5,#1              ;129
000038  f1090001          ADD      r0,r9,#1              ;127
00003c  f00009ff          AND      r9,r0,#0xff           ;127
                  |L3.64|
000040  4620              MOV      r0,r4                 ;127
000042  f7fffffe          BL       strlen
000046  4548              CMP      r0,r9                 ;127
000048  d8f5              BHI      |L3.54|
00004a  4652              MOV      r2,r10                ;132
00004c  4629              MOV      r1,r5                 ;132
00004e  4638              MOV      r0,r7                 ;132
000050  f7fffffe          BL       __aeabi_memcpy
000054  4640              MOV      r0,r8                 ;134
000056  e7e9              B        |L3.44|
;;;136    
                          ENDP


                          AREA ||i.mem_str||, CODE, READONLY, ALIGN=1

                  mem_str PROC
;;;151    */
;;;152    char *mem_str(char *mem, int mem_len, char *sub_str)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;153    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;154    	int sub_len = 0;
00000a  f04f0900          MOV      r9,#0
;;;155    	int i;
;;;156    	char *cur_pos = mem;
00000e  4635              MOV      r5,r6
;;;157    	int last_pos = 0;
000010  46ca              MOV      r10,r9
;;;158    	
;;;159    	if (mem == NULL || mem_len <= 0 || sub_str == NULL)
000012  b116              CBZ      r6,|L4.26|
000014  2f00              CMP      r7,#0
000016  dd00              BLE      |L4.26|
000018  b914              CBNZ     r4,|L4.32|
                  |L4.26|
;;;160    	{
;;;161    		return NULL;
00001a  2000              MOVS     r0,#0
                  |L4.28|
;;;162    	}
;;;163    	
;;;164    	if (*sub_str == '\0')
;;;165    	{
;;;166    		return NULL;
;;;167    	}
;;;168    	
;;;169    	sub_len = strlen(sub_str);
;;;170    	last_pos = mem_len - sub_len + 1;
;;;171    	
;;;172    	for (i=0; i<last_pos; i++)
;;;173    	{
;;;174    		if (*cur_pos == *sub_str)
;;;175    		{
;;;176    			if (memcmp(cur_pos, sub_str, sub_len) == 0)
;;;177    			{
;;;178    				return cur_pos;
;;;179    			}
;;;180    		}
;;;181    		cur_pos++;
;;;182    	}
;;;183    
;;;184    	return NULL;
;;;185    }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L4.32|
000020  7820              LDRB     r0,[r4,#0]            ;164
000022  b908              CBNZ     r0,|L4.40|
000024  2000              MOVS     r0,#0                 ;166
000026  e7f9              B        |L4.28|
                  |L4.40|
000028  4620              MOV      r0,r4                 ;169
00002a  f7fffffe          BL       strlen
00002e  4681              MOV      r9,r0                 ;169
000030  eba70009          SUB      r0,r7,r9              ;170
000034  f1000a01          ADD      r10,r0,#1             ;170
000038  f04f0800          MOV      r8,#0                 ;172
00003c  e00e              B        |L4.92|
                  |L4.62|
00003e  7828              LDRB     r0,[r5,#0]            ;174
000040  7821              LDRB     r1,[r4,#0]            ;174
000042  4288              CMP      r0,r1                 ;174
000044  d107              BNE      |L4.86|
000046  464a              MOV      r2,r9                 ;176
000048  4621              MOV      r1,r4                 ;176
00004a  4628              MOV      r0,r5                 ;176
00004c  f7fffffe          BL       memcmp
000050  b908              CBNZ     r0,|L4.86|
000052  4628              MOV      r0,r5                 ;178
000054  e7e2              B        |L4.28|
                  |L4.86|
000056  1c6d              ADDS     r5,r5,#1              ;181
000058  f1080801          ADD      r8,r8,#1              ;172
                  |L4.92|
00005c  45d0              CMP      r8,r10                ;172
00005e  dbee              BLT      |L4.62|
000060  2000              MOVS     r0,#0                 ;184
000062  e7db              B        |L4.28|
;;;186    
                          ENDP


                          AREA ||i.memcat||, CODE, READONLY, ALIGN=1

                  memcat PROC
;;;242    
;;;243    char *memcat(void *dest, size_t dest_len, const char *src, size_t src_len)
000000  b510              PUSH     {r4,lr}
;;;244    {
000002  4604              MOV      r4,r0
;;;245    
;;;246    //	memcpy(dest+dest_len, src, src_len);
;;;247    
;;;248    //	return dest;
;;;249    
;;;250    }
000004  bd10              POP      {r4,pc}
;;;251    
                          ENDP


                          AREA ||i.str_picked||, CODE, READONLY, ALIGN=1

                  str_picked PROC
;;;69     */
;;;70     uint8_t *str_picked(uint8_t *src_str, uint8_t *sub_str1, uint8_t *sub_str2, uint8_t *dst_str)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;71     {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  461d              MOV      r5,r3
;;;72     	uint8_t *tmp1 = NULL, *tmp2 = NULL, *str = src_str;
00000a  2400              MOVS     r4,#0
00000c  46a1              MOV      r9,r4
00000e  46ba              MOV      r10,r7
;;;73     	uint8_t i = 0; 
000010  46a3              MOV      r11,r4
;;;74     	int index = 0;
000012  2600              MOVS     r6,#0
;;;75     				
;;;76     	tmp1 = (uint8_t*)strstr((char*)str, (char*)sub_str1);
000014  4641              MOV      r1,r8
000016  4650              MOV      r0,r10
000018  f7fffffe          BL       strstr
00001c  4604              MOV      r4,r0
;;;77     
;;;78     	if ((tmp1 == NULL) || (str == NULL))
00001e  b114              CBZ      r4,|L6.38|
000020  f1ba0f00          CMP      r10,#0
000024  d103              BNE      |L6.46|
                  |L6.38|
;;;79     	{
;;;80     		return NULL;
000026  2000              MOVS     r0,#0
                  |L6.40|
;;;81     	}
;;;82     
;;;83     	for(i=0; i<strlen((char*)sub_str1); i++)
;;;84     	{
;;;85     		tmp1++;
;;;86     	}
;;;87     
;;;88     	tmp2 = (uint8_t*)strstr((char*)tmp1, (char*)sub_str2);
;;;89     	if (tmp2 == NULL)
;;;90     	{
;;;91     		return NULL;
;;;92     	}
;;;93     
;;;94     	while (tmp1 != tmp2)
;;;95     	{
;;;96     		dst_str[index] = *tmp1++;
;;;97     		index++;
;;;98     	}
;;;99     	dst_str[index] = '\0';
;;;100    	
;;;101    	return dst_str;
;;;102    }
000028  b004              ADD      sp,sp,#0x10
00002a  e8bd9ff0          POP      {r4-r12,pc}
                  |L6.46|
00002e  f04f0b00          MOV      r11,#0                ;83
000032  e004              B        |L6.62|
                  |L6.52|
000034  1c64              ADDS     r4,r4,#1              ;85
000036  f10b0001          ADD      r0,r11,#1             ;83
00003a  f0000bff          AND      r11,r0,#0xff          ;83
                  |L6.62|
00003e  4640              MOV      r0,r8                 ;83
000040  f7fffffe          BL       strlen
000044  4558              CMP      r0,r11                ;83
000046  d8f5              BHI      |L6.52|
000048  4620              MOV      r0,r4                 ;88
00004a  9902              LDR      r1,[sp,#8]            ;88
00004c  f7fffffe          BL       strstr
000050  4681              MOV      r9,r0                 ;88
000052  f1b90f00          CMP      r9,#0                 ;89
000056  d101              BNE      |L6.92|
000058  2000              MOVS     r0,#0                 ;91
00005a  e7e5              B        |L6.40|
                  |L6.92|
00005c  e003              B        |L6.102|
                  |L6.94|
00005e  f8140b01          LDRB     r0,[r4],#1            ;96
000062  55a8              STRB     r0,[r5,r6]            ;96
000064  1c76              ADDS     r6,r6,#1              ;97
                  |L6.102|
000066  454c              CMP      r4,r9                 ;94
000068  d1f9              BNE      |L6.94|
00006a  2000              MOVS     r0,#0                 ;99
00006c  55a8              STRB     r0,[r5,r6]            ;99
00006e  4628              MOV      r0,r5                 ;101
000070  e7da              B        |L6.40|
;;;103    
                          ENDP


                          AREA ||i.system_reset||, CODE, READONLY, ALIGN=2

                  system_reset PROC
;;;52     */
;;;53     void system_reset(void) 
000000  2001              MOVS     r0,#1
000002  f3808813          MSR      FAULTMASK,r0
000006  bf00              NOP      
;;;54     { 
;;;55     	__set_FAULTMASK(1); 
;;;56     	NVIC_SystemReset();  
000008  bf00              NOP      
00000a  4807              LDR      r0,|L7.40|
00000c  6800              LDR      r0,[r0,#0]
00000e  f40060e0          AND      r0,r0,#0x700
000012  4906              LDR      r1,|L7.44|
000014  4308              ORRS     r0,r0,r1
000016  1d00              ADDS     r0,r0,#4
000018  4903              LDR      r1,|L7.40|
00001a  6008              STR      r0,[r1,#0]
00001c  f3bf8f4f          DSB      
000020  bf00              NOP      
000022  bf00              NOP      
                  |L7.36|
000024  e7fe              B        |L7.36|
;;;57     } 
;;;58     
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
                          DCD      0xe000ed0c
                  |L7.44|
                          DCD      0x05fa0000
