; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -I..\MQTT -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\main.crf ..\app\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;147    
;;;148    int main(void)
000000  b508              PUSH     {r3,lr}
;;;149    { 
;;;150    	u16 j,i,rxlen;
;;;151    	u16 k = 0x1A;
000002  bf00              NOP      
;;;152    	u8 upload=0; 
000004  bf00              NOP      
;;;153    	u8 *ret;
;;;154    	uint8_t status = 0;
000006  bf00              NOP      
;;;155    
;;;156    
;;;157    	int mqtt_pub = 0;
000008  2400              MOVS     r4,#0
;;;158    	int mqtt_sub = 0;
00000a  bf00              NOP      
;;;159    	int mqtt_con = 0;
00000c  bf00              NOP      
;;;160    
;;;161    	
;;;162    	bsp_init();
00000e  f7fffffe          BL       bsp_init
;;;163                             
;;;164    	USART_OUT(USART1, "uart1 is ok\r\n");
000012  a11f              ADR      r1,|L1.144|
000014  4822              LDR      r0,|L1.160|
000016  f7fffffe          BL       USART_OUT
;;;165    
;;;166    	while(1)
00001a  e037              B        |L1.140|
                  |L1.28|
;;;167    	{
;;;168    	
;;;169    		gprs_init_task();
00001c  f7fffffe          BL       gprs_init_task
;;;170    
;;;171    	
;;;172    		usart1_recv_data();
000020  f7fffffe          BL       usart1_recv_data
;;;173    		usart2_recv_data();
000024  f7fffffe          BL       usart2_recv_data
;;;174    //		mqtt_subscribe();
;;;175    		
;;;176    		if(timer_is_timeout_1ms(timer_batt, 1000*60*10) == 0)
000028  491e              LDR      r1,|L1.164|
00002a  2003              MOVS     r0,#3
00002c  f7fffffe          BL       timer_is_timeout_1ms
000030  b970              CBNZ     r0,|L1.80|
;;;177    		{
;;;178    			mqtt_pub = mqtt_publist("test", 0, 0, 2, 1);
000032  2001              MOVS     r0,#1
000034  2302              MOVS     r3,#2
000036  2200              MOVS     r2,#0
000038  4611              MOV      r1,r2
00003a  9000              STR      r0,[sp,#0]
00003c  a01a              ADR      r0,|L1.168|
00003e  f7fffffe          BL       mqtt_publist
000042  4604              MOV      r4,r0
;;;179    			if(mqtt_pub == 1)
000044  2c01              CMP      r4,#1
000046  d103              BNE      |L1.80|
;;;180    			{
;;;181    				USART_OUT(USART1, "mqtt_publist ok\r\n");
000048  a119              ADR      r1,|L1.176|
00004a  4815              LDR      r0,|L1.160|
00004c  f7fffffe          BL       USART_OUT
                  |L1.80|
;;;182    			}
;;;183    //			mqtt_sub = mqtt_subscribe("test", 0, 2);
;;;184    		}
;;;185    		
;;;186    		
;;;187    		
;;;188    		
;;;189    		if(timer_is_timeout_1ms(timer_keep_alive, 1000*60) == 0)
000050  f64e2160          MOV      r1,#0xea60
000054  2002              MOVS     r0,#2
000056  f7fffffe          BL       timer_is_timeout_1ms
00005a  b908              CBNZ     r0,|L1.96|
;;;190    		{
;;;191    			mqtt_keep_alive();
00005c  f7fffffe          BL       mqtt_keep_alive
                  |L1.96|
;;;192    		}
;;;193    
;;;194    
;;;195    
;;;196    
;;;197    		
;;;198    		
;;;199    		p1 = strstr((char*)mqtt_buff.pdata, "CLOSE");
000060  a118              ADR      r1,|L1.196|
000062  481a              LDR      r0,|L1.204|
000064  f7fffffe          BL       strstr
000068  4919              LDR      r1,|L1.208|
00006a  6008              STR      r0,[r1,#0]  ; p1
;;;200    		if(p1 !=NULL)
00006c  4608              MOV      r0,r1
00006e  6800              LDR      r0,[r0,#0]  ; p1
000070  b160              CBZ      r0,|L1.140|
;;;201    		{
;;;202    			memset(&mqtt_buff, 0, sizeof(usart_buff_t));	
000072  f2402102          MOV      r1,#0x202
000076  4815              LDR      r0,|L1.204|
000078  1e80              SUBS     r0,r0,#2
00007a  f7fffffe          BL       __aeabi_memclr
;;;203    			gprs_status = 0;
00007e  2000              MOVS     r0,#0
000080  4914              LDR      r1,|L1.212|
000082  7008              STRB     r0,[r1,#0]
;;;204    			USART_OUT(USART1, "MQTT SERVER CLOSE\r\n");
000084  a114              ADR      r1,|L1.216|
000086  4806              LDR      r0,|L1.160|
000088  f7fffffe          BL       USART_OUT
                  |L1.140|
00008c  e7c6              B        |L1.28|
;;;205    		}
;;;206    	}
;;;207    	
;;;208    	
;;;209    	
;;;210    	
;;;211    	while(1)
;;;212    	{	 
;;;213    
;;;214    		while(1)
;;;215    		{
;;;216    			gprs_config();
;;;217    			if(gprs_status == 255)
;;;218    			{
;;;219    				MakeFile_MD5_Checksum(PARK_LOCK_Buffer, 16);			
;;;220    				break;
;;;221    			}
;;;222    		}
;;;223    	
;;;224    		
;;;225    		usart1_recv_data();
;;;226    		usart2_recv_data();
;;;227    	
;;;228    		// 电池信息
;;;229    		Bat_V =Get_Adc_Average(ADC_Channel_0,10);
;;;230    		Bat_V=Bat_V*3300/4096;
;;;231    		Bat_V=Bat_V*88/20;
;;;232    		Bat_Pre=(Bat_V-5000)*100/2400;
;;;233    		
;;;234    //		if(Bat_Pre<20&&Bat_Pre>10&&Bat_Pre_Flag==0)
;;;235    		if(timer_is_timeout_1ms(timer_batt, 1000*60*60) == 0)
;;;236    		{	
;;;237    			Bat_Pre_Flag =  1;
;;;238    			memset(send_buff, 0, 100);	
;;;239    			sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",24,2\r\n");
;;;240    
;;;241    			USART_OUT(USART1, "ccc=%s\r\n", send_buff);
;;;242    
;;;243    			ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;244    			if(ret != NULL)
;;;245    			{
;;;246    				memset(expressText, 0 ,512);
;;;247    				memset(cipherText, 0 ,512);
;;;248    				sprintf((char *)expressText, "{%c%s%c:%s}",'"',"battery",'"',"20");
;;;249    				USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;250    				AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;251    				
;;;252    				USART_OUT(USART1, "aesKey=%s\r\n", aesKey);
;;;253    				USART_OUT(USART1, "cipherText=%s\r\n", cipherText);
;;;254    				ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;255    				if(ret != NULL)
;;;256    				{
;;;257    					timer_is_timeout_1ms(timer_heartbeat, 0);
;;;258    				}			
;;;259    			}
;;;260    			else
;;;261    			{
;;;262    			}
;;;263    
;;;264    		}
;;;265    //		//接收锁数据
;;;266    		p1 = strstr((u8*)protocol_buff, "topic: lock/");
;;;267    		p2 = strstr((u8 *)p1,(u8 *)PARK_LOCK_Buffer);
;;;268    		if(strncmp((char *)p1,(char *)"topic: lock/",12)==0)
;;;269    		{
;;;270    			
;;;271    			if(LOCK_ON_READ()==0 || LOCK_OFF_READ()==0)
;;;272    			{
;;;273    			timer_is_timeout_1ms(timer_heartbeat, 0);
;;;274    			USART_OUT(USART1, "lock data\r\n");
;;;275    			memset(receiveText ,0 , 512);
;;;276    			memset(expressText ,0 , 512);
;;;277    			
;;;278    			strcpy((char*)receiveText ,(char *)(p1+33));
;;;279    			USART_OUT(USART1, "receiveText=%s\r\n", receiveText);
;;;280    			AES_Decrypt(expressText, receiveText, aesKey);
;;;281    			if(*expressText==0x31)
;;;282    			{
;;;283    //				if(LOCK_ON_READ() == 0)
;;;284    //				if(lock_on_status_get() == 0)
;;;285    				if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1)
;;;286    				{
;;;287    					timer_is_timeout_1ms(timer_open_lock, 0);
;;;288    					Shaking=1;
;;;289    					Lock_Open=1;
;;;290    					USART_OUT(USART1, "Lock_Open11111\r\n");
;;;291    				}
;;;292    				else
;;;293    				{
;;;294    					Lock_Open=0;
;;;295    				}
;;;296    			}
;;;297    			else if(*expressText==0x32)
;;;298    			{
;;;299    //				if(LOCK_OFF_READ() == 0)
;;;300    //				if(lock_off_status_get() == 0)
;;;301    				if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0)	
;;;302    				{
;;;303    					timer_is_timeout_1ms(timer_close_lock, 0);
;;;304    					Shaking=1;
;;;305    					Lock_Close=1;
;;;306    					USART_OUT(USART1, "Lock_Close11111\r\n");
;;;307    				}
;;;308    				else
;;;309    				{
;;;310    					Lock_Close=0;
;;;311    				}
;;;312    			
;;;313    			}
;;;314    			else if(*expressText == 0x30)
;;;315    			{
;;;316    				lock_stop();	//停止运行;
;;;317    			}
;;;318    			
;;;319    			memset(protocol_buff, 0, 512);					
;;;320    		}
;;;321    	}
;;;322    
;;;323    		//开锁逻辑		
;;;324    		if(Lock_Open == 1)
;;;325    		{
;;;326    
;;;327    			if(timer_is_timeout_1ms(timer_open_lock, 4000) == 0)
;;;328    			{
;;;329    				lock_open_err_flag = 1;
;;;330    				
;;;331    				lock_close();
;;;332    				USART_OUT(USART1, "Lock_Open timer\r\n");
;;;333    			}
;;;334    			USART_OUT(USART1, "Lock_Open\r\n");
;;;335    			if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1)
;;;336    			{
;;;337    				lock_open();	//开锁	
;;;338    				USART_OUT(USART1, "AAA lock_open\r\n");
;;;339    			}
;;;340    //			if(LOCK_OFF_READ()==0) //正常开锁
;;;341    			if(lock_off_status_get() == 0)
;;;342    			{
;;;343    				USART_OUT(USART1, "AAA lock_stop\r\n");
;;;344    				
;;;345    				Lock_Open = 0;
;;;346    				lock_stop();	//停止运行
;;;347    				Shaking = 0;
;;;348    				
;;;349    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;350    				USART_OUT(USART1, "send_buff=%s\r\n", send_buff);
;;;351    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;352    				if(ret != NULL)
;;;353    				{
;;;354    					memset(expressText, 0 ,512);
;;;355    					memset(cipherText, 0 ,512);
;;;356    					sprintf(expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"1",'"',"ok",'"',"0");
;;;357    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;358    					AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;359    					USART_OUT(USART1, "cipherText=%s\r\n", cipherText);
;;;360    					
;;;361    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;362    					if(ret != NULL)
;;;363    					{
;;;364    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;365    					}
;;;366    				}			
;;;367    			}
;;;368    			
;;;369    			if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1 && lock_open_err_flag == 1)//开锁超时异常处理
;;;370    			{
;;;371    				lock_open_err_flag = 0;
;;;372    				Lock_Open = 0;
;;;373    				lock_stop();
;;;374    				Shaking = 0;
;;;375    				USART_OUT(USART1, "open lock unusual\r\n");
;;;376    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;377    				USART_OUT(USART1, "send_buff=%s\r\n", send_buff);
;;;378    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;379    				if(ret != NULL)
;;;380    				{
;;;381    					memset(expressText, 0 ,512);
;;;382    					memset(cipherText, 0 ,512);
;;;383    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"1",'"',"ok",'"',"1");
;;;384    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;385    					AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;386    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;387    					if(ret != NULL)
;;;388    					{
;;;389    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;390    					}
;;;391    				}
;;;392    				else
;;;393    				{
;;;394    
;;;395    				}	
;;;396    			}
;;;397    		}
;;;398    		//关锁逻辑
;;;399    		if(Lock_Close == 1)
;;;400    		{
;;;401    			if(timer_is_timeout_1ms(timer_close_lock, 4000) == 0)
;;;402    			{
;;;403    				lock_open();
;;;404    				lock_close_err_flag = 1;
;;;405    				USART_OUT(USART1, "Lock_Close timer\r\n");
;;;406    			}
;;;407    			USART_OUT(USART1, "lock close\r\n");
;;;408    			if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0)	//正常关锁
;;;409    			{
;;;410    				lock_close();
;;;411    				USART_OUT(USART1, "BBB lock close\r\n");
;;;412    			}
;;;413    			
;;;414    //			if(LOCK_ON_READ() == 0)	//正常关锁
;;;415    			if(lock_on_status_get() == 0)
;;;416    			{
;;;417    				Lock_Close = 0;
;;;418    				lock_stop();	//停止运行
;;;419    				Shaking = 0;
;;;420    				USART_OUT(USART1, "BBB lock_stop\r\n");
;;;421    				
;;;422    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;423    				USART_OUT(USART1, "PublishLockBackbuf=%s\r\n", send_buff);
;;;424    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;425    				if(ret != NULL)
;;;426    				{
;;;427    					memset(expressText, 0 ,512);
;;;428    					memset(cipherText, 0 ,512);
;;;429    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"2",'"',"ok",'"',"0");
;;;430    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;431    					AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;432    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;433    					if(ret != NULL)
;;;434    					{
;;;435    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;436    					}
;;;437    				}
;;;438    			}
;;;439    			
;;;440    			if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0 && lock_close_err_flag == 1) //关锁超时处理
;;;441    			{
;;;442    				lock_close_err_flag = 0;
;;;443    				Lock_Close = 0;
;;;444    				lock_stop();	//停止运行
;;;445    				Shaking = 0;
;;;446    				USART_OUT(USART1, "close lock unusual\r\n");
;;;447    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;448    				USART_OUT(USART1, "send_buff=%s\r\n", send_buff);
;;;449    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;450    				if(ret != NULL)
;;;451    				{
;;;452    					memset(expressText, 0 ,512);
;;;453    					memset(cipherText, 0 ,512);
;;;454    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"2",'"',"ok",'"',"1");
;;;455    					AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;456    				
;;;457    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;458    					if(ret != NULL)
;;;459    					{
;;;460    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;461    					}
;;;462    				}
;;;463    			}		
;;;464    		}
;;;465    		//按键
;;;466    		if(button_get_value() == 0)
;;;467    		{
;;;468    			USART_OUT(USART1, "button_get_value\r\n");
;;;469    			timer_is_timeout_1ms(timer_close_lock, 0);
;;;470    			Lock_Close = 1;
;;;471    			Shaking=1;	
;;;472    		}
;;;473    			
;;;474    		
;;;475    		//报警器
;;;476    		p1 = strstr((char*)protocol_buff, "topic: bell/");
;;;477    		p2 = strstr((char *)p1,(char *)PARK_LOCK_Buffer);
;;;478    		if(strncmp((char *)p1,(char *)"topic: bell/",12)==0 && bell_flag==0)
;;;479    		{
;;;480    			timer_is_timeout_1ms(timer_heartbeat, 0);
;;;481    			USART_OUT(USART1, "bell\r\n");
;;;482    			memset(protocol_buff, 0, 512);	
;;;483    			bell_flag=1;
;;;484      	
;;;485    			BEEP_ON();
;;;486    			timer_delay_1ms(100);
;;;487    			BEEP_OFF();
;;;488    		}
;;;489    				
;;;490    		if(bell_flag == 1)
;;;491    		{
;;;492    			bell_flag = 0;
;;;493    		}
;;;494    		//晃动报警
;;;495    		if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==1 && Shaking==0)
;;;496    		{
;;;497    			USART_OUT(USART1, "Sharking\r\n");
;;;498    			if(timer_is_timeout_1ms(timer_bell_1, 400) == 0)
;;;499    			{
;;;500    				BEEP_ON();
;;;501    			}
;;;502    			if(timer_is_timeout_1ms(timer_bell_2, 800) == 0)
;;;503    			{
;;;504    				BEEP_OFF();
;;;505    			}
;;;506    		}
;;;507    		else
;;;508    		{
;;;509    			BEEP_OFF();
;;;510    		}
;;;511    		
;;;512    		//断线重连
;;;513    		p1 = strstr((char*)protocol_buff, "MQTT CLOSE");
;;;514    		if(p1 !=NULL)
;;;515    		{
;;;516    			memset(protocol_buff, 0, 512);	
;;;517    			gprs_status = 0;
;;;518    			USART_OUT(USART1, "MQTT SERVER CLOSE\r\n");
;;;519    		}
;;;520    		
;;;521    
;;;522    		//心跳
;;;523    		if(timer_is_timeout_1ms(timer_heartbeat, 1000*60*10) == 0)
;;;524    		{
;;;525    			memset(send_buff, 0, 100);
;;;526    			sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",1,2\r\n");
;;;527    	
;;;528    			USART_OUT(USART1, "heartbeat=%s\r\n", send_buff);
;;;529    			ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;530    			if(ret != NULL)
;;;531    			{
;;;532    				memset(heartbeat_buff, 0, 2);
;;;533    				heartbeat_buff[0] = 0x30;
;;;534    				ret = gprs_send_at(heartbeat_buff, "OK", 300, 0);
;;;535    				if(ret != NULL)
;;;536    				{
;;;537    					
;;;538    				}	
;;;539    			}
;;;540    			else
;;;541    			{
;;;542    				
;;;543    			}
;;;544    		}	
;;;545    		
;;;546    		
;;;547    //		if(timer_is_timeout_1ms(timer_gps_cycle, 1000*60*60*24) == 0)
;;;548    //		{
;;;549    //			gps_flag = 1;
;;;550    //		}
;;;551    		
;;;552    		
;;;553    
;;;554    	}	 
;;;555    }
;;;556     
                          ENDP

00008e  0000              DCW      0x0000
                  |L1.144|
000090  75617274          DCB      "uart1 is ok\r\n",0
000094  31206973
000098  206f6b0d
00009c  0a00    
00009e  00                DCB      0
00009f  00                DCB      0
                  |L1.160|
                          DCD      0x40013800
                  |L1.164|
                          DCD      0x000927c0
                  |L1.168|
0000a8  74657374          DCB      "test",0
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0
                  |L1.176|
0000b0  6d717474          DCB      "mqtt_publist ok\r\n",0
0000b4  5f707562
0000b8  6c697374
0000bc  206f6b0d
0000c0  0a00    
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L1.196|
0000c4  434c4f53          DCB      "CLOSE",0
0000c8  4500    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L1.204|
                          DCD      mqtt_buff+0x2
                  |L1.208|
                          DCD      ||p1||
                  |L1.212|
                          DCD      gprs_status
                  |L1.216|
0000d8  4d515454          DCB      "MQTT SERVER CLOSE\r\n",0
0000dc  20534552
0000e0  56455220
0000e4  434c4f53
0000e8  450d0a00

                          AREA ||i.test_encrypt_ecb||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  test_encrypt_ecb PROC
;;;107    
;;;108    static void test_encrypt_ecb(void)
000000  b500              PUSH     {lr}
;;;109    {
000002  b0bf              SUB      sp,sp,#0xfc
;;;110    
;;;111        uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
000004  a022              ADR      r0,|L2.144|
000006  e890000e          LDM      r0,{r1-r3}
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  e9cd233c          STRD     r2,r3,[sp,#0xf0]
000010  913b              STR      r1,[sp,#0xec]
000012  903e              STR      r0,[sp,#0xf8]
;;;112        uint8_t out[] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
000014  a322              ADR      r3,|L2.160|
000016  e9d31200          LDRD     r1,r2,[r3,#0]
00001a  e9d30302          LDRD     r0,r3,[r3,#8]
00001e  e9cd0339          STRD     r0,r3,[sp,#0xe4]
000022  e9cd1237          STRD     r1,r2,[sp,#0xdc]
;;;113    
;;;114    
;;;115        uint8_t in[]  = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
000026  a322              ADR      r3,|L2.176|
000028  e9d32000          LDRD     r2,r0,[r3,#0]
00002c  e9d31302          LDRD     r1,r3,[r3,#8]
000030  e9cd1335          STRD     r1,r3,[sp,#0xd4]
000034  e9cd2033          STRD     r2,r0,[sp,#0xcc]
;;;116       	struct AES_ctx ctx;
;;;117    	
;;;118    	
;;;119    	sprintf((char *)expressText,"{%c%s%c:%s}",'"',"battery",'"',"20");
000038  a021              ADR      r0,|L2.192|
00003a  2122              MOVS     r1,#0x22
00003c  a321              ADR      r3,|L2.196|
00003e  460a              MOV      r2,r1
000040  e9cd1000          STRD     r1,r0,[sp,#0]
000044  a121              ADR      r1,|L2.204|
000046  4824              LDR      r0,|L2.216|
000048  f7fffffe          BL       __2sprintf
;;;120    //	expressText[0] = 0x31;
;;;121    	USART_OUT(USART1, "expressText66=%s\r\n", expressText);
00004c  4a22              LDR      r2,|L2.216|
00004e  a123              ADR      r1,|L2.220|
000050  4827              LDR      r0,|L2.240|
000052  f7fffffe          BL       USART_OUT
;;;122    	
;;;123    
;;;124    	
;;;125    //	USART_OUT(USART1, "in=%s\r\n", in);
;;;126    //	USART_OUT(USART1, "out=%s\r\n", out);
;;;127    //	AES_init_ctx(&ctx, key);
;;;128    //	AES_ECB_encrypt(&ctx, in);
;;;129    //	USART_OUT(USART1, "in=%s\r\n", in);
;;;130    //	USART_OUT(USART1, "out=%s\r\n", out);
;;;131        AES_init_ctx(&ctx, aesKey);
000056  4927              LDR      r1,|L2.244|
000058  a803              ADD      r0,sp,#0xc
00005a  f7fffffe          BL       AES_init_ctx
;;;132        AES_ECB_encrypt(&ctx, expressText);
00005e  491e              LDR      r1,|L2.216|
000060  a803              ADD      r0,sp,#0xc
000062  f7fffffe          BL       AES_ECB_encrypt
;;;133    
;;;134    	USART_OUT(USART1, expressText);
000066  491c              LDR      r1,|L2.216|
000068  4821              LDR      r0,|L2.240|
00006a  f7fffffe          BL       USART_OUT
;;;135    
;;;136        if (0 == memcmp((char*) out, (char*) in, 16))
00006e  2210              MOVS     r2,#0x10
000070  a933              ADD      r1,sp,#0xcc
000072  a837              ADD      r0,sp,#0xdc
000074  f7fffffe          BL       memcmp
000078  b920              CBNZ     r0,|L2.132|
;;;137        {
;;;138            USART_OUT(USART1, "SUCCESS!\n");
00007a  a11f              ADR      r1,|L2.248|
00007c  481c              LDR      r0,|L2.240|
00007e  f7fffffe          BL       USART_OUT
000082  e003              B        |L2.140|
                  |L2.132|
;;;139        }
;;;140        else
;;;141        {
;;;142            USART_OUT(USART1, "FAILURE!\n");
000084  a11f              ADR      r1,|L2.260|
000086  481a              LDR      r0,|L2.240|
000088  f7fffffe          BL       USART_OUT
                  |L2.140|
;;;143        }
;;;144    }
00008c  b03f              ADD      sp,sp,#0xfc
00008e  bd00              POP      {pc}
;;;145    
                          ENDP

                  |L2.144|
000090  2b7e1516          DCB      "+~",21,22,"(",174,210,166,171,247,21,136,"\t",207,"O<"
000094  28aed2a6
000098  abf71588
00009c  09cf4f3c
                  |L2.160|
0000a0  3ad77bb4          DCB      ":",215,"{",180,"\rz6`",168,158,202,243,"$$f",239,151
0000a4  0d7a3660
0000a8  a89ecaf3
0000ac  2466ef97
                  |L2.176|
0000b0  6bc1bee2          DCB      "k",193,190,226,".@",159,150,233,"=~",17,"s",147,23,"*"
0000b4  2e409f96
0000b8  e93d7e11
0000bc  7393172a
                  |L2.192|
0000c0  323000            DCB      "20",0
0000c3  00                DCB      0
                  |L2.196|
0000c4  62617474          DCB      "battery",0
0000c8  65727900
                  |L2.204|
0000cc  7b256325          DCB      "{%c%s%c:%s}",0
0000d0  7325633a
0000d4  25737d00
                  |L2.216|
                          DCD      expressText
                  |L2.220|
0000dc  65787072          DCB      "expressText66=%s\r\n",0
0000e0  65737354
0000e4  65787436
0000e8  363d2573
0000ec  0d0a00  
0000ef  00                DCB      0
                  |L2.240|
                          DCD      0x40013800
                  |L2.244|
                          DCD      aesKey
                  |L2.248|
0000f8  53554343          DCB      "SUCCESS!\n",0
0000fc  45535321
000100  0a00    
000102  00                DCB      0
000103  00                DCB      0
                  |L2.260|
000104  4641494c          DCB      "FAILURE!\n",0
000108  55524521
00010c  0a00    
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  receiveText
                          %        24
                  expressText
                          %        512
                  cipherText
                          %        512
                  aesKey
                          %        16
                  gpsx
                          %        166
                  longitudedtbuf
                          %        30
                  latitudedtbuf
                          %        30
                  dtbuf
                          %        50
                  lockbuf
                          %        16
                  lockbuff
                          %        16
                  send_buff
                          %        100
                  protocol_buff
                          %        512
                  gps_buff
                          %        512
                  tmp
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  bell_flag
000000  00                DCB      0x00
                  Shaking
000001  00                DCB      0x00
                  Shaking_Alarm_Flag
000002  0000              DCB      0x00,0x00
                  Bat_V
000004  0000              DCB      0x00,0x00
                  Bat_Pre
000006  0000              DCB      0x00,0x00
                  Bat_Pre_Flag
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  ||p1||
                          DCD      0x00000000
                  ||p2||
                          DCD      0x00000000
                  lock_open_err_flag
000014  00                DCB      0x00
                  lock_close_err_flag
000015  00                DCB      0x00
                  Lock_Open
000016  00                DCB      0x00
                  Lock_Open_On
000017  00                DCB      0x00
                  Lock_Open_Off
000018  00                DCB      0x00
                  Lock_Close
000019  00                DCB      0x00
                  Lock_Close_On
00001a  00                DCB      0x00
                  Lock_Close_Off
00001b  00                DCB      0x00
                  lock_open_success_flag
00001c  00                DCB      0x00
                  flag
00001d  04                DCB      0x04
                  second_flag
00001e  00                DCB      0x00
                  LOCK_ON_flag
00001f  01                DCB      0x01
                  LOCK_OFF_flag
000020  01                DCB      0x01
                  gps_flag
000021  00                DCB      0x00
                  gps_err_cnt
000022  00                DCB      0x00
                  heartbeat_buff
000023  00                DCB      0x00
000024  00                DCB      0x00

                  __ARM_use_no_argv EQU 0
