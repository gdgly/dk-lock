; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -I..\MQTT -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\main.crf ..\app\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;147    
;;;148    int main(void)
000000  bf00              NOP      
;;;149    { 
;;;150    	u16 j,i,rxlen;
;;;151    	u16 k = 0x1A;
;;;152    	u8 upload=0; 
000002  bf00              NOP      
;;;153    	u8 *ret;
;;;154    	uint8_t status = 0;
000004  bf00              NOP      
;;;155    
;;;156    
;;;157    	int mqtt_pub = 0;
000006  bf00              NOP      
;;;158    	int mqtt_sub = 0;
000008  bf00              NOP      
;;;159    	int mqtt_con = 0;
00000a  bf00              NOP      
;;;160    
;;;161    	
;;;162    	bsp_init();
00000c  f7fffffe          BL       bsp_init
;;;163                             
;;;164    	USART_OUT(USART1, "uart1 is ok\r\n");
000010  a114              ADR      r1,|L1.100|
000012  4818              LDR      r0,|L1.116|
000014  f7fffffe          BL       USART_OUT
;;;165    
;;;166    	while(1)
000018  e023              B        |L1.98|
                  |L1.26|
;;;167    	{
;;;168    	
;;;169    		gprs_init_task();
00001a  f7fffffe          BL       gprs_init_task
;;;170    
;;;171    	
;;;172    		usart1_recv_data();
00001e  f7fffffe          BL       usart1_recv_data
;;;173    		usart2_recv_data();
000022  f7fffffe          BL       usart2_recv_data
;;;174    //		mqtt_subscribe();
;;;175    		
;;;176    //		if(timer_is_timeout_1ms(timer_batt, 1000*60*10) == 0)
;;;177    		{
;;;178    //			mqtt_pub = mqtt_publist("test", 0, 0, 2, 1);
;;;179    //			if(mqtt_pub == 1)
;;;180    //			{
;;;181    //				USART_OUT(USART1, "mqtt_publist ok\r\n");
;;;182    //			}
;;;183    //			mqtt_sub = mqtt_subscribe_msg("test", 0, 2);
;;;184    //			if(mqtt_sub == 1)
;;;185    //			{
;;;186    //				USART_OUT(USART1, "mqtt_subscribe_msg ok\r\n");
;;;187    //			}
;;;188    		}
;;;189    		
;;;190    		
;;;191    		
;;;192    		
;;;193    		if(timer_is_timeout_1ms(timer_keep_alive, 1000*60) == 0)
000026  f64e2160          MOV      r1,#0xea60
00002a  2002              MOVS     r0,#2
00002c  f7fffffe          BL       timer_is_timeout_1ms
000030  b908              CBNZ     r0,|L1.54|
;;;194    		{
;;;195    			mqtt_keep_alive();
000032  f7fffffe          BL       mqtt_keep_alive
                  |L1.54|
;;;196    		}
;;;197    
;;;198    
;;;199    
;;;200    
;;;201    		
;;;202    		
;;;203    		p1 = strstr((char*)mqtt_buff.pdata, "CLOSE");
000036  a110              ADR      r1,|L1.120|
000038  4811              LDR      r0,|L1.128|
00003a  f7fffffe          BL       strstr
00003e  4911              LDR      r1,|L1.132|
000040  6008              STR      r0,[r1,#0]  ; p1
;;;204    		if(p1 !=NULL)
000042  4608              MOV      r0,r1
000044  6800              LDR      r0,[r0,#0]  ; p1
000046  b160              CBZ      r0,|L1.98|
;;;205    		{
;;;206    			memset(&mqtt_buff, 0, sizeof(usart_buff_t));	
000048  f2402102          MOV      r1,#0x202
00004c  480c              LDR      r0,|L1.128|
00004e  1e80              SUBS     r0,r0,#2
000050  f7fffffe          BL       __aeabi_memclr
;;;207    			gprs_status = 0;
000054  2000              MOVS     r0,#0
000056  490c              LDR      r1,|L1.136|
000058  7008              STRB     r0,[r1,#0]
;;;208    			USART_OUT(USART1, "MQTT SERVER CLOSE\r\n");
00005a  a10c              ADR      r1,|L1.140|
00005c  4805              LDR      r0,|L1.116|
00005e  f7fffffe          BL       USART_OUT
                  |L1.98|
000062  e7da              B        |L1.26|
;;;209    		}
;;;210    	}
;;;211    	
;;;212    	
;;;213    	
;;;214    	
;;;215    	while(1)
;;;216    	{	 
;;;217    
;;;218    		while(1)
;;;219    		{
;;;220    			gprs_config();
;;;221    			if(gprs_status == 255)
;;;222    			{
;;;223    				MakeFile_MD5_Checksum(PARK_LOCK_Buffer, 16);			
;;;224    				break;
;;;225    			}
;;;226    		}
;;;227    	
;;;228    		
;;;229    		usart1_recv_data();
;;;230    		usart2_recv_data();
;;;231    	
;;;232    		// 电池信息
;;;233    		Bat_V =Get_Adc_Average(ADC_Channel_0,10);
;;;234    		Bat_V=Bat_V*3300/4096;
;;;235    		Bat_V=Bat_V*88/20;
;;;236    		Bat_Pre=(Bat_V-5000)*100/2400;
;;;237    		
;;;238    //		if(Bat_Pre<20&&Bat_Pre>10&&Bat_Pre_Flag==0)
;;;239    		if(timer_is_timeout_1ms(timer_batt, 1000*60*60) == 0)
;;;240    		{	
;;;241    			Bat_Pre_Flag =  1;
;;;242    			memset(send_buff, 0, 100);	
;;;243    			sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",24,2\r\n");
;;;244    
;;;245    			USART_OUT(USART1, "ccc=%s\r\n", send_buff);
;;;246    
;;;247    			ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;248    			if(ret != NULL)
;;;249    			{
;;;250    				memset(expressText, 0 ,512);
;;;251    				memset(cipherText, 0 ,512);
;;;252    				sprintf((char *)expressText, "{%c%s%c:%s}",'"',"battery",'"',"20");
;;;253    				USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;254    				AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;255    				
;;;256    				USART_OUT(USART1, "aesKey=%s\r\n", aesKey);
;;;257    				USART_OUT(USART1, "cipherText=%s\r\n", cipherText);
;;;258    				ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;259    				if(ret != NULL)
;;;260    				{
;;;261    					timer_is_timeout_1ms(timer_heartbeat, 0);
;;;262    				}			
;;;263    			}
;;;264    			else
;;;265    			{
;;;266    			}
;;;267    
;;;268    		}
;;;269    //		//接收锁数据
;;;270    		p1 = strstr((u8*)protocol_buff, "topic: lock/");
;;;271    		p2 = strstr((u8 *)p1,(u8 *)PARK_LOCK_Buffer);
;;;272    		if(strncmp((char *)p1,(char *)"topic: lock/",12)==0)
;;;273    		{
;;;274    			
;;;275    			if(LOCK_ON_READ()==0 || LOCK_OFF_READ()==0)
;;;276    			{
;;;277    			timer_is_timeout_1ms(timer_heartbeat, 0);
;;;278    			USART_OUT(USART1, "lock data\r\n");
;;;279    			memset(receiveText ,0 , 512);
;;;280    			memset(expressText ,0 , 512);
;;;281    			
;;;282    			strcpy((char*)receiveText ,(char *)(p1+33));
;;;283    			USART_OUT(USART1, "receiveText=%s\r\n", receiveText);
;;;284    			AES_Decrypt(expressText, receiveText, aesKey);
;;;285    			if(*expressText==0x31)
;;;286    			{
;;;287    //				if(LOCK_ON_READ() == 0)
;;;288    //				if(lock_on_status_get() == 0)
;;;289    				if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1)
;;;290    				{
;;;291    					timer_is_timeout_1ms(timer_open_lock, 0);
;;;292    					Shaking=1;
;;;293    					Lock_Open=1;
;;;294    					USART_OUT(USART1, "Lock_Open11111\r\n");
;;;295    				}
;;;296    				else
;;;297    				{
;;;298    					Lock_Open=0;
;;;299    				}
;;;300    			}
;;;301    			else if(*expressText==0x32)
;;;302    			{
;;;303    //				if(LOCK_OFF_READ() == 0)
;;;304    //				if(lock_off_status_get() == 0)
;;;305    				if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0)	
;;;306    				{
;;;307    					timer_is_timeout_1ms(timer_close_lock, 0);
;;;308    					Shaking=1;
;;;309    					Lock_Close=1;
;;;310    					USART_OUT(USART1, "Lock_Close11111\r\n");
;;;311    				}
;;;312    				else
;;;313    				{
;;;314    					Lock_Close=0;
;;;315    				}
;;;316    			
;;;317    			}
;;;318    			else if(*expressText == 0x30)
;;;319    			{
;;;320    				lock_stop();	//停止运行;
;;;321    			}
;;;322    			
;;;323    			memset(protocol_buff, 0, 512);					
;;;324    		}
;;;325    	}
;;;326    
;;;327    		//开锁逻辑		
;;;328    		if(Lock_Open == 1)
;;;329    		{
;;;330    
;;;331    			if(timer_is_timeout_1ms(timer_open_lock, 4000) == 0)
;;;332    			{
;;;333    				lock_open_err_flag = 1;
;;;334    				
;;;335    				lock_close();
;;;336    				USART_OUT(USART1, "Lock_Open timer\r\n");
;;;337    			}
;;;338    			USART_OUT(USART1, "Lock_Open\r\n");
;;;339    			if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1)
;;;340    			{
;;;341    				lock_open();	//开锁	
;;;342    				USART_OUT(USART1, "AAA lock_open\r\n");
;;;343    			}
;;;344    //			if(LOCK_OFF_READ()==0) //正常开锁
;;;345    			if(lock_off_status_get() == 0)
;;;346    			{
;;;347    				USART_OUT(USART1, "AAA lock_stop\r\n");
;;;348    				
;;;349    				Lock_Open = 0;
;;;350    				lock_stop();	//停止运行
;;;351    				Shaking = 0;
;;;352    				
;;;353    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;354    				USART_OUT(USART1, "send_buff=%s\r\n", send_buff);
;;;355    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;356    				if(ret != NULL)
;;;357    				{
;;;358    					memset(expressText, 0 ,512);
;;;359    					memset(cipherText, 0 ,512);
;;;360    					sprintf(expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"1",'"',"ok",'"',"0");
;;;361    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;362    					AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;363    					USART_OUT(USART1, "cipherText=%s\r\n", cipherText);
;;;364    					
;;;365    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;366    					if(ret != NULL)
;;;367    					{
;;;368    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;369    					}
;;;370    				}			
;;;371    			}
;;;372    			
;;;373    			if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1 && lock_open_err_flag == 1)//开锁超时异常处理
;;;374    			{
;;;375    				lock_open_err_flag = 0;
;;;376    				Lock_Open = 0;
;;;377    				lock_stop();
;;;378    				Shaking = 0;
;;;379    				USART_OUT(USART1, "open lock unusual\r\n");
;;;380    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;381    				USART_OUT(USART1, "send_buff=%s\r\n", send_buff);
;;;382    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;383    				if(ret != NULL)
;;;384    				{
;;;385    					memset(expressText, 0 ,512);
;;;386    					memset(cipherText, 0 ,512);
;;;387    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"1",'"',"ok",'"',"1");
;;;388    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;389    					AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;390    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;391    					if(ret != NULL)
;;;392    					{
;;;393    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;394    					}
;;;395    				}
;;;396    				else
;;;397    				{
;;;398    
;;;399    				}	
;;;400    			}
;;;401    		}
;;;402    		//关锁逻辑
;;;403    		if(Lock_Close == 1)
;;;404    		{
;;;405    			if(timer_is_timeout_1ms(timer_close_lock, 4000) == 0)
;;;406    			{
;;;407    				lock_open();
;;;408    				lock_close_err_flag = 1;
;;;409    				USART_OUT(USART1, "Lock_Close timer\r\n");
;;;410    			}
;;;411    			USART_OUT(USART1, "lock close\r\n");
;;;412    			if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0)	//正常关锁
;;;413    			{
;;;414    				lock_close();
;;;415    				USART_OUT(USART1, "BBB lock close\r\n");
;;;416    			}
;;;417    			
;;;418    //			if(LOCK_ON_READ() == 0)	//正常关锁
;;;419    			if(lock_on_status_get() == 0)
;;;420    			{
;;;421    				Lock_Close = 0;
;;;422    				lock_stop();	//停止运行
;;;423    				Shaking = 0;
;;;424    				USART_OUT(USART1, "BBB lock_stop\r\n");
;;;425    				
;;;426    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;427    				USART_OUT(USART1, "PublishLockBackbuf=%s\r\n", send_buff);
;;;428    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;429    				if(ret != NULL)
;;;430    				{
;;;431    					memset(expressText, 0 ,512);
;;;432    					memset(cipherText, 0 ,512);
;;;433    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"2",'"',"ok",'"',"0");
;;;434    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;435    					AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;436    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;437    					if(ret != NULL)
;;;438    					{
;;;439    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;440    					}
;;;441    				}
;;;442    			}
;;;443    			
;;;444    			if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0 && lock_close_err_flag == 1) //关锁超时处理
;;;445    			{
;;;446    				lock_close_err_flag = 0;
;;;447    				Lock_Close = 0;
;;;448    				lock_stop();	//停止运行
;;;449    				Shaking = 0;
;;;450    				USART_OUT(USART1, "close lock unusual\r\n");
;;;451    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;452    				USART_OUT(USART1, "send_buff=%s\r\n", send_buff);
;;;453    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;454    				if(ret != NULL)
;;;455    				{
;;;456    					memset(expressText, 0 ,512);
;;;457    					memset(cipherText, 0 ,512);
;;;458    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"2",'"',"ok",'"',"1");
;;;459    					AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;460    				
;;;461    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;462    					if(ret != NULL)
;;;463    					{
;;;464    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;465    					}
;;;466    				}
;;;467    			}		
;;;468    		}
;;;469    		//按键
;;;470    		if(button_get_value() == 0)
;;;471    		{
;;;472    			USART_OUT(USART1, "button_get_value\r\n");
;;;473    			timer_is_timeout_1ms(timer_close_lock, 0);
;;;474    			Lock_Close = 1;
;;;475    			Shaking=1;	
;;;476    		}
;;;477    			
;;;478    		
;;;479    		//报警器
;;;480    		p1 = strstr((char*)protocol_buff, "topic: bell/");
;;;481    		p2 = strstr((char *)p1,(char *)PARK_LOCK_Buffer);
;;;482    		if(strncmp((char *)p1,(char *)"topic: bell/",12)==0 && bell_flag==0)
;;;483    		{
;;;484    			timer_is_timeout_1ms(timer_heartbeat, 0);
;;;485    			USART_OUT(USART1, "bell\r\n");
;;;486    			memset(protocol_buff, 0, 512);	
;;;487    			bell_flag=1;
;;;488      	
;;;489    			BEEP_ON();
;;;490    			timer_delay_1ms(100);
;;;491    			BEEP_OFF();
;;;492    		}
;;;493    				
;;;494    		if(bell_flag == 1)
;;;495    		{
;;;496    			bell_flag = 0;
;;;497    		}
;;;498    		//晃动报警
;;;499    		if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==1 && Shaking==0)
;;;500    		{
;;;501    			USART_OUT(USART1, "Sharking\r\n");
;;;502    			if(timer_is_timeout_1ms(timer_bell_1, 400) == 0)
;;;503    			{
;;;504    				BEEP_ON();
;;;505    			}
;;;506    			if(timer_is_timeout_1ms(timer_bell_2, 800) == 0)
;;;507    			{
;;;508    				BEEP_OFF();
;;;509    			}
;;;510    		}
;;;511    		else
;;;512    		{
;;;513    			BEEP_OFF();
;;;514    		}
;;;515    		
;;;516    		//断线重连
;;;517    		p1 = strstr((char*)protocol_buff, "MQTT CLOSE");
;;;518    		if(p1 !=NULL)
;;;519    		{
;;;520    			memset(protocol_buff, 0, 512);	
;;;521    			gprs_status = 0;
;;;522    			USART_OUT(USART1, "MQTT SERVER CLOSE\r\n");
;;;523    		}
;;;524    		
;;;525    
;;;526    		//心跳
;;;527    		if(timer_is_timeout_1ms(timer_heartbeat, 1000*60*10) == 0)
;;;528    		{
;;;529    			memset(send_buff, 0, 100);
;;;530    			sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",1,2\r\n");
;;;531    	
;;;532    			USART_OUT(USART1, "heartbeat=%s\r\n", send_buff);
;;;533    			ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;534    			if(ret != NULL)
;;;535    			{
;;;536    				memset(heartbeat_buff, 0, 2);
;;;537    				heartbeat_buff[0] = 0x30;
;;;538    				ret = gprs_send_at(heartbeat_buff, "OK", 300, 0);
;;;539    				if(ret != NULL)
;;;540    				{
;;;541    					
;;;542    				}	
;;;543    			}
;;;544    			else
;;;545    			{
;;;546    				
;;;547    			}
;;;548    		}	
;;;549    		
;;;550    		
;;;551    //		if(timer_is_timeout_1ms(timer_gps_cycle, 1000*60*60*24) == 0)
;;;552    //		{
;;;553    //			gps_flag = 1;
;;;554    //		}
;;;555    		
;;;556    		
;;;557    
;;;558    	}	 
;;;559    }
;;;560     
                          ENDP

                  |L1.100|
000064  75617274          DCB      "uart1 is ok\r\n",0
000068  31206973
00006c  206f6b0d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0
                  |L1.116|
                          DCD      0x40013800
                  |L1.120|
000078  434c4f53          DCB      "CLOSE",0
00007c  4500    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L1.128|
                          DCD      mqtt_buff+0x2
                  |L1.132|
                          DCD      ||p1||
                  |L1.136|
                          DCD      gprs_status
                  |L1.140|
00008c  4d515454          DCB      "MQTT SERVER CLOSE\r\n",0
000090  20534552
000094  56455220
000098  434c4f53
00009c  450d0a00

                          AREA ||i.test_encrypt_ecb||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  test_encrypt_ecb PROC
;;;107    
;;;108    static void test_encrypt_ecb(void)
000000  b500              PUSH     {lr}
;;;109    {
000002  b0bf              SUB      sp,sp,#0xfc
;;;110    
;;;111        uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
000004  a022              ADR      r0,|L2.144|
000006  e890000e          LDM      r0,{r1-r3}
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  e9cd233c          STRD     r2,r3,[sp,#0xf0]
000010  913b              STR      r1,[sp,#0xec]
000012  903e              STR      r0,[sp,#0xf8]
;;;112        uint8_t out[] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
000014  a322              ADR      r3,|L2.160|
000016  e9d31200          LDRD     r1,r2,[r3,#0]
00001a  e9d30302          LDRD     r0,r3,[r3,#8]
00001e  e9cd0339          STRD     r0,r3,[sp,#0xe4]
000022  e9cd1237          STRD     r1,r2,[sp,#0xdc]
;;;113    
;;;114    
;;;115        uint8_t in[]  = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
000026  a322              ADR      r3,|L2.176|
000028  e9d32000          LDRD     r2,r0,[r3,#0]
00002c  e9d31302          LDRD     r1,r3,[r3,#8]
000030  e9cd1335          STRD     r1,r3,[sp,#0xd4]
000034  e9cd2033          STRD     r2,r0,[sp,#0xcc]
;;;116       	struct AES_ctx ctx;
;;;117    	
;;;118    	
;;;119    	sprintf((char *)expressText,"{%c%s%c:%s}",'"',"battery",'"',"20");
000038  a021              ADR      r0,|L2.192|
00003a  2122              MOVS     r1,#0x22
00003c  a321              ADR      r3,|L2.196|
00003e  460a              MOV      r2,r1
000040  e9cd1000          STRD     r1,r0,[sp,#0]
000044  a121              ADR      r1,|L2.204|
000046  4824              LDR      r0,|L2.216|
000048  f7fffffe          BL       __2sprintf
;;;120    //	expressText[0] = 0x31;
;;;121    	USART_OUT(USART1, "expressText66=%s\r\n", expressText);
00004c  4a22              LDR      r2,|L2.216|
00004e  a123              ADR      r1,|L2.220|
000050  4827              LDR      r0,|L2.240|
000052  f7fffffe          BL       USART_OUT
;;;122    	
;;;123    
;;;124    	
;;;125    //	USART_OUT(USART1, "in=%s\r\n", in);
;;;126    //	USART_OUT(USART1, "out=%s\r\n", out);
;;;127    //	AES_init_ctx(&ctx, key);
;;;128    //	AES_ECB_encrypt(&ctx, in);
;;;129    //	USART_OUT(USART1, "in=%s\r\n", in);
;;;130    //	USART_OUT(USART1, "out=%s\r\n", out);
;;;131        AES_init_ctx(&ctx, aesKey);
000056  4927              LDR      r1,|L2.244|
000058  a803              ADD      r0,sp,#0xc
00005a  f7fffffe          BL       AES_init_ctx
;;;132        AES_ECB_encrypt(&ctx, expressText);
00005e  491e              LDR      r1,|L2.216|
000060  a803              ADD      r0,sp,#0xc
000062  f7fffffe          BL       AES_ECB_encrypt
;;;133    
;;;134    	USART_OUT(USART1, expressText);
000066  491c              LDR      r1,|L2.216|
000068  4821              LDR      r0,|L2.240|
00006a  f7fffffe          BL       USART_OUT
;;;135    
;;;136        if (0 == memcmp((char*) out, (char*) in, 16))
00006e  2210              MOVS     r2,#0x10
000070  a933              ADD      r1,sp,#0xcc
000072  a837              ADD      r0,sp,#0xdc
000074  f7fffffe          BL       memcmp
000078  b920              CBNZ     r0,|L2.132|
;;;137        {
;;;138            USART_OUT(USART1, "SUCCESS!\n");
00007a  a11f              ADR      r1,|L2.248|
00007c  481c              LDR      r0,|L2.240|
00007e  f7fffffe          BL       USART_OUT
000082  e003              B        |L2.140|
                  |L2.132|
;;;139        }
;;;140        else
;;;141        {
;;;142            USART_OUT(USART1, "FAILURE!\n");
000084  a11f              ADR      r1,|L2.260|
000086  481a              LDR      r0,|L2.240|
000088  f7fffffe          BL       USART_OUT
                  |L2.140|
;;;143        }
;;;144    }
00008c  b03f              ADD      sp,sp,#0xfc
00008e  bd00              POP      {pc}
;;;145    
                          ENDP

                  |L2.144|
000090  2b7e1516          DCB      "+~",21,22,"(",174,210,166,171,247,21,136,"\t",207,"O<"
000094  28aed2a6
000098  abf71588
00009c  09cf4f3c
                  |L2.160|
0000a0  3ad77bb4          DCB      ":",215,"{",180,"\rz6`",168,158,202,243,"$$f",239,151
0000a4  0d7a3660
0000a8  a89ecaf3
0000ac  2466ef97
                  |L2.176|
0000b0  6bc1bee2          DCB      "k",193,190,226,".@",159,150,233,"=~",17,"s",147,23,"*"
0000b4  2e409f96
0000b8  e93d7e11
0000bc  7393172a
                  |L2.192|
0000c0  323000            DCB      "20",0
0000c3  00                DCB      0
                  |L2.196|
0000c4  62617474          DCB      "battery",0
0000c8  65727900
                  |L2.204|
0000cc  7b256325          DCB      "{%c%s%c:%s}",0
0000d0  7325633a
0000d4  25737d00
                  |L2.216|
                          DCD      expressText
                  |L2.220|
0000dc  65787072          DCB      "expressText66=%s\r\n",0
0000e0  65737354
0000e4  65787436
0000e8  363d2573
0000ec  0d0a00  
0000ef  00                DCB      0
                  |L2.240|
                          DCD      0x40013800
                  |L2.244|
                          DCD      aesKey
                  |L2.248|
0000f8  53554343          DCB      "SUCCESS!\n",0
0000fc  45535321
000100  0a00    
000102  00                DCB      0
000103  00                DCB      0
                  |L2.260|
000104  4641494c          DCB      "FAILURE!\n",0
000108  55524521
00010c  0a00    
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  receiveText
                          %        24
                  expressText
                          %        512
                  cipherText
                          %        512
                  aesKey
                          %        16
                  gpsx
                          %        166
                  longitudedtbuf
                          %        30
                  latitudedtbuf
                          %        30
                  dtbuf
                          %        50
                  lockbuf
                          %        16
                  lockbuff
                          %        16
                  send_buff
                          %        100
                  protocol_buff
                          %        512
                  gps_buff
                          %        512
                  tmp
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  bell_flag
000000  00                DCB      0x00
                  Shaking
000001  00                DCB      0x00
                  Shaking_Alarm_Flag
000002  0000              DCB      0x00,0x00
                  Bat_V
000004  0000              DCB      0x00,0x00
                  Bat_Pre
000006  0000              DCB      0x00,0x00
                  Bat_Pre_Flag
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  ||p1||
                          DCD      0x00000000
                  ||p2||
                          DCD      0x00000000
                  lock_open_err_flag
000014  00                DCB      0x00
                  lock_close_err_flag
000015  00                DCB      0x00
                  Lock_Open
000016  00                DCB      0x00
                  Lock_Open_On
000017  00                DCB      0x00
                  Lock_Open_Off
000018  00                DCB      0x00
                  Lock_Close
000019  00                DCB      0x00
                  Lock_Close_On
00001a  00                DCB      0x00
                  Lock_Close_Off
00001b  00                DCB      0x00
                  lock_open_success_flag
00001c  00                DCB      0x00
                  flag
00001d  04                DCB      0x04
                  second_flag
00001e  00                DCB      0x00
                  LOCK_ON_flag
00001f  01                DCB      0x01
                  LOCK_OFF_flag
000020  01                DCB      0x01
                  gps_flag
000021  00                DCB      0x00
                  gps_err_cnt
000022  00                DCB      0x00
                  heartbeat_buff
000023  00                DCB      0x00
000024  00                DCB      0x00

                  __ARM_use_no_argv EQU 0
