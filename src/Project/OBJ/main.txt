; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -I..\MQTT -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\main.crf ..\app\main.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;147    
;;;148    int main(void)
000000  b508              PUSH     {r3,lr}
;;;149    { 
;;;150    	u16 j,i,rxlen;
;;;151    	u16 k = 0x1A;
000002  bf00              NOP      
;;;152    	u8 upload=0; 
000004  bf00              NOP      
;;;153    	u8 *ret;
;;;154    	uint8_t status = 0;
000006  bf00              NOP      
;;;155    //	u8 tt = 0;
;;;156    	static u8 mqtt_flag = 0;
;;;157    //	u8 buf 
;;;158    	u8 end_char[1];
;;;159    	int mqtt_pub = 0;
000008  bf00              NOP      
;;;160    	int mqtt_con = 0;
00000a  2400              MOVS     r4,#0
;;;161    	
;;;162    	end_char[0] = 0x1A;//结束字符
00000c  201a              MOVS     r0,#0x1a
00000e  9000              STR      r0,[sp,#0]
;;;163    
;;;164    	
;;;165    	bsp_init();
000010  f7fffffe          BL       bsp_init
;;;166    	
;;;167                             
;;;168    	USART_OUT(USART1, "uart1 is ok\r\n");
000014  a11c              ADR      r1,|L1.136|
000016  4820              LDR      r0,|L1.152|
000018  f7fffffe          BL       USART_OUT
;;;169    
;;;170    	
;;;171    //	mqtt_keep_alive();
;;;172    //	
;;;173    //	mqtt_qos0();
;;;174    	
;;;175    	while(1)
00001c  e032              B        |L1.132|
                  |L1.30|
;;;176    	{
;;;177    	
;;;178    		gprs_init_task();
00001e  f7fffffe          BL       gprs_init_task
;;;179    		
;;;180    		if(mqtt_flag == 0)
000022  481e              LDR      r0,|L1.156|
000024  7800              LDRB     r0,[r0,#0]  ; mqtt_flag
000026  b988              CBNZ     r0,|L1.76|
;;;181    		{
;;;182    			timer_delay_1ms(1500);
000028  f24050dc          MOV      r0,#0x5dc
00002c  f7fffffe          BL       timer_delay_1ms
;;;183    			mqtt_con = mqtt_connect();
000030  f7fffffe          BL       mqtt_connect
000034  4604              MOV      r4,r0
;;;184    			if(1 == mqtt_con)
000036  2c01              CMP      r4,#1
000038  d108              BNE      |L1.76|
;;;185    			{
;;;186    				mqtt_flag = 1;
00003a  4918              LDR      r1,|L1.156|
00003c  7008              STRB     r0,[r1,#0]
;;;187    				timer_delay_1ms(20);
00003e  2014              MOVS     r0,#0x14
000040  f7fffffe          BL       timer_delay_1ms
;;;188    				USART_OUT(USART1, "mqtt_connect ok\r\n");
000044  a116              ADR      r1,|L1.160|
000046  4814              LDR      r0,|L1.152|
000048  f7fffffe          BL       USART_OUT
                  |L1.76|
;;;189    			}
;;;190    		}
;;;191    		
;;;192    		usart2_recv_data();
00004c  f7fffffe          BL       usart2_recv_data
;;;193    		usart1_recv_data();
000050  f7fffffe          BL       usart1_recv_data
;;;194    		
;;;195    
;;;196    		p1 = strstr((char*)mqtt_buff->pdata, "CLOSE");
000054  a117              ADR      r1,|L1.180|
000056  4819              LDR      r0,|L1.188|
000058  6800              LDR      r0,[r0,#0]  ; mqtt_buff
00005a  1c80              ADDS     r0,r0,#2
00005c  f7fffffe          BL       strstr
000060  4917              LDR      r1,|L1.192|
000062  6008              STR      r0,[r1,#0]  ; p1
;;;197    		if(p1 !=NULL)
000064  4608              MOV      r0,r1
000066  6800              LDR      r0,[r0,#0]  ; p1
000068  b160              CBZ      r0,|L1.132|
;;;198    		{
;;;199    			memset(mqtt_buff, 0, sizeof(usart_buff_t));	
00006a  f2402102          MOV      r1,#0x202
00006e  4813              LDR      r0,|L1.188|
000070  6800              LDR      r0,[r0,#0]  ; mqtt_buff
000072  f7fffffe          BL       __aeabi_memclr
;;;200    			mqtt_flag = 0;
000076  2000              MOVS     r0,#0
000078  4908              LDR      r1,|L1.156|
00007a  7008              STRB     r0,[r1,#0]
;;;201    			USART_OUT(USART1, "MQTT SERVER CLOSE\r\n");
00007c  a111              ADR      r1,|L1.196|
00007e  4806              LDR      r0,|L1.152|
000080  f7fffffe          BL       USART_OUT
                  |L1.132|
000084  e7cb              B        |L1.30|
;;;202    		}
;;;203    //		if(timer_is_timeout_1ms(timer_keep_alive, 1000*30) == 0)
;;;204    //		{
;;;205    //			mqtt_keep_alive();
;;;206    //		}
;;;207    
;;;208    //			timer_delay_1ms(5000);
;;;209    //		}
;;;210    
;;;211    	}
;;;212    	
;;;213    	
;;;214    	
;;;215    	
;;;216    	while(1)
;;;217    	{	 
;;;218    
;;;219    		while(1)
;;;220    		{
;;;221    			gprs_config();
;;;222    			if(gprs_status == 255)
;;;223    			{
;;;224    				MakeFile_MD5_Checksum(PARK_LOCK_Buffer, 16);			
;;;225    				break;
;;;226    			}
;;;227    		}
;;;228    	
;;;229    		
;;;230    		usart1_recv_data();
;;;231    		usart2_recv_data();
;;;232    	
;;;233    		// 电池信息
;;;234    		Bat_V =Get_Adc_Average(ADC_Channel_0,10);
;;;235    		Bat_V=Bat_V*3300/4096;
;;;236    		Bat_V=Bat_V*88/20;
;;;237    		Bat_Pre=(Bat_V-5000)*100/2400;
;;;238    		
;;;239    //		if(Bat_Pre<20&&Bat_Pre>10&&Bat_Pre_Flag==0)
;;;240    		if(timer_is_timeout_1ms(timer_batt, 1000*60*60) == 0)
;;;241    		{	
;;;242    			Bat_Pre_Flag =  1;
;;;243    			memset(send_buff, 0, 100);	
;;;244    			sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",24,2\r\n");
;;;245    
;;;246    			USART_OUT(USART1, "ccc=%s\r\n", send_buff);
;;;247    
;;;248    			ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;249    			if(ret != NULL)
;;;250    			{
;;;251    				memset(expressText, 0 ,512);
;;;252    				memset(cipherText, 0 ,512);
;;;253    				sprintf((char *)expressText, "{%c%s%c:%s}",'"',"battery",'"',"20");
;;;254    				USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;255    				AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;256    				
;;;257    				USART_OUT(USART1, "aesKey=%s\r\n", aesKey);
;;;258    				USART_OUT(USART1, "cipherText=%s\r\n", cipherText);
;;;259    				ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;260    				if(ret != NULL)
;;;261    				{
;;;262    					timer_is_timeout_1ms(timer_heartbeat, 0);
;;;263    				}			
;;;264    			}
;;;265    			else
;;;266    			{
;;;267    			}
;;;268    
;;;269    		}
;;;270    //		//接收锁数据
;;;271    		p1 = strstr((u8*)protocol_buff, "topic: lock/");
;;;272    		p2 = strstr((u8 *)p1,(u8 *)PARK_LOCK_Buffer);
;;;273    		if(strncmp((char *)p1,(char *)"topic: lock/",12)==0)
;;;274    		{
;;;275    			
;;;276    			if(LOCK_ON_READ()==0 || LOCK_OFF_READ()==0)
;;;277    			{
;;;278    			timer_is_timeout_1ms(timer_heartbeat, 0);
;;;279    			USART_OUT(USART1, "lock data\r\n");
;;;280    			memset(receiveText ,0 , 512);
;;;281    			memset(expressText ,0 , 512);
;;;282    			
;;;283    			strcpy((char*)receiveText ,(char *)(p1+33));
;;;284    			USART_OUT(USART1, "receiveText=%s\r\n", receiveText);
;;;285    			AES_Decrypt(expressText, receiveText, aesKey);
;;;286    			if(*expressText==0x31)
;;;287    			{
;;;288    //				if(LOCK_ON_READ() == 0)
;;;289    //				if(lock_on_status_get() == 0)
;;;290    				if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1)
;;;291    				{
;;;292    					timer_is_timeout_1ms(timer_open_lock, 0);
;;;293    					Shaking=1;
;;;294    					Lock_Open=1;
;;;295    					USART_OUT(USART1, "Lock_Open11111\r\n");
;;;296    				}
;;;297    				else
;;;298    				{
;;;299    					Lock_Open=0;
;;;300    				}
;;;301    			}
;;;302    			else if(*expressText==0x32)
;;;303    			{
;;;304    //				if(LOCK_OFF_READ() == 0)
;;;305    //				if(lock_off_status_get() == 0)
;;;306    				if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0)	
;;;307    				{
;;;308    					timer_is_timeout_1ms(timer_close_lock, 0);
;;;309    					Shaking=1;
;;;310    					Lock_Close=1;
;;;311    					USART_OUT(USART1, "Lock_Close11111\r\n");
;;;312    				}
;;;313    				else
;;;314    				{
;;;315    					Lock_Close=0;
;;;316    				}
;;;317    			
;;;318    			}
;;;319    			else if(*expressText == 0x30)
;;;320    			{
;;;321    				lock_stop();	//停止运行;
;;;322    			}
;;;323    			
;;;324    			memset(protocol_buff, 0, 512);					
;;;325    		}
;;;326    	}
;;;327    
;;;328    		//开锁逻辑		
;;;329    		if(Lock_Open == 1)
;;;330    		{
;;;331    
;;;332    			if(timer_is_timeout_1ms(timer_open_lock, 4000) == 0)
;;;333    			{
;;;334    				lock_open_err_flag = 1;
;;;335    				
;;;336    				lock_close();
;;;337    				USART_OUT(USART1, "Lock_Open timer\r\n");
;;;338    			}
;;;339    			USART_OUT(USART1, "Lock_Open\r\n");
;;;340    			if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1)
;;;341    			{
;;;342    				lock_open();	//开锁	
;;;343    				USART_OUT(USART1, "AAA lock_open\r\n");
;;;344    			}
;;;345    //			if(LOCK_OFF_READ()==0) //正常开锁
;;;346    			if(lock_off_status_get() == 0)
;;;347    			{
;;;348    				USART_OUT(USART1, "AAA lock_stop\r\n");
;;;349    				
;;;350    				Lock_Open = 0;
;;;351    				lock_stop();	//停止运行
;;;352    				Shaking = 0;
;;;353    				
;;;354    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;355    				USART_OUT(USART1, "send_buff=%s\r\n", send_buff);
;;;356    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;357    				if(ret != NULL)
;;;358    				{
;;;359    					memset(expressText, 0 ,512);
;;;360    					memset(cipherText, 0 ,512);
;;;361    					sprintf(expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"1",'"',"ok",'"',"0");
;;;362    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;363    					AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;364    					USART_OUT(USART1, "cipherText=%s\r\n", cipherText);
;;;365    					
;;;366    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;367    					if(ret != NULL)
;;;368    					{
;;;369    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;370    					}
;;;371    				}			
;;;372    			}
;;;373    			
;;;374    			if(LOCK_ON_READ()==0 && LOCK_OFF_READ()==1 && lock_open_err_flag == 1)//开锁超时异常处理
;;;375    			{
;;;376    				lock_open_err_flag = 0;
;;;377    				Lock_Open = 0;
;;;378    				lock_stop();
;;;379    				Shaking = 0;
;;;380    				USART_OUT(USART1, "open lock unusual\r\n");
;;;381    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;382    				USART_OUT(USART1, "send_buff=%s\r\n", send_buff);
;;;383    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;384    				if(ret != NULL)
;;;385    				{
;;;386    					memset(expressText, 0 ,512);
;;;387    					memset(cipherText, 0 ,512);
;;;388    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"1",'"',"ok",'"',"1");
;;;389    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;390    					AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;391    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;392    					if(ret != NULL)
;;;393    					{
;;;394    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;395    					}
;;;396    				}
;;;397    				else
;;;398    				{
;;;399    
;;;400    				}	
;;;401    			}
;;;402    		}
;;;403    		//关锁逻辑
;;;404    		if(Lock_Close == 1)
;;;405    		{
;;;406    			if(timer_is_timeout_1ms(timer_close_lock, 4000) == 0)
;;;407    			{
;;;408    				lock_open();
;;;409    				lock_close_err_flag = 1;
;;;410    				USART_OUT(USART1, "Lock_Close timer\r\n");
;;;411    			}
;;;412    			USART_OUT(USART1, "lock close\r\n");
;;;413    			if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0)	//正常关锁
;;;414    			{
;;;415    				lock_close();
;;;416    				USART_OUT(USART1, "BBB lock close\r\n");
;;;417    			}
;;;418    			
;;;419    //			if(LOCK_ON_READ() == 0)	//正常关锁
;;;420    			if(lock_on_status_get() == 0)
;;;421    			{
;;;422    				Lock_Close = 0;
;;;423    				lock_stop();	//停止运行
;;;424    				Shaking = 0;
;;;425    				USART_OUT(USART1, "BBB lock_stop\r\n");
;;;426    				
;;;427    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;428    				USART_OUT(USART1, "PublishLockBackbuf=%s\r\n", send_buff);
;;;429    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;430    				if(ret != NULL)
;;;431    				{
;;;432    					memset(expressText, 0 ,512);
;;;433    					memset(cipherText, 0 ,512);
;;;434    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"2",'"',"ok",'"',"0");
;;;435    					USART_OUT(USART1, "expressText=%s\r\n", expressText);
;;;436    					AES_Encrypt((char *)expressText, cipherText, aesKey);
;;;437    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;438    					if(ret != NULL)
;;;439    					{
;;;440    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;441    					}
;;;442    				}
;;;443    			}
;;;444    			
;;;445    			if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==0 && lock_close_err_flag == 1) //关锁超时处理
;;;446    			{
;;;447    				lock_close_err_flag = 0;
;;;448    				Lock_Close = 0;
;;;449    				lock_stop();	//停止运行
;;;450    				Shaking = 0;
;;;451    				USART_OUT(USART1, "close lock unusual\r\n");
;;;452    				sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockback/",(char *)PARK_LOCK_Buffer,",44,2\r\n");
;;;453    				USART_OUT(USART1, "send_buff=%s\r\n", send_buff);
;;;454    				ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;455    				if(ret != NULL)
;;;456    				{
;;;457    					memset(expressText, 0 ,512);
;;;458    					memset(cipherText, 0 ,512);
;;;459    					sprintf((char *)expressText,"{%c%s%c:%s,%c%s%c:%s}",'"',"cmd",'"',"2",'"',"ok",'"',"1");
;;;460    					AES_Encrypt((char *)expressText, (char*)cipherText, (char*)aesKey);
;;;461    				
;;;462    					ret = gprs_send_at(cipherText, "OK", 300, 0);
;;;463    					if(ret != NULL)
;;;464    					{
;;;465    						timer_is_timeout_1ms(timer_heartbeat, 0);
;;;466    					}
;;;467    				}
;;;468    			}		
;;;469    		}
;;;470    		//按键
;;;471    		if(button_get_value() == 0)
;;;472    		{
;;;473    			USART_OUT(USART1, "button_get_value\r\n");
;;;474    			timer_is_timeout_1ms(timer_close_lock, 0);
;;;475    			Lock_Close = 1;
;;;476    			Shaking=1;	
;;;477    		}
;;;478    			
;;;479    		
;;;480    		//报警器
;;;481    		p1 = strstr((char*)protocol_buff, "topic: bell/");
;;;482    		p2 = strstr((char *)p1,(char *)PARK_LOCK_Buffer);
;;;483    		if(strncmp((char *)p1,(char *)"topic: bell/",12)==0 && bell_flag==0)
;;;484    		{
;;;485    			timer_is_timeout_1ms(timer_heartbeat, 0);
;;;486    			USART_OUT(USART1, "bell\r\n");
;;;487    			memset(protocol_buff, 0, 512);	
;;;488    			bell_flag=1;
;;;489      	
;;;490    			BEEP_ON();
;;;491    			timer_delay_1ms(100);
;;;492    			BEEP_OFF();
;;;493    		}
;;;494    				
;;;495    		if(bell_flag == 1)
;;;496    		{
;;;497    			bell_flag = 0;
;;;498    		}
;;;499    		//晃动报警
;;;500    		if(LOCK_ON_READ()==1 && LOCK_OFF_READ()==1 && Shaking==0)
;;;501    		{
;;;502    			USART_OUT(USART1, "Sharking\r\n");
;;;503    			if(timer_is_timeout_1ms(timer_bell_1, 400) == 0)
;;;504    			{
;;;505    				BEEP_ON();
;;;506    			}
;;;507    			if(timer_is_timeout_1ms(timer_bell_2, 800) == 0)
;;;508    			{
;;;509    				BEEP_OFF();
;;;510    			}
;;;511    		}
;;;512    		else
;;;513    		{
;;;514    			BEEP_OFF();
;;;515    		}
;;;516    		
;;;517    		//断线重连
;;;518    		p1 = strstr((char*)protocol_buff, "MQTT CLOSE");
;;;519    		if(p1 !=NULL)
;;;520    		{
;;;521    			memset(protocol_buff, 0, 512);	
;;;522    			gprs_status = 0;
;;;523    			USART_OUT(USART1, "MQTT SERVER CLOSE\r\n");
;;;524    		}
;;;525    		
;;;526    
;;;527    		//心跳
;;;528    		if(timer_is_timeout_1ms(timer_heartbeat, 1000*60*10) == 0)
;;;529    		{
;;;530    			memset(send_buff, 0, 100);
;;;531    			sprintf((char *)send_buff,"%s%s%s","AT+PUBLISH=lockdata/",PARK_LOCK_Buffer,",1,2\r\n");
;;;532    	
;;;533    			USART_OUT(USART1, "heartbeat=%s\r\n", send_buff);
;;;534    			ret = gprs_send_at(send_buff, ">", 300, 2000);
;;;535    			if(ret != NULL)
;;;536    			{
;;;537    				memset(heartbeat_buff, 0, 2);
;;;538    				heartbeat_buff[0] = 0x30;
;;;539    				ret = gprs_send_at(heartbeat_buff, "OK", 300, 0);
;;;540    				if(ret != NULL)
;;;541    				{
;;;542    					
;;;543    				}	
;;;544    			}
;;;545    			else
;;;546    			{
;;;547    				
;;;548    			}
;;;549    		}	
;;;550    		
;;;551    		
;;;552    //		if(timer_is_timeout_1ms(timer_gps_cycle, 1000*60*60*24) == 0)
;;;553    //		{
;;;554    //			gps_flag = 1;
;;;555    //		}
;;;556    		
;;;557    		
;;;558    
;;;559    	}	 
;;;560    }
;;;561     
                          ENDP

000086  0000              DCW      0x0000
                  |L1.136|
000088  75617274          DCB      "uart1 is ok\r\n",0
00008c  31206973
000090  206f6b0d
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L1.152|
                          DCD      0x40013800
                  |L1.156|
                          DCD      mqtt_flag
                  |L1.160|
0000a0  6d717474          DCB      "mqtt_connect ok\r\n",0
0000a4  5f636f6e
0000a8  6e656374
0000ac  206f6b0d
0000b0  0a00    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L1.180|
0000b4  434c4f53          DCB      "CLOSE",0
0000b8  4500    
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L1.188|
                          DCD      mqtt_buff
                  |L1.192|
                          DCD      ||p1||
                  |L1.196|
0000c4  4d515454          DCB      "MQTT SERVER CLOSE\r\n",0
0000c8  20534552
0000cc  56455220
0000d0  434c4f53
0000d4  450d0a00

                          AREA ||i.test_encrypt_ecb||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  test_encrypt_ecb PROC
;;;107    
;;;108    static void test_encrypt_ecb(void)
000000  b500              PUSH     {lr}
;;;109    {
000002  b0bf              SUB      sp,sp,#0xfc
;;;110    
;;;111        uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
000004  a022              ADR      r0,|L2.144|
000006  e890000e          LDM      r0,{r1-r3}
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  e9cd233c          STRD     r2,r3,[sp,#0xf0]
000010  913b              STR      r1,[sp,#0xec]
000012  903e              STR      r0,[sp,#0xf8]
;;;112        uint8_t out[] = { 0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97 };
000014  a322              ADR      r3,|L2.160|
000016  e9d31200          LDRD     r1,r2,[r3,#0]
00001a  e9d30302          LDRD     r0,r3,[r3,#8]
00001e  e9cd0339          STRD     r0,r3,[sp,#0xe4]
000022  e9cd1237          STRD     r1,r2,[sp,#0xdc]
;;;113    
;;;114    
;;;115        uint8_t in[]  = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a };
000026  a322              ADR      r3,|L2.176|
000028  e9d32000          LDRD     r2,r0,[r3,#0]
00002c  e9d31302          LDRD     r1,r3,[r3,#8]
000030  e9cd1335          STRD     r1,r3,[sp,#0xd4]
000034  e9cd2033          STRD     r2,r0,[sp,#0xcc]
;;;116       	struct AES_ctx ctx;
;;;117    	
;;;118    	
;;;119    	sprintf((char *)expressText,"{%c%s%c:%s}",'"',"battery",'"',"20");
000038  a021              ADR      r0,|L2.192|
00003a  2122              MOVS     r1,#0x22
00003c  a321              ADR      r3,|L2.196|
00003e  460a              MOV      r2,r1
000040  e9cd1000          STRD     r1,r0,[sp,#0]
000044  a121              ADR      r1,|L2.204|
000046  4824              LDR      r0,|L2.216|
000048  f7fffffe          BL       __2sprintf
;;;120    //	expressText[0] = 0x31;
;;;121    	USART_OUT(USART1, "expressText66=%s\r\n", expressText);
00004c  4a22              LDR      r2,|L2.216|
00004e  a123              ADR      r1,|L2.220|
000050  4827              LDR      r0,|L2.240|
000052  f7fffffe          BL       USART_OUT
;;;122    	
;;;123    
;;;124    	
;;;125    //	USART_OUT(USART1, "in=%s\r\n", in);
;;;126    //	USART_OUT(USART1, "out=%s\r\n", out);
;;;127    //	AES_init_ctx(&ctx, key);
;;;128    //	AES_ECB_encrypt(&ctx, in);
;;;129    //	USART_OUT(USART1, "in=%s\r\n", in);
;;;130    //	USART_OUT(USART1, "out=%s\r\n", out);
;;;131        AES_init_ctx(&ctx, aesKey);
000056  4927              LDR      r1,|L2.244|
000058  a803              ADD      r0,sp,#0xc
00005a  f7fffffe          BL       AES_init_ctx
;;;132        AES_ECB_encrypt(&ctx, expressText);
00005e  491e              LDR      r1,|L2.216|
000060  a803              ADD      r0,sp,#0xc
000062  f7fffffe          BL       AES_ECB_encrypt
;;;133    
;;;134    	USART_OUT(USART1, expressText);
000066  491c              LDR      r1,|L2.216|
000068  4821              LDR      r0,|L2.240|
00006a  f7fffffe          BL       USART_OUT
;;;135    
;;;136        if (0 == memcmp((char*) out, (char*) in, 16))
00006e  2210              MOVS     r2,#0x10
000070  a933              ADD      r1,sp,#0xcc
000072  a837              ADD      r0,sp,#0xdc
000074  f7fffffe          BL       memcmp
000078  b920              CBNZ     r0,|L2.132|
;;;137        {
;;;138            USART_OUT(USART1, "SUCCESS!\n");
00007a  a11f              ADR      r1,|L2.248|
00007c  481c              LDR      r0,|L2.240|
00007e  f7fffffe          BL       USART_OUT
000082  e003              B        |L2.140|
                  |L2.132|
;;;139        }
;;;140        else
;;;141        {
;;;142            USART_OUT(USART1, "FAILURE!\n");
000084  a11f              ADR      r1,|L2.260|
000086  481a              LDR      r0,|L2.240|
000088  f7fffffe          BL       USART_OUT
                  |L2.140|
;;;143        }
;;;144    }
00008c  b03f              ADD      sp,sp,#0xfc
00008e  bd00              POP      {pc}
;;;145    
                          ENDP

                  |L2.144|
000090  2b7e1516          DCB      "+~",21,22,"(",174,210,166,171,247,21,136,"\t",207,"O<"
000094  28aed2a6
000098  abf71588
00009c  09cf4f3c
                  |L2.160|
0000a0  3ad77bb4          DCB      ":",215,"{",180,"\rz6`",168,158,202,243,"$$f",239,151
0000a4  0d7a3660
0000a8  a89ecaf3
0000ac  2466ef97
                  |L2.176|
0000b0  6bc1bee2          DCB      "k",193,190,226,".@",159,150,233,"=~",17,"s",147,23,"*"
0000b4  2e409f96
0000b8  e93d7e11
0000bc  7393172a
                  |L2.192|
0000c0  323000            DCB      "20",0
0000c3  00                DCB      0
                  |L2.196|
0000c4  62617474          DCB      "battery",0
0000c8  65727900
                  |L2.204|
0000cc  7b256325          DCB      "{%c%s%c:%s}",0
0000d0  7325633a
0000d4  25737d00
                  |L2.216|
                          DCD      expressText
                  |L2.220|
0000dc  65787072          DCB      "expressText66=%s\r\n",0
0000e0  65737354
0000e4  65787436
0000e8  363d2573
0000ec  0d0a00  
0000ef  00                DCB      0
                  |L2.240|
                          DCD      0x40013800
                  |L2.244|
                          DCD      aesKey
                  |L2.248|
0000f8  53554343          DCB      "SUCCESS!\n",0
0000fc  45535321
000100  0a00    
000102  00                DCB      0
000103  00                DCB      0
                  |L2.260|
000104  4641494c          DCB      "FAILURE!\n",0
000108  55524521
00010c  0a00    
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  receiveText
                          %        24
                  expressText
                          %        512
                  cipherText
                          %        512
                  aesKey
                          %        16
                  gpsx
                          %        166
                  longitudedtbuf
                          %        30
                  latitudedtbuf
                          %        30
                  dtbuf
                          %        50
                  lockbuf
                          %        16
                  lockbuff
                          %        16
                  send_buff
                          %        100
                  protocol_buff
                          %        512
                  gps_buff
                          %        512
                  tmp
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  bell_flag
000000  00                DCB      0x00
                  Shaking
000001  00                DCB      0x00
                  Shaking_Alarm_Flag
000002  0000              DCB      0x00,0x00
                  Bat_V
000004  0000              DCB      0x00,0x00
                  Bat_Pre
000006  0000              DCB      0x00,0x00
                  Bat_Pre_Flag
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  ||p1||
                          DCD      0x00000000
                  ||p2||
                          DCD      0x00000000
                  lock_open_err_flag
000014  00                DCB      0x00
                  lock_close_err_flag
000015  00                DCB      0x00
                  Lock_Open
000016  00                DCB      0x00
                  Lock_Open_On
000017  00                DCB      0x00
                  Lock_Open_Off
000018  00                DCB      0x00
                  Lock_Close
000019  00                DCB      0x00
                  Lock_Close_On
00001a  00                DCB      0x00
                  Lock_Close_Off
00001b  00                DCB      0x00
                  lock_open_success_flag
00001c  00                DCB      0x00
                  flag
00001d  04                DCB      0x04
                  second_flag
00001e  00                DCB      0x00
                  LOCK_ON_flag
00001f  01                DCB      0x01
                  LOCK_OFF_flag
000020  01                DCB      0x01
                  gps_flag
000021  00                DCB      0x00
                  gps_err_cnt
000022  00                DCB      0x00
                  heartbeat_buff
000023  00                DCB      0x00
000024  00                DCB      0x00
                  mqtt_flag
000025  00                DCB      0x00

                  __ARM_use_no_argv EQU 0
