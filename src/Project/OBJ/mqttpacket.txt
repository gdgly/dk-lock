; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\mqttpacket.o --asm_dir=.\OBJ\ --list_dir=.\OBJ\ --depend=.\obj\mqttpacket.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\driver -I..\BSP -I..\system -I..\tplib -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\app -I..\MQTT -IE:\github\dk-lock\src\Project\RTE -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=518 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -W --omf_browse=.\obj\mqttpacket.crf ..\MQTT\MQTTPacket.c]
                          THUMB

                          AREA ||i.MQTTPacket_decode||, CODE, READONLY, ALIGN=1

                  MQTTPacket_decode PROC
;;;55      */
;;;56     int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;57     {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;58     	unsigned char c;
;;;59     	int multiplier = 1;
000008  2601              MOVS     r6,#1
;;;60     	int len = 0;
00000a  2700              MOVS     r7,#0
;;;61     #define MAX_NO_OF_REMAINING_LENGTH_BYTES 4
;;;62     
;;;63     	FUNC_ENTRY;
;;;64     	*value = 0;
00000c  2000              MOVS     r0,#0
00000e  6020              STR      r0,[r4,#0]
;;;65     	do
000010  bf00              NOP      
                  |L1.18|
;;;66     	{
;;;67     		int rc = MQTTPACKET_READ_ERROR;
000012  f04f38ff          MOV      r8,#0xffffffff
;;;68     
;;;69     		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
000016  1c78              ADDS     r0,r7,#1
000018  4607              MOV      r7,r0
00001a  2804              CMP      r0,#4
00001c  dd01              BLE      |L1.34|
;;;70     		{
;;;71     			rc = MQTTPACKET_READ_ERROR;	/* bad data */
00001e  bf00              NOP      
;;;72     			goto exit;
000020  e017              B        |L1.82|
                  |L1.34|
;;;73     		}
;;;74     		rc = (*getcharfn)(&c, 1);
000022  2101              MOVS     r1,#1
000024  4668              MOV      r0,sp
000026  47a8              BLX      r5
000028  4680              MOV      r8,r0
;;;75     		if (rc != 1)
00002a  f1b80f01          CMP      r8,#1
00002e  d000              BEQ      |L1.50|
;;;76     			goto exit;
000030  e00f              B        |L1.82|
                  |L1.50|
;;;77     		*value += (c & 127) * multiplier;
000032  f89d1000          LDRB     r1,[sp,#0]
000036  f001017f          AND      r1,r1,#0x7f
00003a  6820              LDR      r0,[r4,#0]
00003c  fb010006          MLA      r0,r1,r6,r0
000040  6020              STR      r0,[r4,#0]
;;;78     		multiplier *= 128;
000042  01f6              LSLS     r6,r6,#7
;;;79     	} while ((c & 128) != 0);
000044  f89d0000          LDRB     r0,[sp,#0]
000048  f0000080          AND      r0,r0,#0x80
00004c  2800              CMP      r0,#0
00004e  d1e0              BNE      |L1.18|
;;;80     exit:
000050  bf00              NOP      
                  |L1.82|
;;;81     	FUNC_EXIT_RC(len);
;;;82     	return len;
000052  4638              MOV      r0,r7
;;;83     }
000054  e8bd83f8          POP      {r3-r9,pc}
;;;84     
                          ENDP


                          AREA ||i.MQTTPacket_decodeBuf||, CODE, READONLY, ALIGN=2

                  MQTTPacket_decodeBuf PROC
;;;114    
;;;115    int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
000000  b570              PUSH     {r4-r6,lr}
;;;116    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;117    	bufptr = buf;
000006  4803              LDR      r0,|L2.20|
000008  6004              STR      r4,[r0,#0]  ; bufptr
;;;118    	return MQTTPacket_decode(bufchar, value);
00000a  4629              MOV      r1,r5
00000c  4802              LDR      r0,|L2.24|
00000e  f7fffffe          BL       MQTTPacket_decode
;;;119    }
000012  bd70              POP      {r4-r6,pc}
;;;120    
                          ENDP

                  |L2.20|
                          DCD      bufptr
                  |L2.24|
                          DCD      bufchar

                          AREA ||i.MQTTPacket_decodenb||, CODE, READONLY, ALIGN=1

                  MQTTPacket_decodenb PROC
;;;329     */
;;;330    static int MQTTPacket_decodenb(MQTTTransport *trp)
000000  b5f8              PUSH     {r3-r7,lr}
;;;331    {
000002  4604              MOV      r4,r0
;;;332    	unsigned char c;
;;;333    	int rc = MQTTPACKET_READ_ERROR;
000004  f04f36ff          MOV      r6,#0xffffffff
;;;334    
;;;335    	FUNC_ENTRY;
;;;336    	if(trp->len == 0){		/* initialize on first call */
000008  6920              LDR      r0,[r4,#0x10]
00000a  b918              CBNZ     r0,|L3.20|
;;;337    		trp->multiplier = 1;
00000c  2001              MOVS     r0,#1
00000e  60a0              STR      r0,[r4,#8]
;;;338    		trp->rem_len = 0;
000010  2000              MOVS     r0,#0
000012  60e0              STR      r0,[r4,#0xc]
                  |L3.20|
;;;339    	}
;;;340    	do {
000014  bf00              NOP      
                  |L3.22|
;;;341    		int frc;
;;;342    		if (trp->len >= MAX_NO_OF_REMAINING_LENGTH_BYTES)
000016  6920              LDR      r0,[r4,#0x10]
000018  2804              CMP      r0,#4
00001a  db00              BLT      |L3.30|
;;;343    			goto exit;
00001c  e022              B        |L3.100|
                  |L3.30|
;;;344    		if ((frc=(*trp->getfn)(trp->sck, &c, 1)) == -1)
00001e  2201              MOVS     r2,#1
000020  4669              MOV      r1,sp
000022  e9d43000          LDRD     r3,r0,[r4,#0]
000026  4798              BLX      r3
000028  4605              MOV      r5,r0
00002a  1c40              ADDS     r0,r0,#1
00002c  b900              CBNZ     r0,|L3.48|
;;;345    			goto exit;
00002e  e019              B        |L3.100|
                  |L3.48|
;;;346    		if (frc == 0){
000030  b90d              CBNZ     r5,|L3.54|
;;;347    			rc = 0;
000032  2600              MOVS     r6,#0
;;;348    			goto exit;
000034  e016              B        |L3.100|
                  |L3.54|
;;;349    		}
;;;350    		++(trp->len);
000036  6920              LDR      r0,[r4,#0x10]
000038  1c40              ADDS     r0,r0,#1
00003a  6120              STR      r0,[r4,#0x10]
;;;351    		trp->rem_len += (c & 127) * trp->multiplier;
00003c  f89d1000          LDRB     r1,[sp,#0]
000040  f001017f          AND      r1,r1,#0x7f
000044  e9d42002          LDRD     r2,r0,[r4,#8]
000048  fb010002          MLA      r0,r1,r2,r0
00004c  60e0              STR      r0,[r4,#0xc]
;;;352    		trp->multiplier *= 128;
00004e  68a0              LDR      r0,[r4,#8]
000050  01c0              LSLS     r0,r0,#7
000052  60a0              STR      r0,[r4,#8]
;;;353    	} while ((c & 128) != 0);
000054  f89d0000          LDRB     r0,[sp,#0]
000058  f0000080          AND      r0,r0,#0x80
00005c  2800              CMP      r0,#0
00005e  d1da              BNE      |L3.22|
;;;354    	rc = trp->len;
000060  6926              LDR      r6,[r4,#0x10]
;;;355    exit:
000062  bf00              NOP      
                  |L3.100|
;;;356    	FUNC_EXIT_RC(rc);
;;;357    	return rc;
000064  4630              MOV      r0,r6
;;;358    }
000066  bdf8              POP      {r3-r7,pc}
;;;359    
                          ENDP


                          AREA ||i.MQTTPacket_encode||, CODE, READONLY, ALIGN=1

                  MQTTPacket_encode PROC
;;;30      */
;;;31     int MQTTPacket_encode(unsigned char* buf, int length)
000000  b530              PUSH     {r4,r5,lr}
;;;32     {
000002  4602              MOV      r2,r0
;;;33     	int rc = 0;
000004  2300              MOVS     r3,#0
;;;34     
;;;35     	FUNC_ENTRY;
;;;36     	do
000006  bf00              NOP      
                  |L4.8|
;;;37     	{
;;;38     		char d = length % 128;
000008  4608              MOV      r0,r1
00000a  17cd              ASRS     r5,r1,#31
00000c  eb016555          ADD      r5,r1,r5,LSR #25
000010  11ed              ASRS     r5,r5,#7
000012  eba115c5          SUB      r5,r1,r5,LSL #7
000016  b2ec              UXTB     r4,r5
;;;39     		length /= 128;
000018  17cd              ASRS     r5,r1,#31
00001a  eb016555          ADD      r5,r1,r5,LSR #25
00001e  11e9              ASRS     r1,r5,#7
;;;40     		/* if there are more digits to encode, set the top bit of this digit */
;;;41     		if (length > 0)
000020  2900              CMP      r1,#0
000022  dd01              BLE      |L4.40|
;;;42     			d |= 0x80;
000024  f0440480          ORR      r4,r4,#0x80
                  |L4.40|
;;;43     		buf[rc++] = d;
000028  4618              MOV      r0,r3
00002a  1c5b              ADDS     r3,r3,#1
00002c  5414              STRB     r4,[r2,r0]
;;;44     	} while (length > 0);
00002e  2900              CMP      r1,#0
000030  dcea              BGT      |L4.8|
;;;45     	FUNC_EXIT_RC(rc);
;;;46     	return rc;
000032  4618              MOV      r0,r3
;;;47     }
000034  bd30              POP      {r4,r5,pc}
;;;48     
                          ENDP


                          AREA ||i.MQTTPacket_equals||, CODE, READONLY, ALIGN=1

                  MQTTPacket_equals PROC
;;;261     */
;;;262    int MQTTPacket_equals(MQTTString* a, char* bptr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;263    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;264    	int alen = 0,
000008  2700              MOVS     r7,#0
;;;265    		blen = 0;
00000a  46b8              MOV      r8,r7
;;;266    	char *aptr;
;;;267    	
;;;268    	if (a->cstring)
00000c  6820              LDR      r0,[r4,#0]
00000e  b128              CBZ      r0,|L5.28|
;;;269    	{
;;;270    		aptr = a->cstring;
000010  6825              LDR      r5,[r4,#0]
;;;271    		alen = strlen(a->cstring);
000012  6820              LDR      r0,[r4,#0]
000014  f7fffffe          BL       strlen
000018  4607              MOV      r7,r0
00001a  e001              B        |L5.32|
                  |L5.28|
;;;272    	}
;;;273    	else
;;;274    	{
;;;275    		aptr = a->lenstring.data;
00001c  68a5              LDR      r5,[r4,#8]
;;;276    		alen = a->lenstring.len;
00001e  6867              LDR      r7,[r4,#4]
                  |L5.32|
;;;277    	}
;;;278    	blen = strlen(bptr);
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       strlen
000026  4680              MOV      r8,r0
;;;279    	
;;;280    	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
000028  4547              CMP      r7,r8
00002a  d108              BNE      |L5.62|
00002c  463a              MOV      r2,r7
00002e  4631              MOV      r1,r6
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       strncmp
000036  b910              CBNZ     r0,|L5.62|
000038  2001              MOVS     r0,#1
                  |L5.58|
;;;281    }
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L5.62|
00003e  2000              MOVS     r0,#0                 ;280
000040  e7fb              B        |L5.58|
;;;282    
                          ENDP


                          AREA ||i.MQTTPacket_len||, CODE, READONLY, ALIGN=2

                  MQTTPacket_len PROC
;;;85     
;;;86     int MQTTPacket_len(int rem_len)
000000  1c40              ADDS     r0,r0,#1
;;;87     {
;;;88     	rem_len += 1; /* header byte */
;;;89     
;;;90     	/* now remaining_length field */
;;;91     	if (rem_len < 128)
000002  2880              CMP      r0,#0x80
000004  da01              BGE      |L6.10|
;;;92     		rem_len += 1;
000006  1c40              ADDS     r0,r0,#1
000008  e00a              B        |L6.32|
                  |L6.10|
;;;93     	else if (rem_len < 16384)
00000a  f5b04f80          CMP      r0,#0x4000
00000e  da01              BGE      |L6.20|
;;;94     		rem_len += 2;
000010  1c80              ADDS     r0,r0,#2
000012  e005              B        |L6.32|
                  |L6.20|
;;;95     	else if (rem_len < 2097151)
000014  4903              LDR      r1,|L6.36|
000016  4288              CMP      r0,r1
000018  da01              BGE      |L6.30|
;;;96     		rem_len += 3;
00001a  1cc0              ADDS     r0,r0,#3
00001c  e000              B        |L6.32|
                  |L6.30|
;;;97     	else
;;;98     		rem_len += 4;
00001e  1d00              ADDS     r0,r0,#4
                  |L6.32|
;;;99     	return rem_len;
;;;100    }
000020  4770              BX       lr
;;;101    
                          ENDP

000022  0000              DCW      0x0000
                  |L6.36|
                          DCD      0x001fffff

                          AREA ||i.MQTTPacket_read||, CODE, READONLY, ALIGN=2

                  MQTTPacket_read PROC
;;;291     */
;;;292    int MQTTPacket_read(unsigned char* buf, int buflen, int (*getfn)(unsigned char*, int))
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;293    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;294    	int rc = -1;
00000a  f04f38ff          MOV      r8,#0xffffffff
;;;295    	MQTTHeader header = {0};
00000e  2000              MOVS     r0,#0
000010  9001              STR      r0,[sp,#4]
;;;296    	int len = 0;
000012  2600              MOVS     r6,#0
;;;297    	int rem_len = 0;
000014  9000              STR      r0,[sp,#0]
;;;298    
;;;299    	/* 1. read the header byte.  This has the packet type in it */
;;;300    	if ((*getfn)(buf, 1) != 1)
000016  2101              MOVS     r1,#1
000018  4620              MOV      r0,r4
00001a  47a8              BLX      r5
00001c  2801              CMP      r0,#1
00001e  d000              BEQ      |L7.34|
;;;301    	{
;;;302    		goto exit;
000020  e026              B        |L7.112|
                  |L7.34|
;;;303    	}
;;;304    
;;;305    	len = 1;
000022  2601              MOVS     r6,#1
;;;306    	/* 2. read the remaining length.  This is variable in itself */
;;;307    	MQTTPacket_decode(getfn, &rem_len);
000024  4669              MOV      r1,sp
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       MQTTPacket_decode
;;;308    	len += MQTTPacket_encode(buf + 1, rem_len); /* put the original remaining length back into the buffer */
00002c  1c60              ADDS     r0,r4,#1
00002e  9900              LDR      r1,[sp,#0]
000030  f7fffffe          BL       MQTTPacket_encode
000034  4406              ADD      r6,r6,r0
;;;309    
;;;310    	/* 3. read the rest of the buffer using a callback to supply the rest of the data */
;;;311    	if((rem_len + len) > buflen)
000036  9800              LDR      r0,[sp,#0]
000038  4430              ADD      r0,r0,r6
00003a  42b8              CMP      r0,r7
00003c  dd00              BLE      |L7.64|
;;;312    		goto exit;
00003e  e017              B        |L7.112|
                  |L7.64|
;;;313    	if (rem_len && ((*getfn)(buf + len, rem_len) != rem_len))
000040  9800              LDR      r0,[sp,#0]
000042  b130              CBZ      r0,|L7.82|
000044  19a0              ADDS     r0,r4,r6
000046  9900              LDR      r1,[sp,#0]
000048  47a8              BLX      r5
00004a  9900              LDR      r1,[sp,#0]
00004c  4288              CMP      r0,r1
00004e  d000              BEQ      |L7.82|
;;;314    		goto exit;
000050  e00e              B        |L7.112|
                  |L7.82|
;;;315    
;;;316    	header.byte = buf[0];
000052  7820              LDRB     r0,[r4,#0]
000054  f88d0004          STRB     r0,[sp,#4]
;;;317    	rc = header.bits.type;
000058  9801              LDR      r0,[sp,#4]
00005a  f3c01803          UBFX     r8,r0,#4,#4
;;;318    	memset(&mqtt_buff, 0, sizeof(usart_buff_t));
00005e  f2402102          MOV      r1,#0x202
000062  4805              LDR      r0,|L7.120|
000064  f7fffffe          BL       __aeabi_memclr
;;;319    	mqtt_buff_len = 0;
000068  2000              MOVS     r0,#0
00006a  4904              LDR      r1,|L7.124|
00006c  6008              STR      r0,[r1,#0]  ; mqtt_buff_len
;;;320    exit:
00006e  bf00              NOP      
                  |L7.112|
;;;321    	return rc;
000070  4640              MOV      r0,r8
;;;322    }
000072  e8bd81fc          POP      {r2-r8,pc}
;;;323    
                          ENDP

000076  0000              DCW      0x0000
                  |L7.120|
                          DCD      mqtt_buff
                  |L7.124|
                          DCD      mqtt_buff_len

                          AREA ||i.MQTTPacket_readnb||, CODE, READONLY, ALIGN=1

                  MQTTPacket_readnb PROC
;;;367     */
;;;368    int MQTTPacket_readnb(unsigned char* buf, int buflen, MQTTTransport *trp)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;369    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;370    	int rc = -1, frc;
00000a  f04f38ff          MOV      r8,#0xffffffff
;;;371    	MQTTHeader header = {0};
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;372    
;;;373    	switch(trp->state){
000012  7d20              LDRB     r0,[r4,#0x14]
000014  b130              CBZ      r0,|L8.36|
000016  2801              CMP      r0,#1
000018  d017              BEQ      |L8.74|
00001a  2802              CMP      r0,#2
00001c  d02f              BEQ      |L8.126|
;;;374    	default:
;;;375    		trp->state = 0;
00001e  2000              MOVS     r0,#0
000020  7520              STRB     r0,[r4,#0x14]
;;;376    		/*FALLTHROUGH*/
;;;377    	case 0:
000022  bf00              NOP      
                  |L8.36|
;;;378    		/* read the header byte.  This has the packet type in it */
;;;379    		if ((frc=(*trp->getfn)(trp->sck, buf, 1)) == -1)
000024  2201              MOVS     r2,#1
000026  4631              MOV      r1,r6
000028  e9d43000          LDRD     r3,r0,[r4,#0]
00002c  4798              BLX      r3
00002e  4605              MOV      r5,r0
000030  1c40              ADDS     r0,r0,#1
000032  b900              CBNZ     r0,|L8.54|
;;;380    			goto exit;
000034  e046              B        |L8.196|
                  |L8.54|
;;;381    		if (frc == 0)
000036  b915              CBNZ     r5,|L8.62|
;;;382    			return 0;
000038  2000              MOVS     r0,#0
                  |L8.58|
;;;383    		trp->len = 0;
;;;384    		++trp->state;
;;;385    		/*FALLTHROUGH*/
;;;386    		/* read the remaining length.  This is variable in itself */
;;;387    	case 1:
;;;388    		if((frc=MQTTPacket_decodenb(trp)) == MQTTPACKET_READ_ERROR)
;;;389    			goto exit;
;;;390    		if(frc == 0)
;;;391    			return 0;
;;;392    		trp->len = 1 + MQTTPacket_encode(buf + 1, trp->rem_len); /* put the original remaining length back into the buffer */
;;;393    		if((trp->rem_len + trp->len) > buflen)
;;;394    			goto exit;
;;;395    		++trp->state;
;;;396    		/*FALLTHROUGH*/
;;;397    	case 2:
;;;398    		if(trp->rem_len){
;;;399    			/* read the rest of the buffer using a callback to supply the rest of the data */
;;;400    			if ((frc=(*trp->getfn)(trp->sck, buf + trp->len, trp->rem_len)) == -1)
;;;401    				goto exit;
;;;402    			if (frc == 0)
;;;403    				return 0;
;;;404    			trp->rem_len -= frc;
;;;405    			trp->len += frc;
;;;406    			if(trp->rem_len)
;;;407    				return 0;
;;;408    		}
;;;409    		header.byte = buf[0];
;;;410    		rc = header.bits.type;
;;;411    		break;
;;;412    	}
;;;413    
;;;414    exit:
;;;415    	trp->state = 0;
;;;416    	return rc;
;;;417    }
00003a  e8bd83f8          POP      {r3-r9,pc}
                  |L8.62|
00003e  2000              MOVS     r0,#0                 ;383
000040  6120              STR      r0,[r4,#0x10]         ;383
000042  7d20              LDRB     r0,[r4,#0x14]         ;384
000044  1c40              ADDS     r0,r0,#1              ;384
000046  7520              STRB     r0,[r4,#0x14]         ;384
000048  bf00              NOP                            ;387
                  |L8.74|
00004a  4620              MOV      r0,r4                 ;388
00004c  f7fffffe          BL       MQTTPacket_decodenb
000050  4605              MOV      r5,r0                 ;388
000052  1c40              ADDS     r0,r0,#1              ;388
000054  b900              CBNZ     r0,|L8.88|
000056  e035              B        |L8.196|
                  |L8.88|
000058  b90d              CBNZ     r5,|L8.94|
00005a  2000              MOVS     r0,#0                 ;391
00005c  e7ed              B        |L8.58|
                  |L8.94|
00005e  1c70              ADDS     r0,r6,#1              ;392
000060  68e1              LDR      r1,[r4,#0xc]          ;392
000062  f7fffffe          BL       MQTTPacket_encode
000066  1c40              ADDS     r0,r0,#1              ;392
000068  6120              STR      r0,[r4,#0x10]         ;392
00006a  e9d40103          LDRD     r0,r1,[r4,#0xc]       ;393
00006e  4408              ADD      r0,r0,r1              ;393
000070  42b8              CMP      r0,r7                 ;393
000072  dd00              BLE      |L8.118|
000074  e026              B        |L8.196|
                  |L8.118|
000076  7d20              LDRB     r0,[r4,#0x14]         ;395
000078  1c40              ADDS     r0,r0,#1              ;395
00007a  7520              STRB     r0,[r4,#0x14]         ;395
00007c  bf00              NOP                            ;397
                  |L8.126|
00007e  68e0              LDR      r0,[r4,#0xc]          ;398
000080  b1b8              CBZ      r0,|L8.178|
000082  e9d42c03          LDRD     r2,r12,[r4,#0xc]      ;400
000086  eb0c0106          ADD      r1,r12,r6             ;400
00008a  e9d43000          LDRD     r3,r0,[r4,#0]         ;400
00008e  4798              BLX      r3                    ;400
000090  4605              MOV      r5,r0                 ;400
000092  1c40              ADDS     r0,r0,#1              ;400
000094  b900              CBNZ     r0,|L8.152|
000096  e015              B        |L8.196|
                  |L8.152|
000098  b90d              CBNZ     r5,|L8.158|
00009a  2000              MOVS     r0,#0                 ;403
00009c  e7cd              B        |L8.58|
                  |L8.158|
00009e  68e0              LDR      r0,[r4,#0xc]          ;404
0000a0  1b40              SUBS     r0,r0,r5              ;404
0000a2  60e0              STR      r0,[r4,#0xc]          ;404
0000a4  6920              LDR      r0,[r4,#0x10]         ;405
0000a6  4428              ADD      r0,r0,r5              ;405
0000a8  6120              STR      r0,[r4,#0x10]         ;405
0000aa  68e0              LDR      r0,[r4,#0xc]          ;406
0000ac  b108              CBZ      r0,|L8.178|
0000ae  2000              MOVS     r0,#0                 ;407
0000b0  e7c3              B        |L8.58|
                  |L8.178|
0000b2  7830              LDRB     r0,[r6,#0]            ;409
0000b4  f88d0000          STRB     r0,[sp,#0]            ;409
0000b8  9800              LDR      r0,[sp,#0]            ;410
0000ba  f3c01803          UBFX     r8,r0,#4,#4           ;410
0000be  bf00              NOP                            ;411
0000c0  bf00              NOP                            ;411
0000c2  bf00              NOP                            ;414
                  |L8.196|
0000c4  2000              MOVS     r0,#0                 ;415
0000c6  7520              STRB     r0,[r4,#0x14]         ;415
0000c8  4640              MOV      r0,r8                 ;416
0000ca  e7b6              B        |L8.58|
;;;418    
                          ENDP


                          AREA ||i.MQTTstrlen||, CODE, READONLY, ALIGN=1

                  MQTTstrlen PROC
;;;243     */
;;;244    int MQTTstrlen(MQTTString mqttstring)
000000  b537              PUSH     {r0-r2,r4,r5,lr}
;;;245    {
;;;246    	int rc = 0;
000002  2400              MOVS     r4,#0
;;;247    
;;;248    	if (mqttstring.cstring)
000004  9800              LDR      r0,[sp,#0]
000006  b120              CBZ      r0,|L9.18|
;;;249    		rc = strlen(mqttstring.cstring);
000008  9800              LDR      r0,[sp,#0]
00000a  f7fffffe          BL       strlen
00000e  4604              MOV      r4,r0
000010  e000              B        |L9.20|
                  |L9.18|
;;;250    	else
;;;251    		rc = mqttstring.lenstring.len;
000012  9c01              LDR      r4,[sp,#4]
                  |L9.20|
;;;252    	return rc;
000014  4620              MOV      r0,r4
;;;253    }
000016  bd3e              POP      {r1-r5,pc}
;;;254    
                          ENDP


                          AREA ||i.bufchar||, CODE, READONLY, ALIGN=2

                  bufchar PROC
;;;104    
;;;105    int bufchar(unsigned char* c, int count)
000000  b510              PUSH     {r4,lr}
;;;106    {
000002  4602              MOV      r2,r0
;;;107    	int i;
;;;108    
;;;109    	for (i = 0; i < count; ++i)
000004  2300              MOVS     r3,#0
000006  e009              B        |L10.28|
                  |L10.8|
;;;110    		*c = *bufptr++;
000008  4806              LDR      r0,|L10.36|
00000a  6800              LDR      r0,[r0,#0]  ; bufptr
00000c  7800              LDRB     r0,[r0,#0]
00000e  7010              STRB     r0,[r2,#0]
000010  4804              LDR      r0,|L10.36|
000012  6800              LDR      r0,[r0,#0]  ; bufptr
000014  1c40              ADDS     r0,r0,#1
000016  4c03              LDR      r4,|L10.36|
000018  6020              STR      r0,[r4,#0]  ; bufptr
00001a  1c5b              ADDS     r3,r3,#1              ;109
                  |L10.28|
00001c  428b              CMP      r3,r1                 ;109
00001e  dbf3              BLT      |L10.8|
;;;111    	return count;
000020  4608              MOV      r0,r1
;;;112    }
000022  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  |L10.36|
                          DCD      bufptr

                          AREA ||i.getLenStringLen||, CODE, READONLY, ALIGN=1

                  getLenStringLen PROC
;;;188    
;;;189    int getLenStringLen(char* ptr)
000000  b510              PUSH     {r4,lr}
;;;190    {
000002  4601              MOV      r1,r0
;;;191    	int len = 256*((unsigned char)(*ptr)) + (unsigned char)(*(ptr+1));
000004  784a              LDRB     r2,[r1,#1]
000006  780b              LDRB     r3,[r1,#0]
000008  f44f7480          MOV      r4,#0x100
00000c  fb042003          MLA      r0,r4,r3,r2
;;;192    	return len;
;;;193    }
000010  bd10              POP      {r4,pc}
;;;194    
                          ENDP


                          AREA ||i.readChar||, CODE, READONLY, ALIGN=1

                  readChar PROC
;;;140     */
;;;141    char readChar(unsigned char** pptr)
000000  4601              MOV      r1,r0
;;;142    {
;;;143    	char c = **pptr;
000002  680a              LDR      r2,[r1,#0]
000004  7810              LDRB     r0,[r2,#0]
;;;144    	(*pptr)++;
000006  680a              LDR      r2,[r1,#0]
000008  1c52              ADDS     r2,r2,#1
00000a  600a              STR      r2,[r1,#0]
;;;145    	return c;
;;;146    }
00000c  4770              BX       lr
;;;147    
                          ENDP


                          AREA ||i.readInt||, CODE, READONLY, ALIGN=1

                  readInt PROC
;;;126     */
;;;127    int readInt(unsigned char** pptr)
000000  b530              PUSH     {r4,r5,lr}
;;;128    {
000002  4601              MOV      r1,r0
;;;129    	unsigned char* ptr = *pptr;
000004  680a              LDR      r2,[r1,#0]
;;;130    	int len = 256*(*ptr) + (*(ptr+1));
000006  7853              LDRB     r3,[r2,#1]
000008  7814              LDRB     r4,[r2,#0]
00000a  f44f7580          MOV      r5,#0x100
00000e  fb053004          MLA      r0,r5,r4,r3
;;;131    	*pptr += 2;
000012  680b              LDR      r3,[r1,#0]
000014  1c9b              ADDS     r3,r3,#2
000016  600b              STR      r3,[r1,#0]
;;;132    	return len;
;;;133    }
000018  bd30              POP      {r4,r5,pc}
;;;134    
                          ENDP


                          AREA ||i.readMQTTLenString||, CODE, READONLY, ALIGN=1

                  readMQTTLenString PROC
;;;216     */
;;;217    int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
000000  b5f0              PUSH     {r4-r7,lr}
;;;218    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;219    	int rc = 0;
000008  2700              MOVS     r7,#0
;;;220    
;;;221    	FUNC_ENTRY;
;;;222    	/* the first two bytes are the length of the string */
;;;223    	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
00000a  6820              LDR      r0,[r4,#0]
00000c  1a30              SUBS     r0,r6,r0
00000e  2801              CMP      r0,#1
000010  dd0f              BLE      |L14.50|
;;;224    	{
;;;225    		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       readInt
000018  6068              STR      r0,[r5,#4]
;;;226    		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
00001a  6820              LDR      r0,[r4,#0]
00001c  6869              LDR      r1,[r5,#4]
00001e  4408              ADD      r0,r0,r1
000020  42b0              CMP      r0,r6
000022  d806              BHI      |L14.50|
;;;227    		{
;;;228    			mqttstring->lenstring.data = (char*)*pptr;
000024  6821              LDR      r1,[r4,#0]
000026  60a9              STR      r1,[r5,#8]
;;;229    			*pptr += mqttstring->lenstring.len;
000028  6820              LDR      r0,[r4,#0]
00002a  6869              LDR      r1,[r5,#4]
00002c  4408              ADD      r0,r0,r1
00002e  6020              STR      r0,[r4,#0]
;;;230    			rc = 1;
000030  2701              MOVS     r7,#1
                  |L14.50|
;;;231    		}
;;;232    	}
;;;233    	mqttstring->cstring = NULL;
000032  2000              MOVS     r0,#0
000034  6028              STR      r0,[r5,#0]
;;;234    	FUNC_EXIT_RC(rc);
;;;235    	return rc;
000036  4638              MOV      r0,r7
;;;236    }
000038  bdf0              POP      {r4-r7,pc}
;;;237    
                          ENDP


                          AREA ||i.writeCString||, CODE, READONLY, ALIGN=1

                  writeCString PROC
;;;179     */
;;;180    void writeCString(unsigned char** pptr, const char* string)
000000  b570              PUSH     {r4-r6,lr}
;;;181    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;182    	int len = strlen(string);
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       strlen
00000c  4605              MOV      r5,r0
;;;183    	writeInt(pptr, len);
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       writeInt
;;;184    	memcpy(*pptr, string, len);
000016  462a              MOV      r2,r5
000018  4631              MOV      r1,r6
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       __aeabi_memcpy
;;;185    	*pptr += len;
000020  6820              LDR      r0,[r4,#0]
000022  4428              ADD      r0,r0,r5
000024  6020              STR      r0,[r4,#0]
;;;186    }
000026  bd70              POP      {r4-r6,pc}
;;;187    
                          ENDP


                          AREA ||i.writeChar||, CODE, READONLY, ALIGN=1

                  writeChar PROC
;;;153     */
;;;154    void writeChar(unsigned char** pptr, char c)
000000  6802              LDR      r2,[r0,#0]
;;;155    {
;;;156    	**pptr = c;
000002  7011              STRB     r1,[r2,#0]
;;;157    	(*pptr)++;
000004  6802              LDR      r2,[r0,#0]
000006  1c52              ADDS     r2,r2,#1
000008  6002              STR      r2,[r0,#0]
;;;158    }
00000a  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.writeInt||, CODE, READONLY, ALIGN=1

                  writeInt PROC
;;;165     */
;;;166    void writeInt(unsigned char** pptr, int anInt)
000000  b510              PUSH     {r4,lr}
;;;167    {
;;;168    	**pptr = (unsigned char)(anInt / 256);
000002  460a              MOV      r2,r1
000004  17cb              ASRS     r3,r1,#31
000006  eb016313          ADD      r3,r1,r3,LSR #24
00000a  0a1b              LSRS     r3,r3,#8
00000c  6804              LDR      r4,[r0,#0]
00000e  7023              STRB     r3,[r4,#0]
;;;169    	(*pptr)++;
000010  6802              LDR      r2,[r0,#0]
000012  1c52              ADDS     r2,r2,#1
000014  6002              STR      r2,[r0,#0]
;;;170    	**pptr = (unsigned char)(anInt % 256);
000016  460a              MOV      r2,r1
000018  17cb              ASRS     r3,r1,#31
00001a  eb016313          ADD      r3,r1,r3,LSR #24
00001e  121b              ASRS     r3,r3,#8
000020  eba12303          SUB      r3,r1,r3,LSL #8
000024  6804              LDR      r4,[r0,#0]
000026  7023              STRB     r3,[r4,#0]
;;;171    	(*pptr)++;
000028  6802              LDR      r2,[r0,#0]
00002a  1c52              ADDS     r2,r2,#1
00002c  6002              STR      r2,[r0,#0]
;;;172    }
00002e  bd10              POP      {r4,pc}
;;;173    
                          ENDP


                          AREA ||i.writeMQTTString||, CODE, READONLY, ALIGN=1

                  writeMQTTString PROC
;;;195    
;;;196    void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
000000  b51f              PUSH     {r0-r4,lr}
;;;197    {
000002  4604              MOV      r4,r0
;;;198    	if (mqttstring.lenstring.len > 0)
000004  9802              LDR      r0,[sp,#8]
000006  2800              CMP      r0,#0
000008  dd0d              BLE      |L18.38|
;;;199    	{
;;;200    		writeInt(pptr, mqttstring.lenstring.len);
00000a  4620              MOV      r0,r4
00000c  9902              LDR      r1,[sp,#8]
00000e  f7fffffe          BL       writeInt
;;;201    		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
000012  e9dd2102          LDRD     r2,r1,[sp,#8]
000016  6820              LDR      r0,[r4,#0]
000018  f7fffffe          BL       __aeabi_memcpy
;;;202    		*pptr += mqttstring.lenstring.len;
00001c  6820              LDR      r0,[r4,#0]
00001e  9902              LDR      r1,[sp,#8]
000020  4408              ADD      r0,r0,r1
000022  6020              STR      r0,[r4,#0]
000024  e00a              B        |L18.60|
                  |L18.38|
;;;203    	}
;;;204    	else if (mqttstring.cstring)
000026  9801              LDR      r0,[sp,#4]
000028  b120              CBZ      r0,|L18.52|
;;;205    		writeCString(pptr, mqttstring.cstring);
00002a  4620              MOV      r0,r4
00002c  9901              LDR      r1,[sp,#4]
00002e  f7fffffe          BL       writeCString
000032  e003              B        |L18.60|
                  |L18.52|
;;;206    	else
;;;207    		writeInt(pptr, 0);
000034  2100              MOVS     r1,#0
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       writeInt
                  |L18.60|
;;;208    }
00003c  bd1f              POP      {r0-r4,pc}
;;;209    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  bufptr
                          DCD      0x00000000
